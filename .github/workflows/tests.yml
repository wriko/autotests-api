# Имя вашего workflow, которое будет отображаться в интерфейсе GitHub Actions
name: API tests

# Указываем правила, когда будет запускаться данный workflow
on:
  push:
    branches:
      - main  # Запускать workflow, когда будет сделан коммит в ветку main
  pull_request:
    branches:
      - main  # Запускать workflow, когда будет сделан pull request в ветку main

# Определяем все шаги, которые должны быть выполнены в рамках работы с тестами
jobs:
  run-tests:
    runs-on: ubuntu-latest  # Указываем, что тесты будут запускаться на последней версии Ubuntu

    steps:
      # 1. Шаг, который будет клонировать ваш репозиторий на машину GitHub Actions
      - name: Check out repository
        uses: actions/checkout@v4  # Используем GitHub Action (checkout@v4) для клонирования репозитория

      # 2. Шаг для установки Python на виртуальной машине GitHub Actions
      - name: Set up Python
        uses: actions/setup-python@v5  # Используем GitHub Action (setup-python@v5) для установки Python
        with:
          python-version: '3.12'  # Устанавливаем версию Python 3.12 (можно заменить на другую версию)

      # 3. Шаг для клонирования репозитория с тестовым сервером в рабочую среду
      - name: Clone test server repository
        run: git clone https://github.com/Nikita-Filonov/qa-automation-engineer-api-course.git

      # 4. Шаг для установки зависимостей для тестового сервера
      - name: Install test server dependencies
        run: pip install -r qa-automation-engineer-api-course/requirements.txt # Устанавливаем зависимости, указанные в requirements.txt тестового сервера (указываем пусть к файлу через название проекта)

      # 5. Шаг для запуска тестового сервера с необходимыми переменными окружения
      - name: Start a test server
        env: # Устанавливаем переменные окружения для тестового сервера из файла .env. Но для этого надо в файле config.py в классе Settings добавить extra="allow",
          APP_HOST: "http://localhost:8000"  # Устанавливаем адрес хоста сервера
          DATABASE_URL: "sqlite+aiosqlite:///./local.db" # Устанавливаем URL локальной базы данных
          JWT_ALGORITHM: "HS256" # Алгоритм для JWT токенов
          JWT_SECRET_KEY: "qa-automation-engineer-api-course-secret-key" # Секретный ключ для JWT
          JWT_ACCESS_TOKEN_EXPIRE: 1800 # Время жизни access token (в секундах)
          JWT_REFRESH_TOKEN_EXPIRE: 5184000 # Время жизни refresh token (в секундах)
        run: uvicorn main:app --host 0.0.0.0 --port 8000 --app-dir ./qa-automation-engineer-api-course & # Запускаем сервер в фоновом режиме (&) с указанными переменными окружения

      # 6. Шаг для установки всех зависимостей проекта
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Обновляем pip до последней версии
          pip install -r requirements.txt  # Устанавливаем зависимости, указанные в requirements.txt

      # 7. Шаг для запуска тестов с использованием pytest и генерации отчётов Allure
      - name: Run API tests with pytest and generate Allure results
        run: |
          pytest -m regression --alluredir=allure-results --numprocesses 2  # Запускаем тесты, отмеченные как "regression" в 2 потока, генерируем результаты для Allure



      # 8. Шаг для получения истории отчётов Allure, если она существует
      - name: Get Allure history
        uses: actions/checkout@v4  # Опять клонируем репозиторий, чтобы получить историю отчётов
        if: always()  # Всегда выполняем, независимо от успеха или неудачи предыдущих шагов
        continue-on-error: true  # Если здесь возникнет ошибка, workflow всё равно продолжит выполнение
        with:
          ref: gh-pages  # Указываем ветку gh-pages для получения отчётов
          path: gh-pages  # Указываем путь для сохранения отчётов



      # 9. Шаг для генерации и отображения отчёта Allure
      - name: Generates Allure Report with history
        uses: simple-elf/allure-report-action@v1.12  # Используем готовое решение из GitHub Marketplace для генерации Allure отчёта
        if: always()  # Этот шаг тоже всегда выполняется
        with:
          allure_results: allure-results  # Указываем каталог с результатами тестов
          allure_history: allure-history  # Указываем каталог для истории отчётов Allure


      # 9.2. Показываем содержимое папки allure-history для контроля
      - name: List files in allure-history
        run: ls -la allure-history

      - name: Override CNAME with empty value
        if: always()
        run: |
            echo "" | tee ./allure-history/CNAME


      # 10.  Шаг для деплоя отчёта Allure на GitHub Pages, чтобы его можно было просматривать в браузере
      - name: Deploy report to  Github Pages
        if: always()  # Выполняется всегда, независимо от успеха других шагов
        uses: peaceiris/actions-gh-pages@v4  # Используем GitHub Action для публикации отчёта на GitHub Pages
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для аутентификации на GitHub
          publish_branch: gh-pages  # Указываем, что отчёт будет опубликован в ветке gh-pages
          publish_dir: allure-history  # Указываем папку, которая будет опубликована на GitHub Pages


      # 11. Шаг для вывода ссылки на Allure-отчёт
      - name: Show Allure Report link
        if: always()
        run: echo "Allure Report https://wriko.github.io/autotests-api/"