import asyncio  # импортирует модуль `asyncio`, который используется для работы с асинхронным программированием
import websockets  # импортирует модуль `websockets`, который предоставляет инструменты для работы с WebSocket-соединениями
from websockets import ServerConnection  # импортирует класс `ServerConnection` из модуля `websockets`, который представляет соединение сервера с клиентом через WebSocket


async def echo(websocket: ServerConnection):  # определяет асинхронную функцию `echo`, которая принимает объект `websocket` типа `ServerConnection`
    async for message in websocket:  # асинхронно обрабатывает входящие сообщения от клиента в цикле
        print(f"Получено сообщение от пользователя: {message}") # выводит сообщение о том, что сообщение получено
        response = f"Сообщение пользователя: {message}"  # формирует ответное сообщение, добавляя к полученному сообщению префикс "Сервер получил сообщение от пользователя: "

        for i in range(5): # цикл для отправки 5 сообщений
            await websocket.send(response) # отправляет ответное сообщение клиенту через WebSocket

async def main():  # определяет асинхронную функцию `main`, которая запускает WebSocket-сервер
    server = await websockets.serve(echo, "localhost", 8765)  # создает WebSocket-сервер, который будет слушать на адресе "localhost" и порту 8765, используя функцию `echo` для обработки входящих сообщений
    print("Сервер запущен на ws://localhost:8765")  # выводит сообщение о том, что сервер запущен и готов принимать соединения
    await server.wait_closed()  # асинхронно ожидает закрытия сервера, чтобы не завершать выполнение программы сразу после запуска


asyncio.run(main())  # запускает асинхронную функцию `main`, которая инициализирует и запускает WebSocket-сервер