Использование Enum для URI API клиентов
В этом уроке мы рассмотрим, как использовать Enum вместо захардкоженных адресов эндпоинтов в API клиентах.

------------------
Текущая проблема
------------------

Начнем с описания текущей ситуации. У нас есть API клиенты, которые выполняют HTTP запросы к различным эндпоинтам, например:

    class PrivateUsersClient(APIClient):
        @allure.step("Get user me")
        def get_user_me_api(self) -> Response:
            return self.get("/api/v1/users/me")

        @allure.step("Get user by id {user_id}")
        def get_user_api(self, user_id: str) -> Response:
            return self.get(f"/api/v1/users/{user_id}")

        @allure.step("Update user by id {user_id}")
        def update_user_api(self, user_id: str, request: UpdateUserRequestSchema) -> Response:
            return self.patch(f"/api/v1/users/{user_id}", json=request.model_dump(by_alias=True))

Если внимательно изучить код, можно заметить, что при вызове каждого эндпоинта повторяется строка /api/v1/users. Это не критично, если количество эндпоинтов на сервере не велико, но на реальных проектах, где их может быть десятки или даже сотни, ситуация осложняется. Представьте, что один из эндпоинтов /api/v1/users будет изменен, и теперь все запросы должны идти по новому пути, например /api/v2/users или /api/v1/users-new. В таком случае вам нужно будет вручную обновить все вызовы в клиенте. А что если у вас десятки эндпоинтов или даже десятки API клиентов с сотнями эндпоинтов? Простое исправление вручную может стать очень трудоемким процессом.

-=-----------------------
Решение: использование Enum для хранения URI
-=-----------------------

Одним из хороших решений будет использование Enum для хранения адресов эндпоинтов. Так, если нужно будет обновить URI, вы сможете сделать это централизованно, а не по каждому месту в коде.

Пример реализации:

    from enum import Enum


    class APIRoutes(str, Enum):
        ...
        USERS = '/users'

        def __str__(self) -> str:
            return self.value

Теперь, вместо захардкоженных строк в API клиенте, мы будем использовать Enum:

    class PrivateUsersClient(APIClient):
        @allure.step("Get user me")
        def get_user_me_api(self) -> Response:
            return self.get(f"{APIRoutes.USERS}/me")

        @allure.step("Get user by id {user_id}")
        def get_user_api(self, user_id: str) -> Response:
            return self.get(f"{APIRoutes.USERS}/{user_id}")

        @allure.step("Update user by id {user_id}")
        def update_user_api(self, user_id: str, request: UpdateUserRequestSchema) -> Response:
            return self.patch(f"{APIRoutes.USERS}/{user_id}", json=request.model_dump(by_alias=True))


Преимущества использования Enum для URI
1. Централизованное обновление: Все адреса эндпоинтов теперь хранятся в одном месте, и если нужно изменить путь, достаточно внести изменения в Enum.
Это уменьшает вероятность ошибок и упрощает поддержку.

2. Снижение дублирования: Код становится более чистым, так как повторяющиеся строки эндпоинтов теперь заменены на единую ссылку из Enum.
Это упрощает работу с кодом и делает его более читаемым.

3. Поддержка хороших практик: Использование Enum помогает следовать паттернам, таким как KISS (Keep It Simple, Stupid) и DRY (Don’t Repeat Yourself),
что улучшает поддерживаемость и масштабируемость проекта.



Ответ на возможные вопросы^

Некоторые могут задаться вопросом: «А зачем мне это делать, если я могу просто переименовать все эндпоинты с помощью IDE?» Возможно, но есть несколько нюансов:
1. Грамотный код: Мы должны изначально писать поддерживаемый код, соблюдая лучшие практики, а не полагаться только на возможности IDE. Это обеспечит стабильность и удобство работы с кодом в будущем.
2. Рефакторинг: В некоторых случаях массовое переименование через IDE не решит проблемы. Иногда требуется рефакторинг, и здесь IDE не всегда сможет помочь. Использование Enum позволяет централизованно управлять изменениями и избежать многих трудностей.

Теперь давайте применим этот подход в API клиентах нашего проекта.

1. Создаем файл routes.py
В папке tools создадим файл routes.py с таким расположением:

.
└── autotests-api/
    └── tools/
        ├── __init__.py
        └── routes.py
2. Создаем Enum APIRoutes
В файле /tools/routes.py добавим следующий код:

from enum import Enum


class APIRoutes(str, Enum):
    USERS = "/api/v1/users"
    FILES = "/api/v1/files"
    COURSES = "/api/v1/courses"
    EXERCISES = "/api/v1/exercises"
    AUTHENTICATION = "/api/v1/authentication"

    def __str__(self):
        return self.value
Объяснение кода
Мы создаем класс APIRoutes, который наследуется от двух классов: str и Enum. Это важно, потому что:

Наследование от str позволяет Enum-элементам хранить строки, что делает их удобными для работы с URI, поскольку каждый элемент будет представлять собой строку, как, например, /api/v1/users.
Наследование от Enum делает APIRoutes перечислением, а это добавляет полезные возможности для работы с набором предопределенных значений, например, для их проверки или итерации.
В классе мы определяем несколько элементов перечисления, каждый из которых представляет URI для различных API эндпоинтов, таких как /api/v1/users, /api/v1/files и так далее.

Метод __str__ был добавлен специально, чтобы при преобразовании элементов Enum в строку (например, при конкатенации с другими строками или выводе в логах) возвращалась не сама переменная типа Enum, а именно её значение. Это позволяет избежать вывода лишней информации типа <APIRoutes.USERS: '/api/v1/users'>, а вместо этого получать только строковое представление пути /api/v1/users.

Пример:

print(APIRoutes.USERS) # Выведет: /api/v1/users
Без этого метода, при попытке использовать элемент перечисления как строку, мы бы получили его полное представление, включая название класса и сам элемент:

print(APIRoutes.USERS)  # Выведет: APIRoutes.USERS
Внедрение __str__ повышает удобство и читаемость кода.

Теперь мы создали файл с перечислением APIRoutes, которое централизует все URI и делает код более удобным для поддержки и изменений в будущем.

3. Используем APIRoutes в API клиентах
Теперь давайте применим enum APIRoutes в различных API клиентах. Мы начнем с клиента для работы с публичными пользователями (PublicUsersClient), который отвечает за взаимодействие с публичными эндпоинтами для пользователей. Для этого откроем файл /clients/users/public_users_client.py и заменим захардкоженные URL-адреса эндпоинтов на значения из APIRoutes.

import allure
from httpx import Response

from clients.api_client import APIClient
from clients.public_http_builder import get_public_http_client
from clients.users.users_schema import CreateUserResponseSchema, CreateUserRequestSchema
from tools.routes import APIRoutes  # Импортируем enum APIRoutes


class PublicUsersClient(APIClient):
    """
    Клиент для работы с /api/v1/users
    """

    @allure.step("Create user")
    def create_user_api(self, request: CreateUserRequestSchema) -> Response:
        """
        Метод создает пользователя.

        :param request: Словарь с email, password, lastName, firstName, middleName.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/users используем APIRoutes.USERS
        return self.post(APIRoutes.USERS, json=request.model_dump(by_alias=True))

# Остальной код без изменений
Разбор изменений:
В коде выше мы заменили захардкоженный URL-адрес /api/v1/users на использование значения APIRoutes.USERS.
Использование enum позволяет избежать ошибок, связанных с повторяющимися строками, и облегчает изменения, так как путь к эндпоинту теперь централизованно хранится в одном месте.
Теперь по аналогии можно применить изменения для других API клиентов, например, для PrivateUsersClient, FilesClient, CoursesClient и AuthenticationClient.

/clients/users/private_users_client.py

import allure
from httpx import Response

from clients.api_client import APIClient
from clients.private_http_builder import get_private_http_client, AuthenticationUserSchema
from clients.users.users_schema import UpdateUserRequestSchema, GetUserResponseSchema
from tools.routes import APIRoutes  # Импортируем enum APIRoutes


class PrivateUsersClient(APIClient):
    """
    Клиент для работы с /api/v1/users
    """

    @allure.step("Get user me")
    def get_user_me_api(self) -> Response:
        """
        Метод получения текущего пользователя.

        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/users используем APIRoutes.USERS
        return self.get(f"{APIRoutes.USERS}/me")

    @allure.step("Get user by id {user_id}")
    def get_user_api(self, user_id: str) -> Response:
        """
        Метод получения пользователя по идентификатору.

        :param user_id: Идентификатор пользователя.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/users используем APIRoutes.USERS
        return self.get(f"{APIRoutes.USERS}/{user_id}")

    @allure.step("Update user by id {user_id}")
    def update_user_api(self, user_id: str, request: UpdateUserRequestSchema) -> Response:
        """
        Метод обновления пользователя по идентификатору.

        :param user_id: Идентификатор пользователя.
        :param request: Словарь с email, lastName, firstName, middleName.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/users используем APIRoutes.USERS
        return self.patch(f"{APIRoutes.USERS}/{user_id}", json=request.model_dump(by_alias=True))

    @allure.step("Delete user by id {user_id}")
    def delete_user_api(self, user_id: str) -> Response:
        """
        Метод удаления пользователя по идентификатору.

        :param user_id: Идентификатор пользователя.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/users используем APIRoutes.USERS
        return self.delete(f"{APIRoutes.USERS}/{user_id}")

# Остальной код без изменений
/clients/files/files_client.py

import allure
from httpx import Response

from clients.api_client import APIClient
from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema
from clients.private_http_builder import AuthenticationUserSchema, get_private_http_client
from tools.routes import APIRoutes  # Импортируем enum APIRoutes


class FilesClient(APIClient):
    """
    Клиент для работы с /api/v1/files
    """

    @allure.step("Get file by id {file_id}")
    def get_file_api(self, file_id: str) -> Response:
        """
        Метод получения файла.

        :param file_id: Идентификатор файла.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/files используем APIRoutes.FILES
        return self.get(f"{APIRoutes.FILES}/{file_id}")

    @allure.step("Create file")
    def create_file_api(self, request: CreateFileRequestSchema) -> Response:
        """
        Метод создания файла.

        :param request: Словарь с filename, directory, upload_file.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/files используем APIRoutes.FILES
        return self.post(
            APIRoutes.FILES,
            data=request.model_dump(by_alias=True, exclude={'upload_file'}),
            files={"upload_file": request.upload_file.read_bytes()}
        )

    @allure.step("Delete file by id {file_id}")
    def delete_file_api(self, file_id: str) -> Response:
        """
        Метод удаления файла.

        :param file_id: Идентификатор файла.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/files используем APIRoutes.FILES
        return self.delete(f"{APIRoutes.FILES}/{file_id}")

# Остальной код без изменений
/clients/courses/courses_client.py

import allure
from httpx import Response

from clients.api_client import APIClient
from clients.courses.courses_schema import GetCoursesQuerySchema, CreateCourseRequestSchema, UpdateCourseRequestSchema, \
    CreateCourseResponseSchema
from clients.private_http_builder import AuthenticationUserSchema, get_private_http_client
from tools.routes import APIRoutes  # Импортируем enum APIRoutes


class CoursesClient(APIClient):
    """
    Клиент для работы с /api/v1/courses
    """

    @allure.step("Get courses")
    def get_courses_api(self, query: GetCoursesQuerySchema) -> Response:
        """
        Метод получения списка курсов.

        :param query: Словарь с userId.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/courses используем APIRoutes.COURSES
        return self.get(APIRoutes.COURSES, params=query.model_dump(by_alias=True))

    @allure.step("Get course by id {course_id}")
    def get_course_api(self, course_id: str) -> Response:
        """
        Метод получения курса.

        :param course_id: Идентификатор курса.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/courses используем APIRoutes.COURSES
        return self.get(f"{APIRoutes.COURSES}/{course_id}")

    @allure.step("Create course")
    def create_course_api(self, request: CreateCourseRequestSchema) -> Response:
        """
        Метод создания курса.

        :param request: Словарь с title, maxScore, minScore, description, estimatedTime,
        previewFileId, createdByUserId.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/courses используем APIRoutes.COURSES
        return self.post(APIRoutes.COURSES, json=request.model_dump(by_alias=True))

    @allure.step("Update course by id {course_id}")
    def update_course_api(self, course_id: str, request: UpdateCourseRequestSchema) -> Response:
        """
        Метод обновления курса.

        :param course_id: Идентификатор курса.
        :param request: Словарь с title, maxScore, minScore, description, estimatedTime.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/courses используем APIRoutes.COURSES
        return self.patch(
            f"{APIRoutes.COURSES}/{course_id}",
            json=request.model_dump(by_alias=True)
        )

    @allure.step("Delete course by id {course_id}")
    def delete_course_api(self, course_id: str) -> Response:
        """
        Метод удаления курса.

        :param course_id: Идентификатор курса.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/courses используем APIRoutes.COURSES
        return self.delete(f"{APIRoutes.COURSES}/{course_id}")

# Остальной код без изменений
/clients/authentication/authentication_client.py

import allure
from httpx import Response

from clients.api_client import APIClient
from clients.authentication.authentication_schema import LoginRequestSchema, RefreshRequestSchema, LoginResponseSchema
from clients.public_http_builder import get_public_http_client
from tools.routes import APIRoutes  # Импортируем enum APIRoutes


class AuthenticationClient(APIClient):
    """
    Клиент для работы с /api/v1/authentication
    """

    @allure.step("Authenticate user")
    def login_api(self, request: LoginRequestSchema) -> Response:
        """
        Метод выполняет аутентификацию пользователя.

        :param request: Словарь с email и password.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/authentication используем APIRoutes.AUTHENTICATION
        return self.post(
            f"{APIRoutes.AUTHENTICATION}/login",
            json=request.model_dump(by_alias=True)
        )

    @allure.step("Refresh authentication token")
    def refresh_api(self, request: RefreshRequestSchema) -> Response:
        """
        Метод обновляет токен авторизации.

        :param request: Словарь с refreshToken.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        # Вместо /api/v1/authentication используем APIRoutes.AUTHENTICATION
        return self.post(
            f"{APIRoutes.AUTHENTICATION}/refresh",
            json=request.model_dump(by_alias=True)
        )

# Остальной код без изменений
4. Тестирование
Теперь, когда все изменения внесены, важно провести тестирование, чтобы убедиться, что они не нарушили работу системы. Для этого запустим все автотесты:

python -m pytest -m "regression"
Если все изменения были внесены правильно, все автотесты должны пройти успешно.