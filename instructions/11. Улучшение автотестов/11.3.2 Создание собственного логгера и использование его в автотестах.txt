Создание собственного логгера и использование его в автотестах
Давайте создадим собственный логгер и добавим логирование в автотесты

-------------------
1. Создаем функцию get_logger
-------------------
Для начала создадим файл tools/logger.py:

.
└── autotests-api/
    └── tools/
        └── logger.py

В файле logger.py добавим функцию get_logger:

    import logging


    def get_logger(name: str) -> logging.Logger:
        # Инициализация логгера с указанным именем
        logger = logging.getLogger(name)
        # Устанавливаем уровень логирования DEBUG для логгера,
        # чтобы он обрабатывал все сообщения от DEBUG и выше
        logger.setLevel(logging.DEBUG)

        # Создаем обработчик, который будет выводить логи в консоль
        handler = logging.StreamHandler()
        # Устанавливаем уровень логирования DEBUG для обработчика,
        # чтобы он обрабатывал все сообщения от DEBUG и выше
        handler.setLevel(logging.DEBUG)

        # Задаем форматирование лог-сообщений: включаем время, имя логгера, уровень и сообщение
        formatter = logging.Formatter('%(asctime)s | %(name)s | %(levelname)s | %(message)s')
        handler.setFormatter(formatter)  # Применяем форматтер к обработчику

        # Добавляем обработчик к логгеру
        logger.addHandler(handler)

        # Возвращаем настроенный логгер
        return logger


 Данная функция отвечает за инициализацию и настройку логгера в нашем проекте. Использовать ее очень просто:

    logger = get_logger("API Client")
    logger.info('Make POST request')
    logger.info('Got 200 response')

Вывод в консоль будет соответствовать:

    2024-10-27 15:19:14,343 | INPUT | INFO | Typing to input
    2024-10-27 15:19:14,343 | INPUT | INFO | Clicking input

Реализация таких функций по инициализации и настройке логгера является распространенной практикой, которая позволяет избежать дублирования кода, настраивая логгер, обработчик и форматтер всего один раз. Обратите внимание, что функция принимает name, которое обычно совпадает с названием файла/класса или логическим предназначением файла/класса, где происходит логирование.

-------------------------
2. Используем get_logger для HTTP-клиента
-------------------------
Теперь добавим логирование HTTP-запросов к API. Наша цель — записывать в лог отправляемые запросы и получаемые ответы в следующем формате:

    2025-03-15 22:21:34,193 | HTTP_CLIENT | INFO | Make POST request to http://localhost:8000/api/v1/authentication/login
    2025-03-15 22:21:34,452 | HTTP_CLIENT | INFO | Got response 200 OK from http://localhost:8000/api/v1/authentication/login

Это позволит в реальном времени отслеживать запросы, выполняемые тестами, и быстро анализировать полученные ответы.

Мы будем использовать event hooks (событийные хуки), встроенные в httpx, чтобы автоматически логировать отправляемые запросы и получаемые ответы.

Важно! Мы уже подробно разбирали event hooks в уроке "cURL в Allure-отчете: упрощаем анализ API-тестов".
Если вы его пропустили, рекомендуем сначала ознакомиться с этим материалом.

--------------------------
1. Создание event hook-ов
---------------------------
В файле /clients/event_hooks.py добавим два event hook-а:
- log_request_event_hook — логирует информацию об отправленном HTTP-запросе.
- log_response_event_hook — логирует информацию о полученном ответе.

    import allure
    from httpx import Request, Response

    from tools.http.curl import make_curl_from_request
    from tools.logger import get_logger  # Импортируем функцию для создания логгера

    # Инициализируем логгер один раз на весь модуль
    logger = get_logger("HTTP_CLIENT")


    def curl_event_hook(request: Request):
        """
        Event hook для автоматического прикрепления cURL команды к Allure отчету.

        :param request: HTTP-запрос, переданный в `httpx` клиент.
        """
        curl_command = make_curl_from_request(request)
        allure.attach(curl_command, "cURL command", allure.attachment_type.TEXT)


    def log_request_event_hook(request: Request):  # Создаем event hook для логирования запроса
        """
        Логирует информацию об отправленном HTTP-запросе.

        :param request: Объект запроса HTTPX.
        """
        # Пишем в лог информационное сообщение о запроса
        logger.info(f'Make {request.method} request to {request.url}')


    def log_response_event_hook(response: Response):  # Создаем event hook для логирования ответа
        """
        Логирует информацию о полученном HTTP-ответе.

        :param response: Объект ответа HTTPX.
        """
        # Пишем в лог информационное сообщение о полученном ответе
        logger.info(
            f"Got response {response.status_code} {response.reason_phrase} from {response.url}"
        )

Разбор кода:

1. Инициализация логгера
- Мы создаем логгер logger = get_logger("HTTP_CLIENT") в начале файла.
- Это предотвращает дублирование логгеров и избавляет от ненужных вызовов get_logger().

2. Функция log_request_event_hook(request)
- При каждом отправке запроса в лог записывается строка вида:
    2025-03-15 22:21:34,193 | HTTP_CLIENT | INFO | Make POST request to http://localhost:8000/api/v1/authentication/login
- Логгируется метод (GET, POST и т. д.) и полный URL запроса.

3. Функция log_response_event_hook(response)
После получения ответа лог записывает:
    2025-03-15 22:21:34,452 | HTTP_CLIENT | INFO | Got response 200 OK from http://localhost:8000/api/v1/authentication/login
Фиксируется код ответа (200 и т. д.), статус (OK, Bad Request и т. д.) и URL.

4. Правильная инициализация логгера
Чтобы избежать дублирования логгеров, инициализируем логгер один раз на весь файл:

Правильный вариант:
    logger = get_logger("HTTP_CLIENT") # Один раз в начале файла

Неправильный вариант:
    logger = get_logger("HTTP_CLIENT")
    logger = get_logger("HTTP_CLIENT")
    logger = get_logger("HTTP_CLIENT")

Если повторно инициализировать логгер, в логах появятся дубликаты сообщений:
    2024-10-27 16:34:14,828 | BASE_ELEMENT | INFO | Make GET request
    2024-10-27 16:34:14,828 | BASE_ELEMENT | INFO | Make GET request
    2024-10-27 16:34:14,828 | BASE_ELEMENT | INFO | Make GET request
Поэтому важно следить за инициализацией логгеров и не создавать их повторно в одном файле.


-----------------------------
2. Подключение event hook-ов
-----------------------------
ТТеперь, когда мы создали event hook-и для логирования запросов и ответов, нам необходимо подключить их к нашим HTTP-клиентам. В нашем проекте за инициализацию клиентов отвечают функции get_public_http_client и get_private_http_client.

Подключение event hook-ов позволит нам автоматически логировать всю сетевую активность при взаимодействии с API, что упростит анализ тестов, особенно при отладке.

Начнем с подключения логирования в get_public_http_client. Откроем файл /clients/public_http_builder.py и внесем изменения:

    from httpx import Client

    # Импортируем хуки логирования запроса и ответа
    from clients.event_hooks import curl_event_hook, log_request_event_hook, log_response_event_hook
    from config import settings


    def get_public_http_client() -> Client:
        """
        Функция создаёт экземпляр httpx.Client с базовыми настройками.

        :return: Готовый к использованию объект httpx.Client.
        """
        return Client(
            timeout=settings.http_client.timeout,
            base_url=settings.http_client.client_url,
            event_hooks={
                "request": [curl_event_hook, log_request_event_hook],  # Логируем исходящие HTTP-запросы
                "response": [log_response_event_hook]  # Логируем полученные HTTP-ответы
            }
        )

Разбор кода:

Импорт хуков: Мы импортируем log_request_event_hook и log_response_event_hook из модуля clients.event_hooks, а также curl_event_hook для логирования cURL команды.
Передача хуков в event_hooks:
"request": При каждом исходящем HTTP-запросе будет выполняться:
curl_event_hook — добавляет команду cURL в Allure-отчет.
log_request_event_hook — записывает информацию о запросе в лог.
"response": После получения HTTP-ответа выполняется log_response_event_hook, который записывает ответ в лог.
Результат: Теперь каждый HTTP-запрос и ответ в get_public_http_client будет автоматически логироваться.


Теперь по аналогии добавим логирование в get_private_http_client. Откроем файл /clients/private_http_builder.py и внесем изменения:

    from functools import lru_cache

    from httpx import Client
    from pydantic import BaseModel

    from clients.authentication.authentication_client import get_authentication_client
    from clients.authentication.authentication_schema import LoginRequestSchema
    # Импортируем хуки логирования запроса и ответа
    from clients.event_hooks import curl_event_hook, log_request_event_hook, log_response_event_hook
    from config import settings


    class AuthenticationUserSchema(BaseModel, frozen=True):
        email: str
        password: str


    @lru_cache(maxsize=None)
    def get_private_http_client(user: AuthenticationUserSchema) -> Client:
        authentication_client = get_authentication_client()

        login_request = LoginRequestSchema(email=user.email, password=user.password)
        login_response = authentication_client.login(login_request)

        return Client(
            timeout=settings.http_client.timeout,
            base_url=settings.http_client.client_url,
            headers={"Authorization": f"Bearer {login_response.token.access_token}"},
            event_hooks={
                "request": [curl_event_hook, log_request_event_hook],  # Логируем исходящие HTTP-запросы
                "response": [log_response_event_hook]  # Логируем полученные HTTP-ответы
            },
        )

Благодаря использованию event hook-ов в HTTPX мы смогли всего за несколько минут добавить логирование ко всем HTTP-запросам в автотестах. Теперь при каждом выполнении тестов у нас в логах будут отображаться все запросы, ответы.

-------------------
3. Тестирование
-------------------
Теперь давайте запустим автотесты и проверим, как работает логирование HTTP-запросов к API.

Для этого в корневой директории проекта autotests-api выполним команду:

    python -m pytest -m "regression" --alluredir=./allure-results
После запуска тестов в логах мы увидим следующую информацию:

    tests/files/test_files.py::TestFiles::test_create_file_with_empty_directory 2025-03-16 11:11:00,972 | HTTP_CLIENT | INFO | Make POST request to http://localhost:8000/api/v1/users
    2025-03-16 11:11:01,243 | HTTP_CLIENT | INFO | Got response 200 OK from http://localhost:8000/api/v1/users
    2025-03-16 11:11:01,249 | HTTP_CLIENT | INFO | Make POST request to http://localhost:8000/api/v1/authentication/login
    2025-03-16 11:11:01,506 | HTTP_CLIENT | INFO | Got response 200 OK from http://localhost:8000/api/v1/authentication/login
    2025-03-16 11:11:01,512 | HTTP_CLIENT | INFO | Make POST request to http://localhost:8000/api/v1/files
    2025-03-16 11:11:01,559 | HTTP_CLIENT | INFO | Got response 422 Unprocessable Entity from http://localhost:8000/api/v1/files
    PASSED


Разбор логов
Фиксация запросов:

Логирование фиксирует каждый исходящий HTTP-запрос с его методом (POST) и URL.
Например: Make POST request to http://localhost:8000/api/v1/users показывает, что тест отправил запрос на создание пользователя.
Фиксация ответов:

Записывается статус-код и ответ от сервера.
Например: Got response 200 OK from http://localhost:8000/api/v1/users означает, что сервер успешно обработал запрос.
Благодаря логированию мы можем четко видеть последовательность запросов и ответов, что значительно упрощает отладку тестов. Если тест упал из-за ошибки API или некорректных данных, логи позволят быстро выявить причину и исправить проблему.

Теперь давайте взглянем на отчет Allure. На скриншоте ниже видно, что логи, написанные в консоль, автоматически прикреплены к отчету Allure. Это возможно благодаря библиотеке allure-pytest, которая автоматически добавляет все логи в отчет. Это позволяет быстро проанализировать ход автотеста, и эта информация может быть очень полезна для разборов тестов.