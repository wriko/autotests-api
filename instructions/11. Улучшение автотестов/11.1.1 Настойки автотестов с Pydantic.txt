Настройки проекта

Ссылки:
Официальная документация pydantic-settings - https://docs.pydantic.dev/latest/concepts/pydantic_settings/

В этом уроке мы познакомимся с библиотекой pydantic-settings, которая поможет управлять настройками нашего проекта.
Давайте разберём, что такое настройки проекта и для чего они нужны.



Зачем нужны настройки в проекте?
Настройки проекта — это централизованное хранилище всех важных параметров, используемых в проекте.
Они позволяют упрощать управление конфигурацией, особенно когда ваш проект становится более сложным.
Когда мы говорим о настройках, мы имеем в виду такие параметры, как ссылки на сервисы, параметры окружения, данные для авторизации, настройки тестовых окружений и т.д.

Основное преимущество наличия настроек — это возможность изменять параметры проекта в одном месте, не касаясь всего кода.
Например, если нужно поменять ссылку на тестируемое приложение, вам не придётся искать и менять её по всему проекту.
Достаточно изменить её в одном месте — в файле настроек. Это значительно упрощает поддержку проекта и делает его более гибким.

Какие данные обычно выносятся в настройки?
В зависимости от проекта, в настройки могут быть вынесены различные параметры. Примеры типичных данных, которые выносят в настройки:
 - URL тестируемого сервера. Например, для нашего курса это может быть ссылка на сервер: http://localhost:8000. В случае смены окружения или сервера, вам будет достаточно поменять ссылку только в одном месте.
 - Пути к директориям для сохранения артефактов тестов. Например, куда сохранять логи или файлы трассировки (trace) после выполнения тестов.
 - Данные тестового пользователя. Часто для тестирования используется один и тот же тестовый аккаунт. В настройки выносятся данные для авторизации, такие как логин и пароль, чтобы они были доступны везде, где это необходимо.
 - Timeouts. При работе с автотестами мы часто задаем таймауты (timeouts) для отправки запросов через API-клиенты. Вместо того чтобы жестко прописывать эти значения в коде, лучше вынести их в настройки.
 - Другие константы. Любые константы, которые могут изменяться со временем, также рекомендуется выносить в настройки. Это улучшает гибкость тестов и упрощает их поддержку.


Примеры:

 - Количество перезапусков теста (например, при flaky-тестах).
 - Число ретраев запросов (если API нестабильно, тесты могут автоматически повторять запрос).
 - Интервалы ожидания между ретраями (например, 1 секунда между попытками).
 - Конфигурации заголовков или параметров API (например, базовые токены аутентификации).


Почему стоит использовать pydantic-settings?
Библиотека pydantic-settings расширяет возможности Pydantic и позволяет загружать настройки из различных источников — это могут быть файлы .env, переменные окружения, JSON или YAML файлы. Это делает настройку и конфигурацию проекта гибкой и удобной, особенно для работы с разными окружениями (например, разработка, тестирование и продакшн).

Таким образом, настройки проекта позволяют сделать ваш код более поддерживаемым, гибким и лёгким в управлении.