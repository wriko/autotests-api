Основы логирования в python


Ссылки:
Официальная документация python по logging - https://docs.python.org/3/library/logging.html


Что такое логирование?
Логирование — это процесс записи информации о выполнении программного кода в специальный файл или консоль.
Эти записи, называемые логами, позволяют разработчикам и администраторам отслеживать поведение приложения, находить и устранять ошибки, а также собирать статистику о его работе.
Логирование помогает понять, что происходило в программе в момент её работы, и служит важным инструментом для анализа производительности и выявления проблем.

---------------------------------
Основы логирования в Python
---------------------------------
В Python для логирования используется встроенный модуль logging. Он предоставляет гибкий фреймворк для настройки логирования, включая различные уровни важности сообщений и форматы их представления.


---------------------------------
Уровни логирования
---------------------------------
Модуль logging поддерживает несколько уровней логирования, что позволяет классифицировать важность сообщений:
- DEBUG: детальная информация, используемая для диагностики проблем. Применяется в процессе разработки.
- INFO: сообщения, которые подтверждают, что всё работает как ожидается.
- WARNING: предупреждения о потенциальных проблемах или неблагоприятных ситуациях, которые не являются критическими.
- ERROR: ошибки, которые произошли в процессе выполнения программы. Они могут вызвать проблемы, но программа продолжает работать.
- CRITICAL: критические ошибки, которые могут привести к остановке программы.


Основные компоненты логирования
1. Логгер (Logger): основной интерфейс для создания логов. Он позволяет генерировать записи с различными уровнями важности.
2. Обработчик (Handler): компонент, который определяет, куда будут отправляться сообщения (например, в файл, на консоль или в сеть).
3. Форматтер (Formatter): задаёт формат записи логов, включая дату, уровень важности и само сообщение.


Пример использования
Ниже приведён пример, который демонстрирует основные шаги по настройке логирования в Python:

    import logging

    # Создаём логгер с именем "AUTOTEST"
    logger = logging.getLogger("AUTOTEST")
    logger.setLevel(logging.DEBUG)  # Устанавливаем уровень логгирования на DEBUG, чтобы захватывать все сообщения

    # Создаём консольный обработчик для вывода логов в консоль
    handler = logging.StreamHandler()
    handler.setLevel(logging.DEBUG)  # Устанавливаем уровень для обработчика

    # Создаём форматтер для задания формата лог-сообщений
    formatter = logging.Formatter('%(asctime)s | %(name)s | %(levelname)s | %(message)s')
    handler.setFormatter(formatter)  # Привязываем форматтер к обработчику

    # Добавляем обработчик к логгеру
    logger.addHandler(handler)

    # Примеры логирования с разными уровнями важности
    logger.debug("Это сообщение уровня DEBUG.")  # Детальная информация для диагностики
    logger.info("Это сообщение уровня INFO.")  # Сообщение для информирования о процессе
    logger.warning("Это сообщение уровня WARNING.")  # Предупреждение о потенциальной проблеме
    logger.error("Это сообщение уровня ERROR.")  # Сообщение об ошибке, программа продолжает работу
    logger.critical("Это сообщение уровня CRITICAL.")  # Критическая ошибка, может вызвать остановку программы


Если запустить код выше, то в консоли увидим следующее:

2024-10-27 14:42:48,616 | AUTOTEST | DEBUG | Это сообщение уровня DEBUG.
2024-10-27 14:42:48,616 | AUTOTEST | INFO | Это сообщение уровня INFO.
2024-10-27 14:42:48,616 | AUTOTEST | WARNING | Это сообщение уровня WARNING.
2024-10-27 14:42:48,616 | AUTOTEST | ERROR | Это сообщение уровня ERROR.
2024-10-27 14:42:48,616 | AUTOTEST | CRITICAL | Это сообщение уровня CRITICAL.


---------------------------------
Применение логирования в автотестах
---------------------------------
Логирование в автотестах помогает:
1. Отслеживать выполнение тестов: позволяет видеть, какие тесты прошли успешно, а какие — нет, и по каким причинам. Это особенно полезно, когда вы запускаете автотесты локально и хотите отслеживать детали выполнения в консоли.
2. Диагностировать проблемы: при сбое теста логирование помогает быстрее выявить причину ошибки.
3. Собирать статистику: анализ времени выполнения тестов позволяет выявлять медленные или нестабильные части кода, которые могут нуждаться в оптимизации.


---------------------------------
Основные правила логирования:
---------------------------------
Логи должны быть краткими и информативными. Нет смысла записывать длинные сообщения, которые сложно будет анализировать. Логи должны быть полезны, а не перегружены лишней информацией.

Избегайте избыточного логирования. Логируйте только ключевую информацию, которая действительно необходима для понимания выполнения теста. Пример избыточного логирования:

    def get_user_api(self, user_id: str) -> Response:
        logger.info('Formatting URL')  # Избыточное логирование
        url = self.url.format(user_id)
        logger.info('Starting allure step')  # Избыточное логирование
        with allure.step(f'Make GET request to /api/v1/users/{user_id}'):
            logger.info(f'Make GET request to /api/v1/users/{user_id}')
            return self.client.get(url)

Здесь Formatting URL и Starting allure step — это лишние сообщения, которые не добавляют полезной информации о ходе теста.

Пример хорошего логирования:

    def get_user_api(self, user_id: str) -> Response:
        url = self.url.format(user_id)
        with allure.step(f'Make GET request to /api/v1/users/{user_id}'):
            logger.info(f'Make GET request to /api/v1/users/{user_id}')
            return self.client.get(url)


В этом примере в логах записывается только нужная информация, что делает их более полезными и удобными для анализа.