Создаем .env файл с настройками
Перед тем как начать работу с библиотекой pydantic-settings, важно понять, что такое переменные окружения и .env файл,
так как они играют ключевую роль в настройке проектов.

Что такое переменные окружения?
Переменные окружения — это особые переменные, которые хранят настройки или конфигурационные данные и доступны в операционной системе для различных программ и скриптов. В контексте Python и автотестов, переменные окружения позволяют гибко управлять настройками приложения без необходимости вносить изменения в код.

Зачем нужны переменные окружения?
 - Универсальность. Настройки, хранимые в переменных окружения, не зависят от самого приложения. Это позволяет менять настройки в зависимости от окружения (например, продакшн или тестовое окружение).
 - Безопасность. В переменных окружения удобно хранить конфиденциальную информацию, например, ключи API или данные учетных записей, без их записи в код.
 - Удобство развертывания. При использовании CI/CD-процессов можно легко подменять настройки для разных сред, что упрощает автоматизацию.

Примеры переменных окружения
- DATABASE_URL — ссылка на базу данных.
- SECRET_KEY — секретный ключ для шифрования.
- DEBUG — режим отладки приложения.


Как установить переменные окружения?
Способ установки переменных окружения зависит от операционной системы, но процесс везде достаточно схожий.

Установка на Windows
Для установки переменных окружения в Windows можно воспользоваться командной строкой (CMD) или Powershell:

set MY_VARIABLE=значение
Проверить значение переменной можно командой:

echo %MY_VARIABLE%
Чтобы переменная окружения была доступна и после закрытия командной строки, её нужно добавить в системные настройки:

Перейдите в "Мой компьютер" → "Свойства" → "Дополнительные параметры системы".
Нажмите на "Переменные среды".
Добавьте переменные в "Переменные среды пользователя" или "Системные переменные".
Установка на MacOS/Linux
В терминале Linux или MacOS можно установить переменную окружения с помощью команды export:

export MY_VARIABLE="значение"
Чтобы убедиться, что переменная установлена, можно воспользоваться командой:

echo $MY_VARIABLE
Для постоянного использования, добавьте переменную в файл ~/.bashrc или ~/.bash_profile (для bash):

export MY_VARIABLE="значение"



---------------------------------
Что такое .env файл?
---------------------------------
.env файл — это текстовый файл, содержащий переменные окружения и их значения. Этот файл обычно хранится в корне проекта и используется для упрощенного управления настройками, особенно в процессе разработки.

Пример содержимого .env файла:
APP_URL=https://example.com
DEBUG=true
DATABASE_URL=postgresql://user:password@localhost/db_name


Зачем нужен .env файл?
1. Простота. Вместо того чтобы устанавливать переменные вручную в каждой среде, вы можете использовать .env файл для централизованного хранения всех нужных настроек.
2. Удобство разработки. Легко переключаться между разными конфигурациями для разработки, тестирования и продакшена.
3. Совместимость. Многие библиотеки, такие как pydantic-settings, поддерживают автоматическую загрузку переменных из .env файлов, что делает работу с настройками ещё проще.


Как работать с .env файлом в pydantic-settings?
1. Подготовка модели Settings
Перед тем как создавать .env файл и добавлять в него переменные окружения, необходимо настроить модель Settings, чтобы она могла загружать необходимые значения из переменных окружения. Также нужно указать, из какого файла мы хотим их читать.

    from pydantic import BaseModel, HttpUrl, FilePath
    from pydantic_settings import BaseSettings, SettingsConfigDict


    class HTTPClientConfig(BaseModel):
        url: HttpUrl
        timeout: float

        @property
        def client_url(self) -> str:
            return str(self.url)


    class TestDataConfig(BaseModel):
        image_png_file: FilePath


    class Settings(BaseSettings):
        model_config = SettingsConfigDict(
            env_file=".env",  # Указываем, из какого файла читать настройки
            env_file_encoding="utf-8",  # Указываем кодировку файла
            env_nested_delimiter=".",  # Указываем разделитель для вложенных переменных
        )

        test_data: TestDataConfig
        http_client: HTTPClientConfig


Разбор изменений:

1. Pydantic автоматически сопоставляет имена полей с переменными окружения. Например, для поля http_client: HTTPClientConfig переменная будет называться HTTP_CLIENT. Переменные окружения должны быть в формате UPPER_SNAKE_CASE.
2. Мы добавили конфигурацию настроек model_config, в которой указали:
    env_file — файл, из которого будут читаться переменные.
    env_file_encoding — кодировку файла.
    env_nested_delimiter — разделитель для вложенных переменных. В данном примере мы используем точку. Это означает, что вложенные значения, например, для HTTP_CLIENT, будут передаваться в формате HTTP_CLIENT.URL="http://localhost:8000". Если бы разделителем было двоеточие, то запись выглядела бы так: HTTP_CLIENT:URL="http://localhost:8000".


2. Создаем файл .env в корне проекта
.
└── autotests-api/
    └── .env

3. Добавляем переменные окружения в .env файл
Заполним файл .env следующими переменными:

    TEST_DATA.IMAGE_PNG_FILE="./testdata/files/image.png"

    HTTP_CLIENT.URL="http://localhost:8000"
    HTTP_CLIENT.TIMEOUT=100

Обратите внимание, что для вложенных моделей TestUser и TestData значения передаются с использованием разделителя, который мы указали в конфигурации модели.

    # HTTP_CLIENT это поле http_client в модели Settings
    # URL, TIMEOUT это поля в модели HTTPClientConfig
    HTTP_CLIENT.URL="http://localhost:8000"
    HTTP_CLIENT.TIMEOUT=100

4. Проверяем работу настроек
Для проверки того, что настройки корректно загружаются из .env файла, добавим в конец файла config.py следующий код:

# config.py

print(Settings())
Теперь можно запустить файл:

python -m config
Если всё настроено правильно, вы увидите распечатку модели Settings с заполненными значениями:

test_data=TestDataConfig(image_png_file=PosixPath('testdata/files/image.png'))
http_client=HTTPClientConfig(url=HttpUrl('http://localhost:8000/'), timeout=100.0)
5. Что делать, если возникли ошибки
Если при запуске вы получили ошибки типа:

pydantic_core._pydantic_core.ValidationError: 2 validation errors for Settings
http_client.url
  Field required [type=missing, input_value={'timeout': '100'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.10/v/missing
`http_clirnt.url`
  Extra inputs are not permitted [type=extra_forbidden, input_value='http://localhost:8000', input_type=str]
    For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
Убедитесь, что в .env файле нет опечаток и все переменные переданы корректно. Образец правильного .env файла приведен выше в данном шаге.
Убедитесь, что .env файл находится в корневой директории проекта autotests-api, а не в какой-либо другой папке. Это критически важно, так как в противном случае переменные окружения могут не подгружаться.
Запускайте команду python -m config строго из корневой директории проекта autotests-api. Если запуск происходит из другой папки, интерпретатор Python может не найти нужные модули или настройки.
Проверьте, что в коде указана корректная конфигурация для модели Settings. Важно убедиться, что используется следующий код:
model_config = SettingsConfigDict(
    env_file=".env",  # Указываем, из какого файла читать настройки
    env_file_encoding="utf-8",  # Указываем кодировку файла
    env_nested_delimiter=".",  # Указываем разделитель для вложенных переменных
)
Эта настройка гарантирует, что .env файл будет корректно обработан, в том числе с поддержкой вложенных переменных через указанный разделитель.