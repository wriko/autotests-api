Знакомство с JSON schema
Ссылки:
Официальный сайт JSON schema - https://json-schema.org/
Библиотека jsonschema - https://pypi.org/project/jsonschema/

 -------------------------------------
Что такое JSON схема?
 -------------------------------------

JSON схема — это стандарт для описания структуры JSON-данных.
Это своего рода контракт, который определяет, какие данные должны быть в JSON, какие из них обязательны, их типы, форматы и дополнительные ограничения.

Простой пример: JSON схема позволяет сказать, что объект должен содержать ключ name типа строка, который обязательно присутствует, и что ключ age должен быть числом, но его присутствие не обязательно.
JSON схема может быть использована как для описания запросов, так и для описания ответов, которые API отправляет клиентам. Это помогает разработчикам и тестировщикам убедиться,
что данные, которые они получают или отправляют через API, соответствуют ожидаемым требованиям.

Пример структуры JSON схемы:
    {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "age": { "type": "number" }
      },
      "required": ["name"]
    }

В данном примере:
 - Тип данных — это объект ("type": "object").
 - У объекта есть два поля: name (строка) и age (число).
 - Поле name является обязательным ("required": ["name"]).

 -------------------------------------
Зачем нужна JSON схема?
 -------------------------------------

Зачем вообще использовать JSON схему, если можно просто передавать данные в формате JSON? Ответ заключается в необходимости гарантировать, что данные, передаваемые через API, соответствуют ожидаемой структуре.

Основные цели и преимущества:

1. Документация: JSON схема помогает формализовать и документировать API. Разработчики могут понять, как должен выглядеть JSON, просто глядя на схему.
2. Валидация данных: Она позволяет валидировать JSON данные, что помогает предотвратить ошибки. Например, если приложение получает JSON, который не соответствует схеме, это может сигнализировать о неправильных данных.
3. Тестирование API: С помощью схемы можно автоматизировать тестирование API. Например, можно протестировать, что ответ от сервера соответствует ожидаемому формату.
4. Автоматическое генерирование тестов: С помощью схемы можно автоматически создавать тестовые данные и тесты для API.
5. Совместимость: Когда сервисы обмениваются данными, JSON схема помогает гарантировать, что оба сервиса понимают структуру данных одинаково.

Пример валидации с использованием схемы: Если API ожидает ответ с данными пользователя в следующем формате:

    {
      "name": "John Doe",
      "age": 30
    }
Тогда схема будет описывать структуру, как обязательные поля, типы данных и их формат. Если сервер вернет ответ с неверными типами или отсутствием обязательных полей, валидатор сработает, и ошибка будет замечена.

 -------------------------------------
Примеры JSON схемы
 -------------------------------------
Пример 1: Простая схема для объекта

    {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "age": { "type": "number" }
      },
      "required": ["name"]
    }

В этом примере:

 - Это объект, который должен содержать строку name и число age.
 - Поле name обязательно для присутствия.

Пример 2: Массив объектов

    {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "value": { "type": "number" }
        },
        "required": ["id", "value"]
      }
    }

Здесь:
 - Ожидается массив объектов, где каждый объект должен содержать строку id и число value, и оба поля обязательны.

Пример 3: Строка с ограничениями по длине

    {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "minLength": 3,
          "maxLength": 20
        }
      },
      "required": ["username"]
    }

В этом примере:
 - Поле username должно быть строкой, и его длина должна быть от 3 до 20 символов.


Пример 4: Регулярное выражение для валидации email

    {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        }
      },
      "required": ["email"]
    }

Здесь:
 - Поле email должно быть строкой, которая соответствует формату email, проверяемому с помощью регулярного выражения.

 -------------------------------------
Как читать и валидировать JSON схему?
 -------------------------------------
Теперь, когда вы знаете, что такое JSON схема, давайте разберемся, как читать и валидировать данные с ее помощью.

Чтение JSON схемы:
 - type: указывает тип данных. Это может быть object, array, string, number и другие.
 - properties: описывает поля объекта. В каждом поле указывается его тип и дополнительные параметры (например, минимальная длина для строки или минимальное значение для числа).
 - required: список обязательных полей. Если какое-либо из этих полей отсутствует, данные будут считаться некорректными.

Пример чтения схемы:

    {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "age": { "type": "number" }
      },
      "required": ["name"]
    }

 - Это схема объекта.
 - Объект должен содержать поле name (строка) и поле age (число).
 - Поле name обязательно.

Валидация JSON данных с помощью схемы:

Для того чтобы убедиться, что данные соответствуют схеме, можно использовать библиотеку для валидации JSON схем. В Python для этого используется библиотека jsonschema.

Пример валидации с использованием библиотеки jsonschema:

1. Установите библиотеку:
    pip install jsonschema

2. Пример кода для валидации данных:

    from jsonschema import validate, ValidationError

    # Пример схемы
    schema = {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "age": { "type": "number" }
      },
      "required": ["name"]
    }

    # Пример данных
    data = {
      "name": "John Doe",
      "age": 30
    }

    try:
        validate(instance=data, schema=schema)
        print("Данные соответствуют схеме.")
    except ValidationError as e:
        print(f"Ошибка валидации: {e.message}")

Как работает код:

validate проверяет, соответствуют ли данные схеме.
Если данные не соответствуют схеме, будет выброшена ошибка ValidationError, и вы увидите сообщение об ошибке.

Заключение
Теперь вы знаете, что такое JSON схема, как она помогает валидации данных и как ее читать. JSON схема — это мощный инструмент для обеспечения качества и совместимости данных при взаимодействии между сервисами. Валидация данных с использованием схемы позволяет избежать ошибок и гарантировать, что данные соответствуют ожидаемому формату.