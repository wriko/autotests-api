Практика написания Pydantic-моделей
В этом задании вам предстоит самостоятельно создать несколько Pydantic-моделей для описания запроса и ответа на эндпоинт POST /api/v1/users, который используется для создания пользователей.

Необходимо реализовать следующие модели:

    1. UserSchema — модель данных пользователя
    Пример структуры:

    {
      "id": "string",
      "email": "user@example.com",
      "lastName": "string",
      "firstName": "string",
      "middleName": "string"
    }


    2. CreateUserRequestSchema — запрос на создание пользователя

    Пример структуры:
    {
      "email": "user@example.com",
      "password": "string",
      "lastName": "string",
      "firstName": "string",
      "middleName": "string"
    }


    3. CreateUserResponseSchema — ответ с данными созданного пользователя

    Пример структуры:
    {
      "user": {
        "id": "string",
        "email": "user@example.com",
        "lastName": "string",
        "firstName": "string",
        "middleName": "string"
      }
    }


Важно! Вам необходимо применить все лучшие практики, которые мы разбирали в этом уроке:
1. Корректное именование моделей (UserSchema, а не User и т. д.)
2. Использование аннотации типов (str, EmailStr, constr и т. д.)


Размещение кода:
Ваши модели должны находиться в файле pydantic_create_user.py в корне проекта autotests-api.
.
└── autotests-api/
    └── pydantic_create_user.py


Требования к коду:
 - Читаемость и структурированность.
 - Соблюдение стандартов аннотации типов.
 - Корректное именование моделей.
 - Обязательное документирование кода с помощью docstring.


Инструкции по отправке решения: Ссылка на репозиторий