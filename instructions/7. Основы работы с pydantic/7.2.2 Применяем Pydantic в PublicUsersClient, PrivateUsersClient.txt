Теперь давайте напишем и применим Pydantic-модели для клиентов PublicUsersClient и PrivateUsersClient.
 Мы будем следовать той же логике, что и при рефакторинге AuthenticationClient, чтобы сделать код более структурированным, удобным и переиспользуемым.

----------------------------------------
1. Создаем файл users_schema.py
----------------------------------------
Ранее схемы для PublicUsersClient и PrivateUsersClient находились непосредственно в файлах клиентов, что приводило к дублированию модели User. Теперь мы вынесем все модели в отдельный файл users_schema.py.

Создадим новый файл users_schema.py в папке clients/users:

.
└── autotests-api/
    └── clients/
        └── users/
            └── users_schema.py
Это позволит избежать дублирования кода и упростит его поддержку.

-------------------------------------------
2. Создаем модели
-------------------------------------------
Теперь создадим Pydantic-модели для работы с API /api/v1/users:

    from pydantic import BaseModel, Field, EmailStr, ConfigDict


    class UserSchema(BaseModel):
        """
        Описание структуры пользователя.
        """
        model_config = ConfigDict(populate_by_name=True)

        id: str
        email: EmailStr
        last_name: str = Field(alias="lastName")
        first_name: str = Field(alias="firstName")
        middle_name: str = Field(alias="middleName")


    class CreateUserRequestSchema(BaseModel):
        """
        Описание структуры запроса на создание пользователя.
        """
        model_config = ConfigDict(populate_by_name=True)

        email: EmailStr
        password: str
        last_name: str = Field(alias="lastName")
        first_name: str = Field(alias="firstName")
        middle_name: str = Field(alias="middleName")


    class CreateUserResponseSchema(BaseModel):
        """
        Описание структуры ответа создания пользователя.
        """
        user: UserSchema


    class UpdateUserRequestSchema(BaseModel):
        """
        Описание структуры запроса на обновление пользователя.
        """
        model_config = ConfigDict(populate_by_name=True)

        email: EmailStr | None
        last_name: str | None = Field(alias="lastName")
        first_name: str | None = Field(alias="firstName")
        middle_name: str | None = Field(alias="middleName")


    class UpdateUserResponseSchema(BaseModel):
        """
        Описание структуры ответа обновления пользователя.
        """
        user: UserSchema


    class GetUserResponseSchema(BaseModel):
        """
        Описание структуры запроса получения пользователя.
        """
        user: UserSchema


Важные моменты

1. Используем ConfigDict(populate_by_name=True)
Эта настройка позволяет обращаться к полям по их Python-именам (snake_case) при создании экземпляров моделей.

Например, вместо:
    UserSchema(firstName="Alise")
Теперь можно писать:
    UserSchema(first_name="Alise")

Это соответствует стандартному Python-стилю и делает код более читаемым.

2. Сокращаем дублирование кода

Все модели вынесены в users_schema.py, теперь клиенты (PublicUsersClient и PrivateUsersClient) просто импортируют их.
UserSchema переиспользуется в CreateUserResponseSchema, UpdateUserResponseSchema и GetUserResponseSchema, что уменьшает количество повторяющегося кода.

3. Используем alias для соответствия API

Поля с Field(alias="...") помогают соответствовать JSON-структуре API, в котором используется camelCase.
При этом в Python-коде остаются привычные snake_case-имена.

--------------------------------------------
3. Применяем модели в клиенте PublicUsersClient
--------------------------------------------
Теперь давайте применим созданные pydantic модели в PublicUsersClient:

    from httpx import Response

    from clients.api_client import APIClient
    from clients.public_http_builder import get_public_http_client
    from clients.users.users_schema import CreateUserResponseSchema, CreateUserRequestSchema


    class PublicUsersClient(APIClient):
        """
        Клиент для работы с /api/v1/users
        """

        def create_user_api(self, request: CreateUserRequestSchema) -> Response:
            """
            Метод создает пользователя.

            :param request: Словарь с email, password, lastName, firstName, middleName.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.post("/api/v1/users", json=request.model_dump(by_alias=True))

        def create_user(self, request: CreateUserRequestSchema) -> CreateUserResponseSchema:
            response = self.create_user_api(request)
            return CreateUserResponseSchema.model_validate_json(response.text)


    def get_public_users_client() -> PublicUsersClient:
        """
        Функция создаёт экземпляр PublicUsersClient с уже настроенным HTTP-клиентом.

        :return: Готовый к использованию PublicUsersClient.
        """
        return PublicUsersClient(client=get_public_http_client())


Внесенные изменения
1. Импортируем ранее созданные Pydantic-модели
    from clients.users.users_schema import CreateUserResponseSchema, CreateUserRequestSchema
Теперь CreateUserRequestSchema используется для передачи данных в API, а CreateUserResponseSchema для парсинга ответа.

2. Заменяем TypedDict-модели на Pydantic
 - Ранее использовались TypedDict-словари, теперь заменяем их на Pydantic-модели.
 - Это улучшает типизацию, добавляет валидацию данных и упрощает работу с объектами.

3. Используем model_dump(by_alias=True) для сериализации запроса
 - Pydantic-модель требует явной сериализации перед отправкой.
 - model_dump(by_alias=True) приводит данные к формату API (например, first_name → firstName).

4. Используем model_validate_json(response.text) для парсинга ответа. Это безопасный способ загрузки JSON-ответа, исключающий ошибки при работе с необработанными данными.

В остальном код остается без изменений. Теперь PublicUsersClient полностью использует Pydantic-модели.


--------------------------------------------
3. Применяем модели в клиенте PrivateUsersClient
--------------------------------------------
Теперь давайте интегрируем созданные Pydantic-модели в PrivateUsersClient:

    from httpx import Response

    from clients.api_client import APIClient
    from clients.private_http_builder import get_private_http_client, AuthenticationUserSchema
    from clients.users.users_schema import UpdateUserRequestSchema, GetUserResponseSchema


    class PrivateUsersClient(APIClient):
        """
        Клиент для работы с /api/v1/users
        """

        def get_user_me_api(self) -> Response:
            """
            Метод получения текущего пользователя.

            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.get("/api/v1/users/me")

        def get_user_api(self, user_id: str) -> Response:
            """
            Метод получения пользователя по идентификатору.

            :param user_id: Идентификатор пользователя.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.get(f"/api/v1/users/{user_id}")

        def update_user_api(self, user_id: str, request: UpdateUserRequestSchema) -> Response:
            """
            Метод обновления пользователя по идентификатору.

            :param user_id: Идентификатор пользователя.
            :param request: Словарь с email, lastName, firstName, middleName.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.patch(f"/api/v1/users/{user_id}", json=request.model_dump(by_alias=True))

        def delete_user_api(self, user_id: str) -> Response:
            """
            Метод удаления пользователя по идентификатору.

            :param user_id: Идентификатор пользователя.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.delete(f"/api/v1/users/{user_id}")

        def get_user(self, user_id: str) -> GetUserResponseSchema:
            response = self.get_user_api(user_id)
            return GetUserResponseSchema.model_validate_json(response.text)


    def get_private_users_client(user: AuthenticationUserSchema) -> PrivateUsersClient:
        """
        Функция создаёт экземпляр PrivateUsersClient с уже настроенным HTTP-клиентом.

        :return: Готовый к использованию PrivateUsersClient.
        """
        return PrivateUsersClient(client=get_private_http_client(user))

Изменения:
1. Импортируем ранее реализованные модели:
    from clients.users.users_schema import UpdateUserRequestSchema, GetUserResponseSchema

2. Заменяем устаревшие TypedDict модели на Pydantic-модели.

3. Используем .model_dump(by_alias=True) вместо передачи dict, поскольку Pydantic-модель является классом и требует сериализации.

4. Используем GetUserResponseSchema.model_validate_json(response.text), что обеспечивает более безопасную обработку JSON-ответа.

Остальной код остается без изменений.

------------------------------------------------
5. Адаптируем скрипты
------------------------------------------------
Теперь нам необходимо адаптировать скрипты, работающие с API-клиентами:

 - api_client_get_user.py
 - api_client_create_course.py
 - api_client_create_exercise.py

Рассмотрим адаптацию на примере api_client_get_user.py с использованием Pydantic-моделей:

    from clients.private_http_builder import AuthenticationUserSchema
    from clients.users.private_users_client import get_private_users_client
    from clients.users.public_users_client import get_public_users_client
    # Вместо CreateUserRequestDict импортируем CreateUserRequestSchema
    from clients.users.users_schema import CreateUserRequestSchema
    from tools.fakers import fake

    public_users_client = get_public_users_client()

    # Вместо CreateUserRequestDict используем CreateUserRequestSchema
    create_user_request = CreateUserRequestSchema(
        email=fake.email(),
        password="string",
        last_name="string",  # Передаем аргументы в формате snake_case вместо camelCase
        first_name="string",  # Передаем аргументы в формате snake_case вместо camelCase
        middle_name="string"  # Передаем аргументы в формате snake_case вместо camelCase
    )
    create_user_response = public_users_client.create_user(create_user_request)
    print('Create user data:', create_user_response)

    # Используем атрибуты вместо ключей
    authentication_user = AuthenticationUserSchema(
        email=create_user_request.email,
        password=create_user_request.password
    )
    private_users_client = get_private_users_client(authentication_user)

    # Используем атрибуты вместо ключей
    get_user_response = private_users_client.get_user(create_user_response.user.id)
    print('Get user data:', get_user_response)


Разбор кода в контексте использования Pydantic-моделей
--------------------------------------------------------

1. Импортируем CreateUserRequestSchema вместо устаревшего CreateUserRequestDict. Ранее использовался TypedDict, но теперь мы заменили его на Pydantic-модель:
    from clients.users.users_schema import CreateUserRequestSchema

2. Создаем объект CreateUserRequestSchema вместо передачи словаря. Ранее данные создавались в виде обычного словаря (dict), теперь используется Pydantic-модель:

    create_user_request = CreateUserRequestSchema(
        email=fake.email(),
        password="string",
        last_name="string",
        first_name="string",
        middle_name="string"
    )

 1/ Изменился формат передачи аргументов: теперь передаем snake_case вместо camelCase.
 2/ Больше нет необходимости использовать  .dict() или .json(), так как объект сам по себе содержит все необходимые атрибуты.

3. Работа с API-клиентами теперь использует Pydantic-модели. Ранее методы API-клиента принимали словари, теперь они принимают Pydantic-объекты:
    create_user_response = public_users_client.create_user(create_user_request)
Ответ от сервера теперь парсится в CreateUserResponseSchema автоматически, без необходимости вручную разбирать JSON.

4. Используем атрибуты вместо обращения по ключам. Ранее для аутентификации приходилось обращаться к полям словаря (create_user_request["email"]), теперь же используем доступ через атрибуты:

    authentication_user = AuthenticationUserSchema(
        email=create_user_request.email,
        password=create_user_request.password
    )

Получение пользователя теперь использует Pydantic-схему. Ранее приходилось вручную работать с response.json(), теперь Pydantic берет это на себя:
    get_user_response = private_users_client.get_user(create_user_response.user.id)
get_user_response теперь является объектом GetUserResponseSchema, а не просто dict, что позволяет обращаться к его данным через атрибуты.

Важно! По аналогии необходимо адаптировать остальные скрипты (api_client_create_course.py, api_client_create_exercise.py), заменив TypedDict-модели на Pydantic и применяя вышеописанные принципы.