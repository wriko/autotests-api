
Ссылки:
Официальная документация Pydantic - https://docs.pydantic.dev/latest/

Что такое Pydantic?

Pydantic — это библиотека для валидации данных и управления схемами данных в Python. Она позволяет определять строгие структуры данных с использованием аннотаций типов, автоматически проверяя их на соответствие заданным требованиям.



Зачем нужен Pydantic?

При работе с API, базами данных, конфигурациями или пользовательским вводом мы часто сталкиваемся с данными в формате JSON, словарей или других структур. Pydantic помогает:
 - Проверять данные на соответствие ожидаемым типам.
 - Преобразовывать данные в нужный формат (например, строку в datetime).
 - Удобно работать с объектами данных, используя Python-классы.
 - Минимизировать ошибки, связанные с некорректными входными данными.



Как установить Pydantic?

Pydantic можно установить через pip:
    pip install pydantic 'pydantic[email]'
Важно! Обратите внимание, что мы сразу устанавливаем пакет с дополнительной зависимостью 'pydantic[email]'. Это необходимо для корректной работы встроенного в Pydantic типа EmailStr, который используется для валидации адресов электронной почты. В дальнейшем он нам пригодится при описании схем, содержащих email-адреса.



Простейший пример использования
Создадим модель данных для пользователя:

    from pydantic import BaseModel

    class User(BaseModel):
        id: int
        name: str
        email: str

    user = User(id=1, name="Alice", email="alice@example.com")
    print(user)

Что здесь происходит?
 - BaseModel — это базовый класс Pydantic, от которого мы наследуем нашу модель.
 - При создании объекта User Pydantic автоматически проверяет, что id — это число, а name и email — строки.



Валидация данных

Если данные не соответствуют требованиям, Pydantic выбросит ошибку:
    User(id="not_a_number", name="Alice", email="alice@example.com")
Ошибка: ValidationError: id должен быть int, а передана строка.


Дополнительные возможности

 - Значения по умолчанию:
    class User(BaseModel):
        id: int
        name: str
        is_active: bool = True  # Значение по умолчанию

 - Автоматическое преобразование типов:
    user = User(id="123", name="Alice")
    print(user.id)  # 123 (автоматически преобразован в int)

 - Работа с вложенными структурами:
    class Address(BaseModel):
        city: str
        zip_code: str

    class User(BaseModel):
        id: int
        name: str
        address: Address  # Вложенная модель

    user = User(id=1, name="Alice", address={"city": "New York", "zip_code": "10001"})
    print(user.address.city)  # "New York"


 - Преобразование в JSON:
    print(user.model_dump_json())  # Выводит JSON-строку


Где используется Pydantic?
 - В API-клиентах: для строгой структуры запросов и ответов.
 - В FastAPI: для валидации входных данных.
 - В конфигурациях: для загрузки .env файлов.
 - В базах данных: для работы с ORM.

Итог
Pydantic — мощный инструмент для работы с данными, который делает код чище, безопаснее и удобнее. В дальнейшем мы будем использовать его для описания API-схем, поэтому важно разобраться с его основами.