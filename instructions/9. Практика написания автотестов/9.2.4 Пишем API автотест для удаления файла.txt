Пишем API автотест для удаления файла
Теперь потренируемся писать автотесты для удаления сущностей. Наша цель — написать автотест, который выполнит запрос на удаление файла через DELETE /api/v1/files/{file_id}. После удаления тест должен будет выполнить запрос GET /api/v1/files/{file_id} для получения файла и убедиться, что файл больше не существует в системе.

-----------------------------------
1. Анализируем сценарий
-----------------------------------
Процесс удаления файла понятен: у нас есть фикстура, которая создает файл и возвращает все его данные. После этого мы отправляем запрос на удаление файла и получаем успешный статус-код и пустой ответ. Однако давайте рассмотрим ситуацию, когда мы пытаемся запросить файл, который уже был удален. Для этого используем curl:

    (.venv) username@ip-8-8-8-8 autotests-api % curl -X 'GET' \
      'http://localhost:8000/api/v1/files/db6746d7-d3e5-4968-8c88-8a10df4c0da8' \
      -H 'accept: application/json' \
      -H 'Authorization: Bearer <ACCESS_TOKEN>'
    {"detail":"File not found"}

Мы видим, что если файл не найден, то вернется статус-код 404 и сообщение в формате:
    {"detail":"File not found"}

Соответственно, нам нужна модель, которая будет десериализовать этот ответ, а также чтобы мы могли выполнять дополнительные проверки, такие как валидация JSON-схемы.

-----------------------------------
2. Создаем модель InternalErrorResponseSchema
-----------------------------------
По аналогии с моделью для ошибки валидации, добавим в файл /clients/errors_schema.py модель, которая будет описывать внутреннюю ошибку, например, отсутствие запрашиваемого ресурса (в данном случае файла):

    # Остальной код без изменений

    class InternalErrorResponseSchema(BaseModel):
        """
        Модель для описания внутренней ошибки.
        """

        model_config = ConfigDict(populate_by_name=True)

        details: str = Field(alias="detail")


Пояснение:
- Мы добавляем модель InternalErrorResponseSchema, которая будет десериализовать ответ с внутренней ошибкой.
- Поле details будет содержать описание ошибки, в данном случае — сообщение "File not found".

-----------------------------------
3. Добавим функции assert_internal_error_response, assert_file_not_found_response
-----------------------------------
По аналогии с функцией для проверки валидационного сообщения об ошибке, создадим функцию assert_internal_error_response для проверки внутренней ошибки. Для этого добавим в файл /tools/assertions/errors.py следующий код:

    # Остальной код без изменений

    def assert_internal_error_response(
            actual: InternalErrorResponseSchema,
            expected: InternalErrorResponseSchema
    ):
        """
        Функция для проверки внутренней ошибки. Например, ошибки 404 (File not found).

        :param actual: Фактический ответ API.
        :param expected: Ожидаемый ответ API.
        :raises AssertionError: Если значения полей не совпадают.
        """
        assert_equal(actual.details, expected.details, "details")


Теперь давайте добавим функцию assert_file_not_found_response, которая будет проверять ответ в случае, если файл не найден на сервере. Для этого добавим следующий код в файл /tools/assertions/files.py:

    # Остальной код без изменений

    def assert_file_not_found_response(actual: InternalErrorResponseSchema):
        """
        Функция для проверки ошибки, если файл не найден на сервере.

        :param actual: Фактический ответ.
        :raises AssertionError: Если фактический ответ не соответствует ошибке "File not found"
        """
        # Ожидаемое сообщение об ошибке, если файл не найден
        expected = InternalErrorResponseSchema(details="File not found")
        # Используем ранее созданную функцию для проверки внутренней ошибки
        assert_internal_error_response(actual, expected)


Теперь у нас есть две функции для проверки ошибок:
 - assert_internal_error_response — для проверки внутренних ошибок, например, при отсутствии ресурса.
 - assert_file_not_found_response — для проверки ошибки, когда файл не найден на сервере.

 -----------------------------------
4. Пишем автотест test_delete_file
-----------------------------------
Теперь напишем автотест, который будет удалять файл и проверять, что он действительно был удален. Для этого добавим тест test_delete_file в файл /tests/files/test_files.py:

    from http import HTTPStatus

    import pytest

    from clients.errors_schema import ValidationErrorResponseSchema, InternalErrorResponseSchema
    from clients.files.files_client import FilesClient
    from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema
    from fixtures.files import FileFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.files import assert_create_file_response, assert_create_file_with_empty_filename_response, \
        assert_create_file_with_empty_directory_response, assert_file_not_found_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.files
    @pytest.mark.regression
    class TestFiles:
        # Остальной код без изменений

        def test_delete_file(self, files_client: FilesClient, function_file: FileFixture):
            # 1. Удаляем файл
            delete_response = files_client.delete_file_api(function_file.response.file.id)
            # 2. Проверяем, что файл успешно удален (статус 200 OK)
            assert_status_code(delete_response.status_code, HTTPStatus.OK)

            # 3. Пытаемся получить удаленный файл
            get_response = files_client.get_file_api(function_file.response.file.id)
            get_response_data = InternalErrorResponseSchema.model_validate_json(get_response.text)

            # 4. Проверяем, что сервер вернул 404 Not Found
            assert_status_code(get_response.status_code, HTTPStatus.NOT_FOUND)
            # 5. Проверяем, что в ответе содержится ошибка "File not found"
            assert_file_not_found_response(get_response_data)

            # 6. Проверяем, что ответ соответствует схеме
            validate_json_schema(get_response.json(), get_response_data.model_json_schema())

        # Остальной код без изменений

Разбор кода автотеста test_delete_file

1. Удаляем файл:
 - Используем клиент files_client, чтобы отправить запрос на удаление файла по file.id, который получаем из фикстуры function_file.
 - Фикстура function_file создает тестовый файл перед тестом и передает объект файла в тест.

2. Проверяем статус-код 200:
 - После успешного удаления сервера должен вернуть HTTP 200 OK.

3. Пытаемся получить удаленный файл:
 - Отправляем запрос GET, чтобы проверить, что файл действительно отсутствует.

4. Проверяем статус-код 404:
 - Если файл удален, сервер должен вернуть HTTP 404 Not Found.

5. Проверяем, что в ответе содержится ошибка "File not found":
 - Используем assert_file_not_found_response(), которая сравнивает ответ сервера с ожидаемым (details="File not found").

6. Валидируем схему ответа:
 - Используем validate_json_schema(), чтобы убедиться, что структура ответа соответствует ожидаемой.


Важно! Фикстуры function_file и клиент files_client были созданы в уроке "Рефакторинг и подготовка к написанию API автотестов".


-----------------------------------
5. Запуск автотеста test_delete_file
-----------------------------------
Теперь запустим тест и убедимся, что все работает корректно. Для этого выполним команду в корне проекта autotests-api:

python -m pytest -k "test_delete_file"
В консоли должен бытьфф примерно такой вывод:

(.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "test_delete_file"
====================================================================== test session starts =======================================================================
platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/username/Documents/autotests-api
configfile: pytest.ini
plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
collected 41 items / 40 deselected / 1 selected

tests/files/test_files.py::TestFiles::test_delete_file PASSED

================================================================ 1 passed, 40 deselected in 0.83s ================================================================