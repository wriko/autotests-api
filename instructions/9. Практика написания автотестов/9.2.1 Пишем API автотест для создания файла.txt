Пишем API автотест для создания файла


В данном уроке мы будем практиковаться в написании различных API автотестов для работы с файлами.
Рассмотрим нюансы тестирования загрузки файлов, возможные ошибки и тонкости, которые стоит учитывать.
Цель данного шага — написание автотеста на создание файла.

---------------------------------
1. Создание файла test_files.py
---------------------------------
В папке tests создадим подпапку files, а внутри нее создадим файл test_files.py:

.
└── autotests-api/
    └── tests/
        ├── __init__.py
        └── files/
            ├── __init__.py
            └── test_files.py

Этот файл будет содержать тест-кейсы, проверяющие функциональность API по работе с файлами.

---------------------------------
2. Создание функции assert_create_file_response
---------------------------------
Перед тем как написать автотест, необходимо создать вспомогательную функцию, которая будет проверять корректность ответа API на создание файла.

Для этого создадим файл /tools/assertions/files.py:

.
└── autotests-api/
    └── tools/
        ├── __init__.py
        └── assertions/
            ├── __init__.py
            └── files.py

Добавим следующий код:

    from clients.files.files_schema import CreateFileResponseSchema, CreateFileRequestSchema
    from tools.assertions.base import assert_equal


    def assert_create_file_response(request: CreateFileRequestSchema, response: CreateFileResponseSchema):
        """
        Проверяет, что ответ на создание файла соответствует запросу.

        :param request: Исходный запрос на создание файла.
        :param response: Ответ API с данными файла.
        :raises AssertionError: Если хотя бы одно поле не совпадает.
        """
        # Формируем ожидаемую ссылку на загруженный файл
        expected_url = f"http://localhost:8000/static/{request.directory}/{request.filename}"

        assert_equal(str(response.file.url), expected_url, "url")
        assert_equal(response.file.filename, request.filename, "filename")
        assert_equal(response.file.directory, request.directory, "directory")


Разбор кода assert_create_file_response:

1. Динамическое формирование URL файла
- В API запросе передается только directory и filename, но не полная ссылка.
- Сервер формирует ссылку по шаблону: http://{server_host}/static/{directory}/{filename}
- В тестах важно учитывать этот момент и строить ожидаемый URL по такому же принципу.

2. Приведение HttpUrl к строке
- response.file.url имеет тип HttpUrl из Pydantic.
- Для корректного сравнения приводим его к строке: str(response.file.url).

3. Дополнительная проверка (рекомендация для продакшн-тестов)
- Можно отправить GET-запрос на expected_url и убедиться, что файл действительно загружен.
- Это исключит ситуации, когда API возвращает ссылку, но сам файл отсутствует на сервере.


Дополнительная проверка: запрос файла по URL:
- В реальном проекте можно дополнительно выполнить GET-запрос на expected_url.
- Это поможет убедиться, что не только API вернул правильную ссылку, но и сам файл действительно загружен и доступен.
Пример дополнительной проверки:

    import httpx

    def assert_file_is_accessible(url: str):
        """
        Проверяет, что файл доступен по указанному URL.

        :param url: Ссылка на файл.
        :raises AssertionError: Если файл не доступен.
        """
        response = httpx.get(url)
        assert response.status_code == 200, f"Файл недоступен по URL: {url}"

Этот метод можно использовать в тестах, чтобы убедиться, что файл действительно загружен.

Таким образом, assert_create_file_response позволяет убедиться, что API корректно обрабатывает создание файла, а возвращаемые данные соответствуют ожиданиям.

---------------------------------
3. Создание автотеста test_create_file
---------------------------------
Теперь напишем тест, который проверяет создание файла через API.

Откроем файл /tests/files/test_files.py и добавим следующий код:

    from http import HTTPStatus

    import pytest

    from clients.files.files_client import FilesClient
    from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema
    from tools.assertions.base import assert_status_code
    from tools.assertions.files import assert_create_file_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.files
    @pytest.mark.regression
    class TestFiles:
        def test_create_file(self, files_client: FilesClient):
            request = CreateFileRequestSchema(upload_file="./testdata/files/image.png")
            response = files_client.create_file_api(request)
            response_data = CreateFileResponseSchema.model_validate_json(response.text)

            assert_status_code(response.status_code, HTTPStatus.OK)
            assert_create_file_response(request, response_data)

            validate_json_schema(response.json(), response_data.model_json_schema())


Разбор кода test_create_file:

Тест test_create_file выполняет следующие проверки:

1. Формирует запрос на создание файла
- Создаем объект CreateFileRequestSchema, указывая путь к файлу ./testdata/files/image.png.
- Это файл, который будет отправляться на сервер.

2. Отправляет запрос к API
- Используем files_client.create_file_api(request), чтобы отправить запрос.
- Получаем response, который содержит HTTP-ответ сервера.

3. Десериализует JSON-ответ
- Так как сервер возвращает JSON-ответ, преобразуем его в CreateFileResponseSchema.
- Для этого используем метод model_validate_json(response.text), который парсит JSON в объект Pydantic.

4.Проверяет статус-код
- Используем assert_status_code(response.status_code, HTTPStatus.OK), чтобы убедиться, что сервер вернул 200 OK.
- Если API вернул ошибку, тест сразу упадет.

5. Проверяет корректность данных в ответе
Вызываем assert_create_file_response(request, response_data), которая проверяет, что:
- Имя файла в ответе совпадает с тем, что передавали.
- Директория соответствует отправленному значению.
- URL файла сформирован корректно.

6. Проверяет соответствие JSON-схеме
- validate_json_schema(response.json(), response_data.model_json_schema()) проверяет, что JSON-ответ API соответствует ожидаемой схеме, заданной в CreateFileResponseSchema.
- Это помогает убедиться, что API не изменило структуру ответа.


Важно! Фикстура files_client была создана в уроке "Рефакторинг и подготовка к написанию API автотестов".

---------------------------------
4. Регистрация новой маркировки в pytest.ini
---------------------------------
В тесте мы использовали @pytest.mark.files, но pytest по умолчанию не знает о такой маркировке. Нам нужно зарегистрировать ее в pytest.ini, чтобы можно было фильтровать тесты по меткам.

Открываем pytest.ini и добавляем files в список зарегистрированных меток:

    [pytest]
    addopts = -s -v
    python_files = *_tests.py test_*.py
    python_classes = Test*
    python_functions = test_*
    markers =
        users: Маркировка для тестов, связанных с пользователями.
        files: Маркировка для тестов, связанных с файлами.
        regression: Маркировка для регрессионных тестов.
        authentication: Маркировка для тестов, связанных с аутентификацией.

---------------------------------
5. Запуск теста test_create_file
---------------------------------
Теперь, когда тест test_create_file готов, давайте его запустим. Перейдите в корневую директорию проекта autotests-api и выполните следующую команду:

    python -m pytest -k "test_create_file"


Если тест успешно прошел, в консоли отобразится примерно такой вывод:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "test_create_file"
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
    collected 38 items / 37 deselected / 1 selected

    tests/files/test_files.py::TestFiles::test_create_file PASSED

    ================================================================ 1 passed, 37 deselected in 1.06s ================================================================