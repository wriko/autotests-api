Пишем негативные API автотесты для создания файла
В этом уроке мы рассмотрим, как писать негативные API автотесты, которые проверяют поведение системы при отправке некорректных данных в запрос создания файла POST /api/v1/files.

---------------------------------------
1. Анализ ответа с ошибкой
---------------------------------------
Прежде чем писать тесты на негативные сценарии, нужно понять, как API реагирует на некорректные данные.
Например, что произойдет, если мы попробуем создать файл с пустым именем?

Попробовать отправить такой запрос через Swagger не получится, так как UI автоматически проверяет введенные данные. Однако, можно обойти этот механизм и выполнить запрос напрямую с помощью cURL:

    (.venv) username@ip-8-8-8-8 autotests-api % curl -X 'POST' \
      'http://localhost:8000/api/v1/files' \
      -H 'accept: application/json' \
      -H 'Authorization: Bearer <ACCESS_TOKEN>' \
      -H 'Content-Type: multipart/form-data' \
      -F 'directory=string' \
      -F 'filename=' \
      -F 'upload_file=@image.png;type=image/png'
    {"detail":[{"type":"string_too_short","loc":["body","filename"],"msg":"String should have at least 1 character","input":"","ctx":{"min_length":1}}]}

Если отправить этот запрос с пустым filename, API вернет следующий JSON-ответ:

    {
      "detail": [
        {
          "type": "string_too_short",
          "loc": [
            "body",
            "filename"
          ],
          "msg": "String should have at least 1 character",
          "input": "",
          "ctx": {
            "min_length": 1
          }
        }
      ]
    }

Этот ответ означает, что запрос не прошел валидацию. Например:
- Какой-то параметр отсутствует (например, filename).
- Значение поля не соответствует требованиям (например, строка слишком короткая).

При этом API возвращает статус 422, что указывает на ошибку валидации.

Чтобы протестировать такие случаи, мы должны:
1. Описать модель данных для обработки ошибок API.
2. Написать негативные автотесты, которые будут проверять, что система корректно обрабатывает некорректные запросы.

---------------------------------------
2. Создаем модель для работы с ошибками валидации
---------------------------------------
В папке clients создадим файл errors_schema.py, в котором будем хранить модели для работы с ошибками.

.
└── autotests-api/
    └── clients/
        ├── __init__.py
        └── errors_schema.py

В файле /clients/errors_schema.py добавим две модели:
- ValidationErrorSchema – описывает структуру ошибки валидации.
- ValidationErrorResponseSchema – описывает структуру ответа API с ошибкой валидации.

    from typing import Any

    from pydantic import BaseModel, Field, ConfigDict


    class ValidationErrorSchema(BaseModel):
        """
        Модель, описывающая структуру ошибки валидации API.
        """
        model_config = ConfigDict(populate_by_name=True)

        type: str
        input: Any
        context: dict[str, Any] = Field(alias="ctx")
        message: str = Field(alias="msg")
        location: list[str] = Field(alias="loc")


    class ValidationErrorResponseSchema(BaseModel):
        """
        Модель, описывающая структуру ответа API с ошибкой валидации.
        """
        model_config = ConfigDict(populate_by_name=True)

        details: list[ValidationErrorSchema] = Field(alias="detail")

Почему мы создали отдельный файл errors_schema.py?
Ошибки валидации имеют единый формат во всех эндпоинтах API. Вместо того чтобы дублировать код и писать отдельные модели для каждого эндпоинта,
мы создали универсальную схему обработки ошибок, которая позволит:
- Избежать дублирования кода.
- Гибко работать с любыми эндпоинтами, возвращающими ошибки валидации.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Про структуру и организацию моделей
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Важно! Ошибки валидации, которые мы получаем от API, — это стандартные ошибки Pydantic. Например, если мы создадим Pydantic-модель CreateFileRequestSchema и зададим для поля filename min_length=1, то при передаче пустого значения Pydantic сам сгенерирует аналогичную ошибку.

Однако, в реальных проектах формат ошибок может отличаться. Ошибки могут кастомизироваться и изменяться со временем, поэтому жестко привязываться к стандартным ошибкам Pydantic не стоит. Вместо этого лучше использовать обобщенную модель для работы с ответами API.

Важно! Также обратите внимание, что мы используем alias для полей модели валидационной ошибки. Это сделано по нескольким причинам:
1. Устойчивость к изменениям в ответах API. Если в будущем разработчики изменят названия каких-либо полей в ответе API, нам не придется обновлять автотесты. Например, если в какой-то момент поле msg будет переименовано в description, благодаря использованию alias в автотестах поле останется с именем message. Это упрощает поддержание тестов и позволяет избежать необходимости вручную обновлять каждый тест в случае изменения структуры ответа API.
2. Читабельность полей. В текущей реализации API некоторые поля могут быть непонятными или трудными для восприятия, например, поле ctx. Для разработчиков API это может иметь смысл с точки зрения оптимизации (например, для уменьшения объема передаваемых данных), но для наших автотестов важно иметь читаемые и понятные имена. Вместо ctx мы можем использовать более очевидное название, например, context. Это делает автотесты более понятными и улучшает их поддержку.

Использование alias в моделях данных помогает избежать жесткой привязки к конкретной структуре данных API, сохраняя при этом тесты чистыми и понятными. Это особенно полезно при работе с большими и сложными API, где структура данных может изменяться, но логика тестирования остается прежней.

-----------------------------------------
3. Создаем функции assert_validation_error, assert_validation_error_response
-----------------------------------------
Теперь нам необходимо добавить две функции:
- assert_validation_error — проверяет корректность полей модели ValidationErrorSchema.
- assert_validation_error_response — проверяет корректность полей модели ValidationErrorResponseSchema.

Функции будут находиться в файле errors.py, который создадим в папке /tools/assertions:

.
└── autotests-api/
    └── tools/
        ├── __init__.py
        └── assertions/
            ├── __init__.py
            └── errors.py


Функция для проверки длины объектов


Перед реализацией функций проверки валидационных ошибок, добавим функцию для проверки длины двух объектов, у которых можно вычислить длину. Для этого в файл /tools/assertions/base.py добавим следующию функцию:

    from typing import Any, Sized

    # Остальной код без изменений

    def assert_length(actual: Sized, expected: Sized, name: str):
        """
        Проверяет, что длины двух объектов совпадают.

        :param name: Название проверяемого объекта.
        :param actual: Фактический объект.
        :param expected: Ожидаемый объект.
        :raises AssertionError: Если длины не совпадают.
        """
        assert len(actual) == len(expected), (
            f'Incorrect object length: "{name}". '
            f'Expected length: {len(expected)}. '
            f'Actual length: {len(actual)}'
        )

Эта функция позволит нам корректно проверять длину списков, например, списка ошибок валидации.



Реализация функций для проверки ошибок валидации

Добавим в файл /tools/assertions/errors.py следующую реализацию:

    from clients.errors_schema import ValidationErrorSchema, ValidationErrorResponseSchema
    from tools.assertions.base import assert_equal, assert_length


    def assert_validation_error(actual: ValidationErrorSchema, expected: ValidationErrorSchema):
        """
        Проверяет, что объект ошибки валидации соответствует ожидаемому значению.

        :param actual: Фактическая ошибка.
        :param expected: Ожидаемая ошибка.
        :raises AssertionError: Если значения полей не совпадают.
        """
        assert_equal(actual.type, expected.type, "type")
        assert_equal(actual.input, expected.input, "input")
        assert_equal(actual.context, expected.context, "context")
        assert_equal(actual.message, expected.message, "message")
        assert_equal(actual.location, expected.location, "location")


    def assert_validation_error_response(
            actual: ValidationErrorResponseSchema,
            expected: ValidationErrorResponseSchema
    ):
        """
        Проверяет, что объект ответа API с ошибками валидации (`ValidationErrorResponseSchema`)
        соответствует ожидаемому значению.

        :param actual: Фактический ответ API.
        :param expected: Ожидаемый ответ API.
        :raises AssertionError: Если значения полей не совпадают.
        """
        assert_length(actual.details, expected.details, "details")

        for index, detail in enumerate(expected.details):
            assert_validation_error(actual.details[index], detail)

Почему в assert_validation_error_response используется цикл?

На первый взгляд может показаться странным, что мы проверяем ошибки валидации через цикл, но на это есть объективные причины.



Возможные подходы к сравнению списков ошибок:

1. Сравнение объектов целиком. Мы могли бы сравнить объекты actual и expected целиком:
    assert actual == expected, "Ответ с ошибкой валидации не совпадает с ожидаемым"
Плюсы:
 - Код лаконичный и простой.
Минусы:
 - Если тест упадет, в логах будет просто сообщение, что объекты не совпадают, без конкретных деталей.
 - В отчетах (например, Allure) ошибка будет выглядеть громоздко, и будет сложно понять, какое именно поле отличается.


2. Пошаговая проверка полей (наш вариант). Мы сравниваем каждое поле отдельно, включая все элементы списка details.
Плюсы:
 - Легко понять, какое именно поле не совпало.
 - Ошибка в логах и отчетах Allure будет более читабельной.
Минусы:
 - Нужно писать дополнительный код.
 - Если первая ошибка окажется невалидной, тест сразу упадет, и остальные проверки не выполнятся.
Однако последний минус не критичен, так как в любом случае нам придется разбираться, что пошло не так. Поэтому выбор в пользу читаемости и атомарности проверок — лучший вариант.

-----------------------------------------
4. Добавляем функцию assert_create_file_with_empty_filename_response
-----------------------------------------
Теперь добавим функцию assert_create_file_with_empty_filename_response, которая будет выполнять проверку валидационной ошибки при отправке пустого имени файла при попытке создать файл. Откроем файл /tools/assertions/files.py и добавим в него функцию:

    from clients.errors_schema import ValidationErrorResponseSchema, ValidationErrorSchema
    from clients.files.files_schema import CreateFileResponseSchema, CreateFileRequestSchema
    from tools.assertions.base import assert_equal
    from tools.assertions.errors import assert_validation_error_response


    # Остальной код без изменений


    def assert_create_file_with_empty_filename_response(actual: ValidationErrorResponseSchema):
        """
        Проверяет, что ответ на создание файла с пустым именем файла соответствует ожидаемой валидационной ошибке.

        :param actual: Ответ от API с ошибкой валидации, который необходимо проверить.
        :raises AssertionError: Если фактический ответ не соответствует ожидаемому.
        """
        expected = ValidationErrorResponseSchema(
            details=[
                ValidationErrorSchema(
                    type="string_too_short",  # Тип ошибки, связанной с слишком короткой строкой.
                    input="",  # Пустое имя файла.
                    context={"min_length": 1},  # Минимальная длина строки должна быть 1 символ.
                    message="String should have at least 1 character",  # Сообщение об ошибке.
                    location=["body", "filename"]  # Ошибка возникает в теле запроса, поле "filename".
                )
            ]
        )
        assert_validation_error_response(actual, expected)


    def assert_create_file_with_empty_directory_response(actual: ValidationErrorResponseSchema):
        """
        Проверяет, что ответ на создание файла с пустым значением директории соответствует ожидаемой валидационной ошибке.

        :param actual: Ответ от API с ошибкой валидации, который необходимо проверить.
        :raises AssertionError: Если фактический ответ не соответствует ожидаемому.
        """
        expected = ValidationErrorResponseSchema(
            details=[
                ValidationErrorSchema(
                    type="string_too_short",  # Тип ошибки, связанной с слишком короткой строкой.
                    input="",  # Пустая директория.
                    context={"min_length": 1},  # Минимальная длина строки должна быть 1 символ.
                    message="String should have at least 1 character",  # Сообщение об ошибке.
                    location=["body", "directory"]  # Ошибка возникает в теле запроса, поле "directory".
                )
            ]
        )
        assert_validation_error_response(actual, expected)



Объяснение:
1. assert_create_file_with_empty_filename_response:
- Эта функция проверяет, что API возвращает правильную ошибку валидации, если имя файла в запросе пустое.
- Ожидаемая ошибка: тип string_too_short, так как строка должна содержать хотя бы 1 символ.
- Ошибка должна быть в поле filename.

2. assert_create_file_with_empty_directory_response:
- Эта функция проверяет аналогичную ошибку для пустого значения в поле directory (директория файла).
- Ошибка также должна быть типа string_too_short, с указанием, что строка должна содержать хотя бы 1 символ.
- Ошибка возникает в поле directory.

В обеих функциях используется структура ValidationErrorResponseSchema для формирования ожидаемого ответа, который затем сравнивается с фактическим с помощью функции assert_validation_error_response.

-----------------------------------------
5. Пишем автотесты
-----------------------------------------
Теперь напишем автотесты, которые будут проверять попытку создания файла с пустым названием файла и директорией. Откроем файл /tests/files/test_files.py и добавим два новых автотеста: test_create_file_with_empty_filename и test_create_file_with_empty_directory.

    from http import HTTPStatus

    import pytest

    from clients.errors_schema import ValidationErrorResponseSchema
    from clients.files.files_client import FilesClient
    from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema
    from tools.assertions.base import assert_status_code
    from tools.assertions.files import assert_create_file_response, assert_create_file_with_empty_filename_response, \
        assert_create_file_with_empty_directory_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.files
    @pytest.mark.regression
    class TestFiles:
        # Остальной код без изменений

        def test_create_file_with_empty_filename(self, files_client: FilesClient):
            request = CreateFileRequestSchema(
                filename="",
                upload_file="./testdata/files/image.png"
            )
            response = files_client.create_file_api(request)
            response_data = ValidationErrorResponseSchema.model_validate_json(response.text)

            # Проверка, что код ответа соответствует ожиданиям (422 - Unprocessable Entity)
            assert_status_code(response.status_code, HTTPStatus.UNPROCESSABLE_ENTITY)
            # Проверка, что ответ API соответствует ожидаемой валидационной ошибке
            assert_create_file_with_empty_filename_response(response_data)

            # Дополнительная проверка структуры JSON, чтобы убедиться, что схема валидационного ответа не изменилась
            validate_json_schema(response.json(), response_data.model_json_schema())

        def test_create_file_with_empty_directory(self, files_client: FilesClient):
            request = CreateFileRequestSchema(
                directory="",
                upload_file="./testdata/files/image.png"
            )
            response = files_client.create_file_api(request)
            response_data = ValidationErrorResponseSchema.model_validate_json(response.text)

            # Проверка, что код ответа соответствует ожиданиям (422 - Unprocessable Entity)
            assert_status_code(response.status_code, HTTPStatus.UNPROCESSABLE_ENTITY)
            # Проверка, что ответ API соответствует ожидаемой валидационной ошибке
            assert_create_file_with_empty_directory_response(response_data)

            # Дополнительная проверка структуры JSON
            validate_json_schema(response.json(), response_data.model_json_schema())


Объяснение кода автотестов:

1. test_create_file_with_empty_filename:
 - Этот автотест проверяет, что при попытке создать файл с пустым значением в поле filename, API возвращает ошибку валидации.
 - Мы создаем запрос с пустым значением для filename и отправляем его в API.
 - Ожидаем ответ с кодом состояния HTTPStatus.UNPROCESSABLE_ENTITY (422), который сигнализирует о неверном запросе.
 - Затем проверяем, что валидационная ошибка, полученная от API, соответствует ожидаемой структуре (пустое имя файла должно вызвать ошибку string_too_short).
 - Дополнительно валидируем JSON-структуру ошибки с помощью validate_json_schema, чтобы убедиться, что схема валидационного ответа не изменилась.

2. test_create_file_with_empty_directory:
 - Этот тест работает по аналогии с предыдущим, но проверяется поле directory на пустое значение.
 - Логика работы теста та же: создаем запрос с пустым значением в поле directory, проверяем код ответа и ожидаем ошибку валидации с правильным сообщением.


Дополнительные замечания:
 - Обратите внимание, что мы дополнительно валидируем JSON-схему, чтобы убедиться, что структура валидационного ответа с ошибкой никак не изменилась.
 - Благодаря использованию моделей и гибкой системе проверок, инкапсулирующей всю бизнес-логику, наш тест получается очень чистым и кратким. Этот подход помогает избегать громоздких и сложных тестов, что делает их легче поддерживаемыми и масштабируемыми.
 - Хотя эти автотесты и не являются самыми простыми, они демонстрируют высокий уровень качества написания автотестов и позволяют легко масштабировать тестовую базу без написания большого количества кода.

-----------------------------------------
6. Запускаем автотесты
-----------------------------------------
Теперь запустим автотесты test_create_file_with_empty_filename и test_create_file_with_empty_directory и убедимся, что все работает корректно. Для этого выполним команду в корне проекта autotests-api:

python -m pytest -k "test_create_file_with_empty_"
Опция -k позволяет выбрать тесты, чьи имена содержат подстроку test_create_file_with_empty_. Это будет полезно, если вы хотите запустить только эти конкретные тесты, не выполняя весь набор автотестов.

При успешном выполнении тестов мы получим примерно следующий вывод в консоль:

(.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "test_create_file_with_empty_"
====================================================================== test session starts =======================================================================
platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/username/Documents/autotests-api
configfile: pytest.ini
plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
collected 40 items / 38 deselected / 2 selected

tests/files/test_files.py::TestFiles::test_create_file_with_empty_filename PASSED
tests/files/test_files.py::TestFiles::test_create_file_with_empty_directory PASSED

================================================================ 2 passed, 38 deselected in 1.34s ================================================================
Если все тесты прошли успешно, это подтверждает, что функциональность API, связанная с созданием файлов с пустыми значениями для filename и directory, работает корректно и API правильно обрабатывает валидационные ошибки.