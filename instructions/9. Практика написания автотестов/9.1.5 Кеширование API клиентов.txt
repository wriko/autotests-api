Кеширование API клиентов
В данном примере мы рассматриваем проблему, связанную с многократным выполнением авторизационных запросов при инициализации API клиентов. Когда каждый клиент создается, происходит запрос к внешней системе для получения авторизационного токена. Если для одного и того же пользователя инициализируется несколько клиентов, это может значительно замедлить процесс, особенно если речь идет о большом количестве тестов или запросов.

Пример исходного кода без кеширования
Рассмотрим следующий код, который находится в файле /clients/private_http_builder.py:

    from httpx import Client
    from pydantic import BaseModel

    from clients.authentication.authentication_client import get_authentication_client
    from clients.authentication.authentication_schema import LoginRequestSchema


    class AuthenticationUserSchema(BaseModel):
        email: str
        password: str


    def get_private_http_client(user: AuthenticationUserSchema) -> Client:
        authentication_client = get_authentication_client()

        login_request = LoginRequestSchema(email=user.email, password=user.password)
        login_response = authentication_client.login(login_request)

        return Client(
            timeout=100,
            base_url="http://localhost:8000",
            headers={"Authorization": f"Bearer {login_response.token.access_token}"}
        )


Технически данный код работает корректно, но есть одна проблема — при каждом вызове функции get_private_http_client происходит новый запрос для получения авторизационного токена. Это может вызвать значительные задержки, особенно если нужно инициализировать несколько клиентов для одного и того же пользователя.

    user = AuthenticationUserSchema(email="user@example.com", password="string")

    # Будет выполнен запрос для получения авторизационных токенов
    get_files_client(user)

    # Снова будет выполнен запрос, хотя данные пользователя не изменились
    get_courses_client(user)

Если нам необходимо инициализировать большое количество клиентов для одного пользователя, это может привести к значительным проблемам с производительностью.

Решение: Кеширование результатов
Для того чтобы избежать повторных запросов, можно использовать кеширование. Если несколько клиентов инициализируются для одного и того же пользователя, то мы можем кешировать ответ функции get_private_http_client. Это позволит избежать повторных запросов на аутентификацию и значительно улучшить производительность.

Для этого используем декоратор @lru_cache, который будет кешировать результат функции.

Модифицированный код с кешированием
Для добавления кеширования, модифицируем код следующим образом:

    from functools import lru_cache  # Импортируем функцию для кеширования

    from httpx import Client
    from pydantic import BaseModel

    from clients.authentication.authentication_client import get_authentication_client
    from clients.authentication.authentication_schema import LoginRequestSchema


    class AuthenticationUserSchema(BaseModel, frozen=True):  # Добавили параметр frozen=True
        email: str
        password: str


    @lru_cache(maxsize=None)  # Кешируем возвращаемое значение
    def get_private_http_client(user: AuthenticationUserSchema) -> Client:
        authentication_client = get_authentication_client()

        login_request = LoginRequestSchema(email=user.email, password=user.password)
        login_response = authentication_client.login(login_request)

        return Client(
            timeout=100,
            base_url="http://localhost:8000",
            headers={"Authorization": f"Bearer {login_response.token.access_token}"}
        )


Объяснение изменений:

Параметр frozen=True в модели AuthenticationUserSchema:
Этот параметр позволяет объектам класса быть неизменяемыми, что требуется для использования с кешированием. Если объект изменяется, кеш не сможет корректно хранить его состояние.
Декоратор @lru_cache(maxsize=None):
Этот декоратор кеширует результат работы функции. Он запоминает результат выполнения функции для определенного набора аргументов. В нашем случае, если для одного и того же пользователя будет выполнен повторный вызов функции get_private_http_client, результат будет взят из кеша, а не выполняться повторно.
Параметр maxsize=None означает, что кеш может хранить неограниченное количество значений.
Пример использования кеширования
Теперь, когда мы инициализируем несколько клиентов для одного и того же пользователя, запросы на аутентификацию будут выполняться только один раз. Все последующие вызовы с теми же данными пользователя будут возвращать кешированный результат.

Пример:

    user = AuthenticationUserSchema(email="user@example.com", password="string")

    # Будет выполнен запрос для получения авторизационных токенов
    get_files_client(user)

    # Запроса на получение авторизационных токенов не будет
    # Данные возьмутся из кеша
    get_courses_client(user)

Таким образом, с помощью кеширования мы значительно сокращаем время, необходимое для инициализации клиентов, особенно если пользователи и их данные остаются неизменными в течение тестов.