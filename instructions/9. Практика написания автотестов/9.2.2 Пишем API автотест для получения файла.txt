Пишем API автотест для получения файла

На этом этапе мы напишем автотест для проверки получения файла через API-эндпоинт GET /api/v1/files/{file_id}.

---------------------------------------------------------------
1. Создаем функции assert_file и assert_get_file_response
---------------------------------------------------------------
Сначала нам нужно создать функции assert_file и assert_get_file_response, которые будут проверять модель файла и структуру ответа API при получении файла.

Перед тем как реализовывать эти функции, добавим модель GetFileResponseSchema, которая позволит десериализовать JSON-ответ API в объект.

Открываем файл /clients/files/files_schema.py и добавляем следующий код:

    # Остальной код без изменений

    class GetFileResponseSchema(BaseModel):
        """
        Описание структуры запроса получения файла.
        """
        file: FileSchema

Теперь добавим функции проверок. Откроем файл /tools/assertions/files.py и добавим туда следующий код:

    from clients.files.files_schema import CreateFileResponseSchema, CreateFileRequestSchema, FileSchema, \
        GetFileResponseSchema
    from tools.assertions.base import assert_equal


    # Остальной код без изменений


    def assert_file(actual: FileSchema, expected: FileSchema):
        """
        Проверяет, что фактические данные файла соответствуют ожидаемым.

        :param actual: Фактические данные файла.
        :param expected: Ожидаемые данные файла.
        :raises AssertionError: Если хотя бы одно поле не совпадает.
        """
        assert_equal(actual.id, expected.id, "id")
        assert_equal(actual.url, expected.url, "url")
        assert_equal(actual.filename, expected.filename, "filename")
        assert_equal(actual.directory, expected.directory, "directory")


    def assert_get_file_response(
            get_file_response: GetFileResponseSchema,
            create_file_response: CreateFileResponseSchema
    ):
        """
        Проверяет, что ответ на получение файла соответствует ответу на его создание.

        :param get_file_response: Ответ API при запросе данных файла.
        :param create_file_response: Ответ API при создании файла.
        :raises AssertionError: Если данные файла не совпадают.
        """
        assert_file(get_file_response.file, create_file_response.file)



Разбор кода:

assert_file(actual: FileSchema, expected: FileSchema)
Эта функция проверяет, что фактические данные файла (actual) совпадают с ожидаемыми (expected).
Для этого сравниваются все ключевые атрибуты файла:
- id – уникальный идентификатор файла.
- url – ссылка для скачивания файла.
- filename – имя файла.
- directory – директория, в которой файл хранится.
Если хотя бы одно поле не совпадает, тест завершится с ошибкой.

assert_get_file_response(get_file_response: GetFileResponseSchema, create_file_response: CreateFileResponseSchema)
Эта функция проверяет, что API возвращает корректные данные при получении файла.
Она сравнивает объект get_file_response.file (данные файла при запросе)
с объектом create_file_response.file (данные файла при создании).
Проверка выполняется с помощью assert_file, что гарантирует корректность всех полей.

---------------------------------------------------------------
2. Создаем автотест test_get_file
---------------------------------------------------------------
Теперь, когда функции проверок готовы, добавим автотест test_get_file. Откроем файл /tests/files/test_files.py и добавим следующий код:

    from http import HTTPStatus

    import pytest

    from clients.files.files_client import FilesClient
    from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema, GetFileResponseSchema
    from fixtures.files import FileFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.files import assert_create_file_response, assert_get_file_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.files
    @pytest.mark.regression
    class TestFiles:
        # Остальной код без изменений

        def test_get_file(self, files_client: FilesClient, function_file: FileFixture):
            response = files_client.get_file_api(function_file.response.file.id)
            response_data = GetFileResponseSchema.model_validate_json(response.text)

            assert_status_code(response.status_code, HTTPStatus.OK)
            assert_get_file_response(response_data, function_file.response)

            validate_json_schema(response.json(), response_data.model_json_schema())


Разбор кода test_get_file
Этот тест проверяет корректность работы API эндпоинта /api/v1/files/{file_id} для получения информации о файле.

Что делает тест?

1. Запрашивает данные о файле
    response = files_client.get_file_api(function_file.response.file.id)
Здесь используется клиент files_client, который делает HTTP-запрос на получение данных файла по его id. function_file.response.file.id — это id ранее созданного файла, переданный из фикстуры.

2. Преобразует JSON-ответ в Pydantic-модель
    response_data = GetFileResponseSchema.model_validate_json(response.text)
Это позволяет проверить, что API действительно вернул JSON-ответ в ожидаемом формате.

3. Проверяет статус-код ответа
    assert_status_code(response.status_code, HTTPStatus.OK)
Если API работает корректно, сервер должен вернуть статус 200 OK.

4. Проверяет, что данные файла совпадают с ожидаемыми
    assert_get_file_response(response_data, function_file.response)
Эта функция сравнивает содержимое полученного файла с тем, что было создано ранее, проверяя соответствие всех полей (id, url, filename, directory).

5. Валидирует JSON-ответ по схеме
    validate_json_schema(response.json(), response_data.model_json_schema())
Здесь проверяется, что структура JSON-ответа соответствует схеме GetFileResponseSchema.

Важно! Фикстуры function_file и клиент files_client были созданы в уроке "Рефакторинг и подготовка к написанию API автотестов".

---------------------------------------------------------------
3. Запускаем автотест test_get_file
---------------------------------------------------------------
В корне проекта autotests-api выполним команду:

    python -m pytest -k "test_get_file"


При успешном выполнении команды в консоли отобразится примерно такой вывод:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "test_get_file"
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
    collected 39 items / 38 deselected / 1 selected

    tests/files/test_files.py::TestFiles::test_get_file PASSED

    ================================================================ 1 passed, 38 deselected in 0.76s ================================================================