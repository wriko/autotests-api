Пишем API автотест для получения списка курсов
Ранее мы уже писали автотесты на создание и обновление сущностей. Теперь настало время потренироваться в тестировании получения списка сущностей.

В этом уроке мы напишем автотест, который будет запрашивать список курсов через API, отправляя GET-запрос на эндпоинт /api/v1/courses.

Тест будет выполнять следующие шаги:
1. Создаст тестовый курс (с помощью фикстуры function_course).
2. Отправит GET-запрос на эндпоинт /api/v1/courses.
3. Проверит, что статус-код ответа 200 OK.
4. Убедится, что в ответе присутствует список ранее созданных курсов.
5. Провалидирует JSON-схему ответа.

-----------------------------------------
1. Создаём модель GetCoursesResponseSchema
-----------------------------------------

Перед тем как писать тест, необходимо создать схему ответа, которая позволит десериализовать JSON-ответ API в объект Python. Это обеспечит строгую проверку структуры данных и упростит работу с полученными курсами.

Открываем файл /clients/courses/courses_schema.py и добавляем следующую модель:

    # Остальной код без изменений

    class GetCoursesResponseSchema(BaseModel):
        """
        Описание структуры ответа на получение списка курсов.
        """
        courses: list[CourseSchema]

    # Остальной код без изменений

list[CourseSchema] – поле courses, которое содержит список объектов CourseSchema. Это означает, что API должно возвращать массив курсов, каждый из которых соответствует заранее описанной схеме CourseSchema.

-----------------------------------------
2. Добавляем функции проверок assert_course и assert_get_courses_response
-----------------------------------------
Для удобства и читаемости кода нам необходимо вынести проверки курсов в отдельные функции.
1. Функция assert_course – сравнивает все поля модели курса, чтобы убедиться, что фактические данные совпадают с ожидаемыми.
2. Функция assert_get_courses_response – проверяет, что API корректно возвращает список курсов.

Добавим следующий код в файл /tools/assertions/courses.py:

    from clients.courses.courses_schema import CourseSchema, UpdateCourseRequestSchema, UpdateCourseResponseSchema, \
        GetCoursesResponseSchema, CreateCourseResponseSchema
    from tools.assertions.base import assert_equal, assert_length
    from tools.assertions.files import assert_file
    from tools.assertions.users import assert_user


    # Остальной код без изменений

    def assert_course(actual: CourseSchema, expected: CourseSchema):
        """
        Проверяет, что фактические данные курса соответствуют ожидаемым.

        :param actual: Фактические данные курса.
        :param expected: Ожидаемые данные курса.
        :raises AssertionError: Если хотя бы одно поле не совпадает.
        """
        assert_equal(actual.id, expected.id, "id")
        assert_equal(actual.title, expected.title, "title")
        assert_equal(actual.max_score, expected.max_score, "max_score")
        assert_equal(actual.min_score, expected.min_score, "min_score")
        assert_equal(actual.description, expected.description, "description")
        assert_equal(actual.estimated_time, expected.estimated_time, "estimated_time")

        # Проверяем вложенные сущности
        assert_file(actual.preview_file, expected.preview_file)
        assert_user(actual.created_by_user, expected.created_by_user)


    def assert_get_courses_response(
            get_courses_response: GetCoursesResponseSchema,
            create_course_responses: list[CreateCourseResponseSchema]
    ):
        """
        Проверяет, что ответ на получение списка курсов соответствует ответам на их создание.

        :param get_courses_response: Ответ API при запросе списка курсов.
        :param create_course_responses: Список API ответов при создании курсов.
        :raises AssertionError: Если данные курсов не совпадают.
        """
        assert_length(get_courses_response.courses, create_course_responses, "courses")

        for index, create_course_response in enumerate(create_course_responses):
            assert_course(get_courses_response.courses[index], create_course_response.course)


Разбор кода и ключевые моменты:

1. assert_course – удобная и переиспользуемая проверка курса
Функция assert_course выполняет поэлементное сравнение всех ключевых полей модели курса.
Обратите внимание на использование функций assert_file и assert_user:
    assert_file(actual.preview_file, expected.preview_file)
    assert_user(actual.created_by_user, expected.created_by_user)

Здесь мы проверяем вложенные объекты:
 - assert_file отвечает за проверку прикрепленного файла.
 - assert_user проверяет данные о пользователе, который создал курс.

Плюсы такого подхода:
 - Минимизация дублирования кода – один раз написали функцию assert_course, и можем использовать её в любом тесте.
 - Легкость поддержки – если изменится логика проверки файлов (assert_file), правки коснутся только одной функции, а не десятков тестов.
 - Гибкость – если курс в будущем получит новые вложенные сущности, их можно легко добавить в assert_course.
Такой же подход можно применять к другим сущностям. Например, если у вас есть модель даты {day: int, month: int, year: int}, то имеет смысл вынести валидацию в отдельную функцию assert_date, а затем переиспользовать её в тестах.



2. assert_get_courses_response – проверка списка курсов
Функция assert_get_courses_response выполняет проверку корректности ответа API на запрос списка курсов.
Основной механизм – цикл по курсам:
    for index, create_course_response in enumerate(create_course_responses):
        assert_course(get_courses_response.courses[index], create_course_response.course)
Здесь мы сравниваем каждый курс из ответа API с курсом, который был создан. Такой же механизм мы использовали ранее в функции assert_validation_error_response (из урока "Практикуемся в написании API автотестов. Часть 1").

Важно! Всегда выносите повторяющиеся проверки в отдельные функции. Это упростит код, сделает его читаемым и позволит быстрее вносить изменения в будущем.



3. Создаем тест test_get_courses
Теперь нам необходимо написать тест, который проверит корректность получения списка курсов. Для этого в файле /tests/courses/test_courses.py добавим новый тест test_get_courses:

    from http import HTTPStatus

    import pytest

    from clients.courses.courses_client import CoursesClient
    from clients.courses.courses_schema import UpdateCourseRequestSchema, UpdateCourseResponseSchema, GetCoursesQuerySchema, \
        GetCoursesResponseSchema
    from fixtures.courses import CourseFixture
    from fixtures.users import UserFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.courses import assert_update_course_response, assert_get_courses_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.courses
    @pytest.mark.regression
    class TestCourses:
        def test_get_courses(
                self,
                courses_client: CoursesClient,
                function_user: UserFixture,
                function_course: CourseFixture
        ):
            # Формируем параметры запроса, передавая user_id
            query = GetCoursesQuerySchema(user_id=function_user.response.user.id)
            # Отправляем GET-запрос на получение списка курсов
            response = courses_client.get_courses_api(query)
            # Десериализуем JSON-ответ в Pydantic-модель
            response_data = GetCoursesResponseSchema.model_validate_json(response.text)

            # Проверяем, что код ответа 200 OK
            assert_status_code(response.status_code, HTTPStatus.OK)
            # Проверяем, что список курсов соответствует ранее созданным курсам
            assert_get_courses_response(response_data, [function_course.response])

            # Проверяем соответствие JSON-ответа схеме
            validate_json_schema(response.json(), response_data.model_json_schema())

        # Остальной код без изменений


Разбор кода:

1. Используем query-параметры в запросе. Обратите внимание, что в данном случае мы передаем GetCoursesQuerySchema, который содержит query-параметры, а не тело запроса. Это означает, что мы выполняем GET-запрос с параметром user_id, чтобы получить список курсов, созданных этим пользователем.
2. Используем фикстуры для подготовки тестовых данных
 - function_user: создаем тестового пользователя, чтобы получить его user_id для запроса.
 - function_course: создаем курс, связанный с этим пользователем.

---------------------------------------
4. Запускаем тест test_get_courses
---------------------------------------
Теперь запустим тест и проверим, что все работает корректно. Выполним команду:
    python -m pytest -k "test_get_courses"

При успешном прохождении теста, в консоли будет примерно такой вывод:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "test_get_courses"
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
    collected 45 items / 44 deselected / 1 selected

    tests/courses/test_courses.py::TestCourses::test_get_courses PASSED

    ================================================================ 1 passed, 44 deselected in 1.13s ================================================================