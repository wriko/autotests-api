После того, как мы научились загружать файлы, можем спокойно реализовать клиент FilesClient для работы с /api/v1/files.
В клиенте необходимо реализовать следующие методы:

 1. get_file_api — GET /api/v1/files/{file_id}. Метод для получения данных о ранее загруженном файле по его идентификатору.
 2. create_file_api — POST /api/v1/files. Метод для загрузки файла на сервер.
 3. delete_file_api — DELETE /api/v1/files/{file_id}. Метод для удаления файла по идентификатору.


1. Создадим файл files_client.py
В папке clients создадим папку files, а внутри неё файл files_client.py:
.
└── autotests-api/
    └── clients/
        ├── __init__.py
        ├── api_client.py
        └── files/
            ├── __init__.py
            └── files_client.py


2. Добавим класс FilesClient

    from typing import TypedDict

    from httpx import Response

    from clients.api_client import APIClient


    class CreateFileRequestDict(TypedDict):
        """
        Описание структуры запроса на создание файла.
        """
        filename: str
        directory: str
        upload_file: str


    class FilesClient(APIClient):
        """
        Клиент для работы с /api/v1/files
        """

        def get_file_api(self, file_id: str) -> Response:
            """
            Метод получения файла.

            :param file_id: Идентификатор файла.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.get(f"/api/v1/files/{file_id}")

        def create_file_api(self, request: CreateFileRequestDict) -> Response:
            """
            Метод создания файла.

            :param request: Словарь с filename, directory, upload_file.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.post(
                "/api/v1/files",
                data=request,
                files={"upload_file": open(request['upload_file'], 'rb')}
            )

        def delete_file_api(self, file_id: str) -> Response:
            """
            Метод удаления файла.

            :param file_id: Идентификатор файла.
            :return: Ответ от сервера в виде объекта httpx.Response
            """
            return self.delete(f"/api/v1/files/{file_id}")


Разбор кода

CreateFileRequestDict

    class CreateFileRequestDict(TypedDict):
        """
        Описание структуры запроса на создание файла.
        """
        filename: str
        directory: str
        upload_file: str

Этот класс представляет собой TypedDict, который описывает структуру данных, необходимую для запроса на создание файла. В нем определены три обязательных поля:
 - filename — имя файла,
 - directory — путь к директории, куда файл должен быть загружен,
 - upload_file — путь к файлу на локальной машине, который будет загружен.

create_file_api

    def create_file_api(self, request: CreateFileRequestDict) -> Response:
        """
        Метод создания файла.

        :param request: Словарь с filename, directory, upload_file.
        :return: Ответ от сервера в виде объекта httpx.Response
        """
        return self.post(
            "/api/v1/files",
            data=request,
            files={"upload_file": open(request['upload_file'], 'rb')}
        )

Здесь выполняется загрузка файла в API:
1. Метод принимает request, который представляет собой словарь с параметрами запроса.
2. В data передаются метаданные о файле (filename, directory).
3. В files передается сам файл, который открывается в бинарном режиме ('rb').
4. self.post(...) отправляет POST-запрос на сервер с указанными данными.

Таким образом, логика загрузки инкапсулирована внутри метода create_file_api, и при вызове этого метода нам нужно лишь передать корректные параметры.

Завершение
На этом реализация клиента для работы с файлами завершена. Теперь FilesClient позволяет загружать файлы, получать их данные по идентификатору и удалять при необходимости.