
Ссылки:
Официальная документация Pytest - https://docs.pytest.org/en/stable/

Pytest — это один из самых популярных и мощных фреймворков для написания автотестов на Python. Его основная задача — сделать процесс тестирования более организованным, автоматизированным и удобным для масштабирования

Зачем нам нужен Pytest?
На этом этапе мы уже писали тестовые скрипты используя HTTPX, Pydantic, но не автотесты. Однако каждый скрипт запускался отдельно, и они не были частью более сложной системы управления тестами. Pytest позволяет нам:

1. Организовать тесты в структуру, где каждый тест может быть легко найден и запущен
2. Автоматизировать запуск тестов, чтобы каждый раз не запускать их вручную
3. Обрабатывать ошибки и формировать отчеты о результатах тестов
4. Использовать фикстуры для настройки и очистки окружения перед/после тестов
5. Разделять автотесты по функциональности, либо по виду тестирования
6. Делать параметризированные автотесты, есть ситуации, когда нужно запустить один и тот же автотест, но с разными входными данными

Как Pytest помогает?

1. Масштабирование: С ростом количества тестов их нужно упорядочивать. Pytest помогает создавать простую и понятную структуру.
2. Отчетность: Pytest автоматически создает отчеты по результатам тестов — вы всегда знаете, что прошло, а что сломалось.
3. Фикстуры: Это один из самых мощных механизмов Pytest. С их помощью вы можете подготовить данные или окружение, которое будет использоваться во всех тестах, избегая дублирования кода.
4. Параллельное выполнение тестов: Pytest легко интегрируется с плагинами для параллельного запуска тестов, что экономит время, особенно в больших проектах.

======================================================================
Установка Pytest
Pytest можно установить через пакетный менеджер pip, как и любую другую Python библиотеку. Запустим команду в корне проекта autotests-api:
    pip install pytest

После выполнения команды вы получите примерно такой вывод в терминале:
    (venv) username@ip-8-8-8-8 autotests-api % pip install pytest
    Collecting pytest
      Downloading pytest-8.3.3-py3-none-any.whl (342 kB)
         ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 342.3/342.3 kB 2.4 MB/s eta 0:00:00
    Collecting iniconfig
      Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)
    Collecting packaging
      Downloading packaging-24.1-py3-none-any.whl (53 kB)
         ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 54.0/54.0 kB 4.5 MB/s eta 0:00:00
    Collecting pluggy<2,>=1.5
      Downloading pluggy-1.5.0-py3-none-any.whl (20 kB)
    Installing collected packages: pluggy, packaging, iniconfig, pytest
    Successfully installed iniconfig-2.0.0 packaging-24.1 pluggy-1.5.0 pytest-8.3.3

    [notice] A new release of pip available: 22.3.1 -> 24.2
    [notice] To update, run: pip install --upgrade pip


Теперь проверим, что Pytest успешно установлен. Запустим команду в корне проекта autotests-api:
    python -m pytest --version

После выполнения команды вы получите примерно такой вывод в терминале:
    pytest 8.3.3




======================================================================
Тестовые файлы и папки
Pytest автоматически обнаруживает тестовые файлы, тестовые функции и классы, если они соответствуют определенным правилам именования. Эти правила помогают инструменту отличать тесты от остального кода, чтобы их можно было удобно находить и запускать

1. Нейминг файлов в pytest
По умолчанию pytest ищет тесты в файлах, которые соответствуют следующим критериям:

Файлы должны начинаться с префикса test_ или заканчиваться суффиксом _test.py.
Примеры правильных имен файлов:

test_login.py
test_user_auth.py
user_auth_test.py
Примеры неправильных имен файлов:

login_tests.py
userauth.py
Если файл не будет соответствовать этим правилам, pytest его проигнорирует при выполнении тестов, если не настроить исключения (о чем поговорим ниже)

2. Нейминг папок в pytest
По умолчанию pytest ищет тесты в файлах, находящихся в директориях с любым именем. Однако, есть несколько рекомендаций:

Тестовые файлы желательно размещать в директориях с именем tests или test_*, чтобы ясно было, что это папка с тестами.
Папки с тестами должны содержать файл __init__.py, если они планируются как Python-модули. Без этого файла pytest может не распознавать тесты в этих папках, если они будут импортироваться.
Пример правильной структуры проекта:

autotests-api/
│
├── scripts/
│   └── main.py
│
└── tests/
    ├── __init__.py
    ├── test_login.py
    ├── test_user_auth.py
3. Настройка поиска тестов
В случае, если ваш проект использует нестандартные имена для файлов или папок, которые содержат тесты, pytest позволяет настроить правила поиска. Это можно сделать с помощью параметров в конфигурационном файле pytest (pytest.ini, tox.ini или setup.cfg), а также с помощью командной строки.

Создадим файл pytest.ini в корневой директории проекта autotests-api:

.
└── autotests-api/
    └── pytest.ini
И добавим следующие параметры:

# pytest.ini
[pytest]
python_files = *_tests.py test_*.py   # Устанавливает правила для тестовых файлов
В данном случае параметр python_files позволяет указать паттерны для имен файлов, которые pytest будет воспринимать как тестовые файлы. Пример: python_files = *_test.py будет искать файлы, которые заканчиваются на _test.py

Вы также можете изменить правила поиска тестов через командную строку при запуске pytest. Например, если вы хотите запустить тесты только в файлах, которые начинаются с example_:

python -m pytest --python-files="example_*.py"


======================================================================
Тестовые функции и классы
1. Функции
Pytest ищет тестовые функции, которые начинаются с префикса test_. Это соглашение по неймингу позволяет pytest автоматически определять, какие функции являются тестами, и запускать их при вызове команды pytest. Например:

def test_user_login():
    assert 1 == 1
Примеры правильного именования функций:

test_login_page_renders_correctly()
test_user_can_register()
test_product_addition_to_cart()
Примеры неправильного именования функций:

check_login() – начинается не с test_
login_test() – не будет распознана как тестовая функция
Рекомендации:

Названия тестов должны быть максимально описательными, чтобы другие QA Automation Engineer-ы могли понять, что именно тестируется, без необходимости заглядывать в тело теста.
Используйте утверждения, описывающие поведение, которое проверяется. Например, вместо названия test_login() используйте test_valid_login_redirects_to_dashboard().
Можно использовать глаголы в настоящем времени для описания действий, например: test_user_can_submit_form()
2. Классы
Pytest также поддерживает использование классов для организации тестов. Классы позволяют группировать связанные тесты, что особенно удобно, если тестируемая логика содержит несколько сценариев для одного компонента. Однако для того, чтобы pytest мог обнаружить классы как тестовые, они должны соответствовать определённым правилам. Тестовые классы в pytest должны начинаться с Test:

class TestUserLogin:
class TestProductPurchase:
Пример:

class TestUserAuthentication:
    def test_login(self):
        assert 1 == 1
Примеры правильного именования классов:

TestProfile
TestCourses
TestUserAuthoirization
Примеры неправильного именования классов:

ProfileTest – начинается не с Test
SuiteCourses – не будет распознана как тестовый класс
Примечания:

Имена методов внутри класса также должны начинаться с test_, чтобы pytest мог обнаружить их как тесты.
Классы не должны иметь конструктора (__init__()), так как pytest не может корректно создавать экземпляры таких классов. Pytest создает экземпляр класса для каждого теста, и наличие конструктора может нарушить этот процесс.
3. Настройка поиска тестов
Аналогично с тестовыми файлами, поиск тестовых функций и классов можно настроить. Откроем ранее созданный pytest.ini файл и добавим в него следующие строчки:

# pytest.ini
[pytest]
python_files = *_tests.py test_*.py  # Это мы добавили в предыдущем шаге
python_classes = Test*               # Устанавливает правила для имен классов
python_functions = test_*            # Устанавливает правила для имен функций
python_classes: Позволяет указать паттерны для имен классов, которые pytest будет считать тестовыми.

Пример: python_classes = Test* будет находить классы, которые начинаются с Test.
python_functions: Позволяет задать правила именования для тестовых функций.

Пример: python_functions = test_* будет находить функции, которые начинаются с test_.