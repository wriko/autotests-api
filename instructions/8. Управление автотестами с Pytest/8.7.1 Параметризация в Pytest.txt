Параметризация в pytest
Ссылки:
Официальная документация pytest по параметризации - https://docs.pytest.org/en/7.1.x/how-to/parametrize.html


Параметризация в pytest — это мощный инструмент, который позволяет запускать один и тот же тест с разными входными данными. Это помогает избежать дублирования кода и делает тесты более гибкими и читаемыми. В pytest предусмотрено несколько способов параметризации, которые покрывают различные сценарии тестирования.

Зачем нужна параметризация?
Часто возникает необходимость протестировать один и тот же функционал с разными входными данными. Например, нужно проверить, как функция ведет себя при положительных и отрицательных значениях, или протестировать работу сервиса для различных ролей пользователей. Вместо написания отдельных тестов для каждого набора данных, можно использовать параметризацию.

Преимущества параметризации:

Экономия времени: один тест покрывает сразу несколько вариантов.
Поддерживаемость: уменьшается количество дублирующего кода.
Гибкость: легко добавлять новые тестовые данные.
Основные методы параметризации
Параметризация тестов с помощью @pytest.mark.parametrize
Параметризация фикстур
1. Параметризация тестов с помощью @pytest.mark.parametrize
Это наиболее распространенный метод параметризации в pytest. Он позволяет передавать несколько наборов параметров в один тестовый метод.

Синтаксис:

@pytest.mark.parametrize("parameter1, parameter2, ..., parameterN", [
    (value1_1, value1_2, ..., value1_N),
    (value2_1, value2_2, ..., value2_N),
    ...
])
def test_example(parameter1, parameter2, ..., parameterN):
    assert <some condition>
Пример:

import pytest

@pytest.mark.parametrize("username, password", [
    ("user1", "pass1"),
    ("user2", "pass2"),
    ("admin", "admin123")
])
def test_login(username, password):
    assert login(username, password) == "Success"
Здесь pytest выполнит тест test_login три раза с разными значениями username и password.

Особенности:

Можно параметризовать несколько аргументов.
Каждый набор данных будет тестироваться отдельно.
В отчете pytest будет показывать, какие данные использовались для каждого прогона теста.
Параметризация с pytest.param:

Иногда нужно передать не только значения, но и дополнительную информацию, например, отметить, что тест должен быть пропущен или ожидать конкретного исключения.

@pytest.mark.parametrize("value", [
    pytest.param(1),
    pytest.param(2),
    pytest.param(-1, marks=pytest.mark.skip(reason="Negative value")),
])
def test_increment(value):
    assert increment(value) > 0
В этом примере третий тест будет пропущен, так как он помечен pytest.mark.skip.

2. Параметризация фикстур
Параметризовать можно не только тестовые функции, но и фикстуры. Это полезно, когда нужно передать разные параметры в фикстуру, а затем использовать их в разных тестах.

Синтаксис:

@pytest.fixture(params=[value1, value2, value3])
def fixture_name(request):
    return request.param

def test_example(fixture_name):
    assert <some condition>
Пример:

import pytest

@pytest.fixture(params=[1000, 2000, 3000])
def port(request):
    return request.param

def test_port(port):
    assert port in [1000, 2000, 3000]
Здесь фикстура port будет передавать различные значения портов, и тест test_port выполнится три раза — по одному на каждый порт.

Полезные приемы параметризации
Параметризация с помощью словарей
Иногда удобнее передавать значения в виде словарей, особенно если параметры могут изменяться:

@pytest.mark.parametrize("data", [
    {"username": "user1", "password": "pass1"},
    {"username": "user2", "password": "pass2"},
    {"username": "admin", "password": "admin123"},
])
def test_login(data):
    assert login(data["username"], data["password"]) == "Success"
Комбинированная параметризация
Можно комбинировать несколько параметров, чтобы создавать тесты с перекрестными комбинациями значений:

@pytest.mark.parametrize("host", ["localhost", "example.com"])
@pytest.mark.parametrize("port", [1000, 2000, 3000])
def test_client(host, port):
    assert client.run_test(host, port) == "Success"
В этом примере тесты будут выполнены для каждой комбинации host и port (всего 6 комбинаций).