Первый автотест
Давайте напишем самый простой автотест, который пока ничего не будет проверять, а просто выведет в консоль строку "Hello World!"

Создадим в проекте autotests-api папку tests, внутри папки tests создадим файл test_pytest.py:

.
└── autotests-api/
    └── tests/
        ├── __init__.py
        └── test_pytest.py

В файле test_pytest.py создадим первый автотест:

    def test_first_try():
        print("Hello World!")

Теперь запустим данный автотест, сделать это можно двумя способами:
1. Используя консольную команду. Обычно используется в автоматических прогонах автотестов на CI/CD, либо в скриптах. Также может использоваться при локальной отладке
2. Через PyCharm. В основном используется при локальной отладке

________________________________________________
Запускаем автотесты через консольную команду
________________________________________________
Для запуска автотестов с использованием pytest, необходимо выполнить следующую команду в терминале. Команду необходимо запускать в корне проекта autotests-api:
    python -m pytest

Эта команда инициирует поиск и запуск всех тестов, которые соответствуют конфигурации и соглашениям о нейминге, принятым в проекте. Тесты могут быть как в файлах с префиксом или суффиксом test_, так и в функциях и классах, которые также начинаются с test_


Пример вывода в консоль при успешном запуске команды будет выглядеть так:

    (venv) username@ip-8-8-8-8 autotests-api % python -m pytest
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0
    rootdir: /Users/username/Documents/autotests-api
    collected 1 item

    test_pytest.py .                                                                                                                                           [100%]

    ======================================================================= 1 passed in 0.09s ========================================================================

Разбор вывода pytest:

1. test session starts
Этот блок сообщает о начале тестовой сессии. Здесь также приводятся основные сведения о сессии

2. rootdir
Путь к корневой директории проекта, с которой выполняется запуск тестов. В примере это /Users/username/Documents/autotests-api. Этот путь определяет область поиска тестов в проекте.

3. collected 1 item
Количество тестов, найденных и подготовленных для выполнения. В данном случае нашелся 1 тест.

4. test_pytest.py .
Это строка указывает на файл, в котором был выполнен тест, и результат выполнения:
 - test_pytest.py – имя файла с тестом.
 - . – точка означает успешное прохождение теста. Если бы тест завершился с ошибкой, здесь была бы буква F (fail).

5. [100%]
Указывает на процент успешно выполненных тестов. В данном случае 100%, так как тест был один и прошел успешно.

6. 1 passed in 0.09s
Эта строка подытоживает результаты тестов:
 - 1 passed – количество успешно пройденных тестов (1 тест пройден).
 - 0.09s – время выполнения теста (в секундах).

Обратите внимание, что в тесте мы печатаем в консоль строку "Hello World!", но эта строка не отображается в выводе. Все дело в том, что команда python -m pytest запускает автотесты в стандартном режиме, при котором вывод консольных сообщений (таких как print()) подавляется для упрощения вывода результатов тестов.

Чтобы в лог выводилось больше информации, включая содержимое консольных сообщений, необходимо добавить флаг -s. Этот флаг позволяет отображать вывод функций print().

Также, для получения более детализированного вывода о каждом тесте, вы можете добавить флаг -v, который запустит автотесты в verbose (подробном) режиме. В этом режиме pytest покажет больше информации, например, названия тестов и их статусы.

Модифицируем команду pytest и запустим автотесты еще раз:

    python -m pytest -v -s

Пример вывода в консоль при успешном запуске команды будет выглядеть так:

    (venv) username@ip-8-8-8-8 autotests-api % python -m pytest -v -s
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    collected 1 item

    test_pytest.py::test_first_try Hello World!
    PASSED

    ======================================================================= 1 passed in 0.05s ========================================================================

Изменения после добавления флагов:

test_pytest.py::test_first_try Hello World!
Появилась строка "Hello World!", которая была напечатана в тесте с помощью print(). Это результат работы флага -s, который позволяет выводить в консоль любые сообщения, которые выводятся через print() во время выполнения теста.

Также видно более детализированное название теста: test_pytest.py::test_first_try. Это результат использования флага -v (verbose mode), который показывает путь к файлу и имя тестовой функции

PASSED
В verbose режиме результат теста (PASSED) отображается непосредственно после вывода строки, что делает лог более читабельным.
Запуск автотестов по имени или частичному совпадению
Pytest также поддерживает запуск тестов, имена которых частично совпадают с указанным шаблоном. Для этого можно использовать опцию -k, которая позволяет фильтровать тесты по имени.

Пример:

    python -m pytest -k "login"
Эта команда запустит все тесты, в имени которых есть слово "login", например:

test_successful_login
test_failed_login
Также можно использовать логические операторы, чтобы сделать фильтрацию более гибкой.

 Примеры:

Запуск всех тестов, где имя функции содержит "login" и "success":
    python -m pytest -k "login and success"

Запуск всех тестов, где имя содержит "login", но исключает "failed":
    python -m pytest -k "login and not failed"