
Ссылки:

Официальная документация по pytest плагинам - https://docs.pytest.org/en/7.1.x/how-to/writing_plugins.html
Список всех доступных плагинов - https://docs.pytest.org/en/stable/reference/plugin_list.html


pytest — это мощный и гибкий инструмент для написания автотестов, и одним из его ключевых преимуществ является поддержка плагинов.
Плагины позволяют расширять функциональность фреймворка, добавляя новые возможности или изменяя поведение тестирования. В мире pytest уже существует множество готовых плагинов, таких как:
 - pytest-html — плагин, который позволяет автоматически генерировать HTML-отчеты с результатами тестов. Он полезен для визуального представления тестов, удобного анализа и обмена отчетами между членами команды.
 - pytest-allure — плагин для генерации отчетов о тестировании в формате Allure, что позволяет визуализировать результаты тестов в виде удобных отчетов.

Эти и другие плагины легко добавляются через установку пакетов и предоставляют функции, которые мы можем использовать в автотестах. Но есть также другой подход к созданию и использованию плагинов в pytest, который связан с организацией фикстур в больших проектах.

___________________________________________
Проблемы с фикстурами в больших проектах
___________________________________________
Когда тестов становится много, структура проекта усложняется, и нам требуется более гибкая организация фикстур. В pytest для этого обычно используются файлы conftest.py, которые содержат общие фикстуры для тестов в конкретной директории.

Мы можем создавать файлы conftest.py в каждой папке с тестами, что позволяет локализовать фикстуры для конкретных частей проекта. Например:

.
└── tests/
    ├── users/
    │   └── conftest.py # фикстуры для тестов пользователей
    └── accounts/
        └── conftest.py # фикстуры для тестов аккаунтов
Каждый файл conftest.py действует локально для своего набора тестов. Это решение работает хорошо для разделения ответственности между разными тестами. Однако есть одна проблема: фикстуры из одного файла conftest.py недоступны в других директориях. Например, фикстуры из users/conftest.py не будут видны в тестах, расположенных в accounts/.

Этот ограниченный радиус действия может привести к дублированию фикстур, особенно если одни и те же фикстуры нужны в нескольких местах. К тому же, если у вас много тестов и разные команды разрабатывают свои модули тестов, это может усложнить поддержку кода.

Как решить проблему с помощью pytest_plugins
Чтобы избежать проблемы видимости и дублирования, можно использовать плагины, которые делают фикстуры доступными глобально по всему проекту. Это достигается с помощью переменной pytest_plugins, которая позволяет подключать отдельные модули с фикстурами.

Что это дает?

Глобальная доступность фикстур: фикстуры, объявленные в плагинах, становятся видны во всех тестах без необходимости заботиться о том, в какой директории они находятся.
Гибкость: фикстуры можно разделить по смысловым группам, и каждая группа будет доступна во всем проекте.
Модульность: каждый плагин можно организовать как отдельный файл или набор файлов, что делает проект более структурированным.
Пример:

# conftest.py
pytest_plugins = (
    "tests.fixtures.browsers",
    "tests.fixtures.api",
)
В этом примере мы подключаем модули с фикстурами browsers и api, и теперь фикстуры из этих модулей доступны глобально для всех тестов проекта, вне зависимости от их директории.

--------------------------------------------------
Пример использования pytest_plugins на практике
--------------------------------------------------
Предположим, у вас есть проект с разными группами тестов, например, тесты для пользователей и аккаунтов, и в каждой группе нужны свои фикстуры. Вместо того чтобы дублировать фикстуры в каждом conftest.py, мы можем сделать их глобальными через плагины.

1. Создадим отдельные модули с фикстурами. Например, browsers.py для работы с браузерами:

    # tests/fixtures/browsers.py
    import pytest

    @pytest.fixture
    def browser():
        # Логика для инициализации браузера
        pass


2. И другой модуль, например, для работы с API:

    # tests/fixtures/api.py
    import pytest

    @pytest.fixture
    def api_client():
        # Возвращаем клиент для работы с API
        pass


3. В файле conftest.py мы подключаем эти модули через переменную pytest_plugins:

    # conftest.py
    pytest_plugins = (
        "tests.fixtures.browsers",
        "tests.fixtures.api",
    )


Теперь все тесты в проекте могут использовать фикстуры из этих модулей, не дублируя их в каждом conftest.py.

Когда стоит оставлять фикстуры в conftest.py?
Хотя использование плагинов — это мощное решение, в некоторых случаях имеет смысл оставлять фикстуры в conftest.py. Это особенно актуально для тех фикстур, которые нужны только в одной конкретной группе тестов и не используются глобально. Таким образом, можно локализовать специфические фикстуры для конкретных тестов и избежать их распространения на весь проект.

Преимущества использования плагинов для фикстур
Глобальная доступность фикстур: Вам не нужно беспокоиться о том, где лежат файлы conftest.py. Все необходимые фикстуры доступны везде, где нужно.
Модульность и гибкость: Фикстуры можно организовать в виде отдельных модулей, что облегчает их поддержку и развитие.
Упрощение структуры проекта: Вы можете легко управлять фикстурами, избегая чрезмерной сложности в conftest.py файлах. Они больше не становятся огромными файлами с сотнями строк кода.