Давайте внимательно посмотрим на следующие автотесты:

 - test_create_user
 - test_login

Важно! Тест test_login должен быть создан, после выполнения домашнего задания урока Написание API автотестов используя Pytest, если вы пропустили данный шаг, то рекомендую вернуться и детально разобраться с ним

Видим, что в данных автотестах есть повторяющийся код:

    @pytest.mark.users
    @pytest.mark.regression
    def test_create_user():
        # Инициализация API клиентов повторяется в обоих тестах
        public_users_client = get_public_users_client()

        # Другой код ниже


    @pytest.mark.regression
    @pytest.mark.authentication
    def test_login():
        # Тут аналогично, инициализация API клиентов повторяется
        public_users_client = get_public_users_client()
        authentication_client = get_authentication_client()

        # Другой код ниже

Данные блоки кода первые кандидаты на вынесение в фикстуры

1. Создадим файл conftest.py
.
└── autotests-api/
    └── tests/
        └── conftest.py

2. Создание фикстур public_users_client и authentication_client
Добавим фикстуры public_users_client и authentication_client в файл conftest.py. Эти фикстуры будут отвечать за инициализацию API-клиентов, которые используются в тестах для работы с аутентификацией и пользователями.

    import pytest  # Импортируем pytest

    # Импортируем API клиенты
    from clients.authentication.authentication_client import AuthenticationClient, get_authentication_client
    from clients.users.public_users_client import get_public_users_client, PublicUsersClient


    @pytest.fixture  # Объявляем фикстуру, по умолчанию скоуп function, то что нам нужно
    def authentication_client() -> AuthenticationClient:  # Аннотируем возвращаемое фикстурой значение
        # Создаем новый API клиент для работы с аутентификацией
        return get_authentication_client()


    @pytest.fixture  # Объявляем фикстуру, по умолчанию скоуп function, то что нам нужно
    def public_users_client() -> PublicUsersClient:  # Аннотируем возвращаемое фикстурой значение
        # Создаем новый API клиент для работы с публичным API пользователей
        return get_public_users_client()

Разбор кода:

    import pytest  # Импортируем pytest

    # Импортируем API-клиенты
    from clients.authentication.authentication_client import AuthenticationClient, get_authentication_client
    from clients.users.public_users_client import get_public_users_client, PublicUsersClient

1. Здесь мы импортируем pytest, так как фикстуры в pytest создаются с его помощью.
2. Затем импортируем API-клиенты и их функции-конструкторы (get_authentication_client и get_public_users_client). Эти функции используются для создания экземпляров клиентов.

Фикстура authentication_client

    @pytest.fixture  # Объявляем фикстуру, по умолчанию scope='function', что нам и нужно
    def authentication_client() -> AuthenticationClient:  # Аннотируем возвращаемый тип
        # Создаем новый API-клиент для работы с аутентификацией
        return get_authentication_client()

1. Декоратор @pytest.fixture указывает, что authentication_client является фикстурой.
2. По умолчанию scope="function", что означает, что новый клиент будет создаваться перед каждым тестом. Это важно для изоляции тестов.
3. Возвращаем значение типа AuthenticationClient, который создается через get_authentication_client().

Фикстура public_users_client

    @pytest.fixture  # Объявляем фикстуру, по умолчанию scope='function'
    def public_users_client() -> PublicUsersClient:  # Аннотируем возвращаемый тип
        # Создаем новый API-клиент для работы с публичным API пользователей
        return get_public_users_client()

1. Аналогично, фикстура создаёт новый экземпляр PublicUsersClient перед каждым тестом.
2. Это гарантирует, что каждый тест получает "чистый" экземпляр клиента, который не содержит данных из предыдущих тестов.

Важно! По умолчанию фикстуры в pytest имеют scope="function", что означает, что каждый тест получает новый экземпляр клиента. Это важно, потому что:
- Гарантируется независимость тестов – один тест не влияет на другой.
- Нет проблем с состоянием клиентов – у каждого теста свой экземпляр.
- Консистентность между тестами – в каждом тесте API-клиент работает в чистом окружении.
Если бы мы использовали scope="session", клиенты создавались бы один раз на всю сессию тестов, и их состояние могло бы повлиять на другие тесты, что нежелательно.

3. Используем фикстуры в автотестах

Применение фикстуры public_users_client в тесте test_create_user

До использования фикстуры:

    from http import HTTPStatus

    import pytest

    from clients.users.public_users_client import get_public_users_client
    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema
    from tools.assertions.users import assert_create_user_response


    @pytest.mark.users
    @pytest.mark.regression
    def test_create_user():
        public_users_client = get_public_users_client()  # Явная инициализация API клиента внутри теста

        request = CreateUserRequestSchema()
        response = public_users_client.create_user_api(request)
        response_data = CreateUserResponseSchema.model_validate_json(response.text)

        assert_status_code(response.status_code, HTTPStatus.OK)
        assert_create_user_response(request, response_data)

        validate_json_schema(response.json(), response_data.model_json_schema())

В этом варианте теста API клиент public_users_client создается внутри тестовой функции. Это приводит к дублированию кода, поскольку в каждом тесте, где требуется этот клиент, придется явно его инициализировать.

После использования фикстуры:

    from http import HTTPStatus

    import pytest

    from clients.users.public_users_client import PublicUsersClient
    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema
    from tools.assertions.users import assert_create_user_response


    @pytest.mark.users
    @pytest.mark.regression
    def test_create_user(public_users_client: PublicUsersClient):  # Используем фикстуру API клиента
        # Удалили инициализацию API клиента из теста
        request = CreateUserRequestSchema()
        response = public_users_client.create_user_api(request)
        response_data = CreateUserResponseSchema.model_validate_json(response.text)

        assert_status_code(response.status_code, HTTPStatus.OK)
        assert_create_user_response(request, response_data)

        validate_json_schema(response.json(), response_data.model_json_schema())

Здесь вместо явной инициализации API клиента в тесте мы передаем public_users_client как аргумент тестовой функции. Этот клиент создается автоматически с помощью фикстуры.

Преимущества:
- Удалили дублирующийся код: Теперь нам не нужно вручную инициализировать API клиент в каждом тесте.
- Тест стал чище: Он сосредоточен только на логике создания пользователя, а не на настройке окружения.
- Проще изменять реализацию API клиента: Если изменится способ инициализации PublicUsersClient, достаточно поправить только фикстуру, а не каждый тест.

Применение фикстур public_users_client и authentication_client в тесте test_login

До использования фикстур:

    from http import HTTPStatus

    import pytest

    from clients.authentication.authentication_client import get_authentication_client
    from clients.authentication.authentication_schema import LoginRequestSchema, LoginResponseSchema
    from clients.users.public_users_client import get_public_users_client
    from clients.users.users_schema import CreateUserRequestSchema
    from tools.assertions.authentication import assert_login_response
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.regression
    @pytest.mark.authentication
    def test_login():
        public_users_client = get_public_users_client()  # Явная инициализация API клиента пользователей
        authentication_client = get_authentication_client()  # Явная инициализация API клиента аутентификации

        create_user_request = CreateUserRequestSchema()
        public_users_client.create_user(create_user_request)

        login_request = LoginRequestSchema(
            email=create_user_request.email,
            password=create_user_request.password
        )
        login_response = authentication_client.login_api(login_request)
        login_response_data = LoginResponseSchema.model_validate_json(login_response.text)

        assert_status_code(login_response.status_code, HTTPStatus.OK)
        assert_login_response(login_response_data)

        validate_json_schema(login_response.json(), login_response_data.model_json_schema())

В этом варианте теста test_login приходится вручную инициализировать два API клиента (public_users_client и authentication_client). Это усложняет тест и увеличивает дублирование кода.

После использования фикстур:

    from http import HTTPStatus

    import pytest

    from clients.authentication.authentication_client import AuthenticationClient
    from clients.authentication.authentication_schema import LoginRequestSchema, LoginResponseSchema
    from clients.users.public_users_client import PublicUsersClient
    from clients.users.users_schema import CreateUserRequestSchema
    from tools.assertions.authentication import assert_login_response
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.regression
    @pytest.mark.authentication
    def test_login(public_users_client: PublicUsersClient, authentication_client: AuthenticationClient):
        # Удалили инициализацию API клиентов из теста
        create_user_request = CreateUserRequestSchema()
        public_users_client.create_user(create_user_request)  # Используем API клиента пользователей

        login_request = LoginRequestSchema(
            email=create_user_request.email,
            password=create_user_request.password
        )
        login_response = authentication_client.login_api(login_request)  # Используем API клиента аутентификации
        login_response_data = LoginResponseSchema.model_validate_json(login_response.text)

        assert_status_code(login_response.status_code, HTTPStatus.OK)
        assert_login_response(login_response_data)

        validate_json_schema(login_response.json(), login_response_data.model_json_schema())

Преимущества:
- Тест стал чище: Удалена явная инициализация клиентов.
- Уменьшение дублирования: Теперь не нужно повторять код создания клиентов в каждом тесте.
- Лучше поддерживаемость: Если способ создания клиентов изменится, нужно будет обновить только фикстуры, а не каждый тест.


Что нам это дало?

Использование фикстур public_users_client и authentication_client значительно упростило код автотестов:

1. Больше не нужно инициализировать API клиенты в каждом тесте.Теперь они создаются автоматически через фикстуры, а тесты сосредоточены только на проверке логики.
2. Код тестов стал чище и короче. Тесты теперь выглядят более читаемыми и понятными.
3. Уменьшилось количество повторяющегося кода. Если в будущем потребуется добавить новый API клиент, мы просто создадим новую фикстуру, и тесты останутся неизменными.
4. Упрощенная поддержка в будущем. Если способ инициализации клиентов изменится (например, добавится кеширование или другая логика), достаточно обновить фикстуры, а не все тесты.

На текущем этапе тесты довольно простые, но в дальнейшем может возникнуть ситуация, когда в одном тесте понадобится сразу 3-5 API клиентов. В таком случае фикстуры будут особенно полезны, так как позволят избежать дублирования и усложнения кода.


5. Запускаем автотесты и проверяем их работу

Теперь, когда мы внесли изменения и использовали фикстуры для инициализации API клиентов, давайте убедимся, что автотесты работают корректно.

Для этого выполним следующую команду:
    python -m pytest -m regression -s -v

При успешном выполнении автотестов в консоли появится примерно такой вывод:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -m regression -s -v
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0
    collected 5 items / 3 deselected / 2 selected

    tests/test_authentication.py::test_login PASSED
    tests/test_users.py::test_create_user PASSED

    ================================================================ 2 passed, 3 deselected in 0.99s =================================================================

Если тесты успешно прошли, значит, фикстуры работают правильно, а код тестов корректен. Теперь нам не нужно вручную инициализировать API клиенты в каждом тесте, что делает код чище, а запуск тестов более удобным.