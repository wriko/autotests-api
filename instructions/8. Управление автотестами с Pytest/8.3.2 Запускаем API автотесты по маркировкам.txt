Запускаем API автотесты по маркировкам
Ссылки:
Официальная документация Pytest по регистрации маркировок - https://docs.pytest.org/en/stable/example/markers.html#registering-markers


Начнем с автотеста создания пользователя test_create_user, добавим к нему две маркировки:
 1. regression — автотест относится к регрессионным тестам
 2. users — автотест относится к функциональности работы с пользователями

В реальных проектах вам предстоит самостоятельно создавать названия маркировок. Этот процесс крайне важен, поскольку от правильного выбора и структурирования маркировок зависит качество и эффективность автотестов.
Поэтому всегда уделяйте особое внимание их названию и организации
-----------------------------------------------------------
1. Добавим маркировку к автотесту test_create_user
-----------------------------------------------------------
Откроем файл /tests/test_users.py и добавим маркировки к тесту test_create_user:

    from http import HTTPStatus

    import pytest  # Импортируем библиотеку pytest

    from clients.users.public_users_client import get_public_users_client
    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema
    from tools.assertions.users import assert_create_user_response


    @pytest.mark.users  # Добавили маркировку users
    @pytest.mark.regression  # Добавили маркировку regression
    def test_create_user():
        public_users_client = get_public_users_client()

        request = CreateUserRequestSchema()
        response = public_users_client.create_user_api(request)
        response_data = CreateUserResponseSchema.model_validate_json(response.text)

        assert_status_code(response.status_code, HTTPStatus.OK)
        assert_create_user_response(request, response_data)

        validate_json_schema(response.json(), response_data.model_json_schema())

-----------------------------------------------------------
2. Запустим автотест создания пользователя по маркировке users
-----------------------------------------------------------
    python -m pytest -m users -s -v

Пример вывода в консоль при успешном запуске команды будет выглядеть так:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -m users -s -v
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0
    collected 5 items / 4 deselected / 1 selected

    tests/test_users.py::test_create_user PASSED

    ======================================================================== warnings summary ========================================================================
    tests/test_users.py:12
      /Users/username/Documents/autotests-api/tests/test_users.py:12: PytestUnknownMarkWarning: Unknown pytest.mark.users - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
        @pytest.mark.users  # Добавили маркировку users

    tests/test_users.py:13
      /Users/username/Documents/autotests-api/tests/test_users.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.regression - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
        @pytest.mark.regression  # Добавили маркировку regression

    -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
    ========================================================== 1 passed, 4 deselected, 2 warnings in 0.63s ===========================================================


В этом запуске был использован флаг -m users, который указывает, что pytest должен выполнять только те тесты, которые имеют маркировку users. В результате выполнения команды мы видим следующее:

Собрано 5 тестов: Из пяти тестов, которые были найдены в проекте, один был выбран для выполнения, а четыре были отклонены (deselected). Это подтверждает, что фильтрация по маркировкам сработала корректно.
Тест: В файле tests/test_users.py был успешно выполнен один тест.
Лог также содержит два предупреждения, которые важны для понимания текущей ситуации с маркировками:

tests/test_users.py:12
  /Users/username/Documents/autotests-api/tests/test_users.py:12: PytestUnknownMarkWarning: Unknown pytest.mark.users - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.users  # Добавили маркировку users
Это предупреждение указывает на то, что маркировка users неизвестна pytest. Это может означать, что данная маркировка не была зарегистрирована в конфигурации pytest
-----------------------------------------------------------
3. Регистрация кастомных маркировок
-----------------------------------------------------------
Зачем регистрировать кастомные маркировки?

Когда вы используете кастомные маркировки, pytest может выдавать предупреждения, если эти маркировки не зарегистрированы. Это связано с тем, что pytest по умолчанию не знает о ваших кастомных метках и может воспринимать их как ошибки. Регистрируя маркировки в файле конфигурации pytest.ini, вы:

1. Избегаете предупреждений: Когда маркировка зарегистрирована, pytest не будет выдавать предупреждения о ней, и вы сможете сосредоточиться на написании и запуске тестов.

2. Улучшаете читаемость кода: Регистрация маркировок позволяет другим разработчикам, которые будут работать с вашим кодом, быстро понять, какие маркировки используются и для чего они предназначены.

3. Поддерживаете стандарты проекта: Это помогает поддерживать единый стиль и структуру тестов в команде, что особенно важно в крупных проектах с несколькими участниками.

Как добавить кастомные маркировки в pytest.ini?

Вставим следующие строки в файл pytest.ini:

    [pytest]
    # Это было добавлено в предыдущих уроках
    python_files = *_tests.py test_*.py
    python_classes = Test*
    python_functions = test_*
    # Регистрируем кастомные маркировки
    markers =
        users: Маркировка для тестов, связанных с пользователями.
        regression: Маркировка для регрессионных тестов.

Важно! Файл pytest.ini мы создавали в уроке Введение в Pytest

Теперь убедимся, что маркировки были успешно добавлены и pytest видит их. Для этого выполним команду, которая покажет все зарегистрированные маркировки:
    python -m pytest --markers

Пример вывода в консоль при успешном запуске команды будет выглядеть так:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest --markers
    @pytest.mark.users: Маркировка для тестов, связанных с пользователями.

    @pytest.mark.regression: Маркировка для регрессионных тестов.

    @pytest.mark.anyio: mark the (coroutine function) test to be run asynchronously via anyio.

    @pytest.mark.filterwarnings(warning): add a warning filter to the given test. see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings

    @pytest.mark.skip(reason=None): skip the given test function with an optional reason. Example: skip(reason="no way of currently testing this") skips the test.

    @pytest.mark.skipif(condition, ..., *, reason=...): skip the given test function if any of the conditions evaluate to True. Example: skipif(sys.platform == 'win32') skips the test if we are on the win32 platform. See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif

    @pytest.mark.xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict): mark the test function as an expected failure if any of the conditions evaluate to True. Optionally specify a reason for better reporting and run=False if you don't even want to execute the test function. If only specific exception(s) are expected, you can list them in raises, and if the test fails in other ways, it will be reported as a true failure. See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail

    @pytest.mark.parametrize(argnames, argvalues): call a test function multiple times passing in different arguments in turn. argvalues generally needs to be a list of values if argnames specifies only one name or a list of tuples of values if argnames specifies multiple names. Example: @parametrize('arg1', [1,2]) would lead to two calls of the decorated test function, one with arg1=1 and another with arg1=2.see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info and examples.

    @pytest.mark.usefixtures(fixturename1, fixturename2, ...): mark tests as needing all of the specified fixtures. see https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures

    @pytest.mark.tryfirst: mark a hook implementation function such that the plugin machinery will try to call it first/as early as possible. DEPRECATED, use @pytest.hookimpl(tryfirst=True) instead.

    @pytest.mark.trylast: mark a hook implementation function such that the plugin machinery will try to call it last/as late as possible. DEPRECATED, use @pytest.hookimpl(trylast=True) instead.


В начале вывода мы видим наши кастомные маркировки, значит pytest видит их. Теперь при запуске автотестов не должно быть предупреждений в консоли. Запустим автотесты еще раз:
    python -m pytest -m users -s -v

Пример вывода в консоль при успешном запуске команды будет выглядеть так:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -m users -s -v
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.5, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0
    collected 5 items / 4 deselected / 1 selected

    tests/test_users.py::test_create_user PASSED

    ================================================================ 1 passed, 4 deselected in 0.53s =================================================================

Теперь в консоли нет предупреждений о незарегистрированных маркировках