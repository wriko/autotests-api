 данном уроке мы разберём, как использовать декоратор pytest.mark.usefixtures для применения фикстур в автотестах. Он позволяет подключить одну или несколько фикстур к тестам или классам, даже если сами тесты их не указывают в параметрах.

1. Создадим файл test_usefixtures.py
.
└── autotests-api/
    └── tests/
        └── test_usefixtures.py
2. Добавим фикстуры в файл test_usefixtures.py
import pytest


# Фикстура для очистки данных из базы данных
@pytest.fixture
def clear_books_database():
    print("[FIXTURE] Удаляем все данные из базы данных")


# Фикстура для заполнения данных в базу данных
@pytest.fixture
def fill_books_database():
    print("[FIXTURE] Создаем новые данные в базе данных")

3. Подключим фикстуры с помощью pytest.mark.usefixtures
Использование pytest.mark.usefixtures позволяет нам подключить фикстуры к тестам или классам, даже если они явно не указаны в параметрах функции. Это упрощает работу, когда фикстуры используются только для выполнения действий перед тестами.

@pytest.mark.usefixtures('fill_books_database')
def test_read_all_books_in_library():
    ...


@pytest.mark.usefixtures(
    'clear_books_database',
    'fill_books_database'
)
class TestLibrary:
    def test_read_book_from_library(self):
        ...

    def test_delete_book_from_library(self):
        ...


4. Запустим автотесты и разберем, как работают фикстуры
Выполним команду:

python -m pytest -s -v -k "test_read_all_books_in_library or TestLibrary"
Пример вывода в консоль
=============================================================================== test session starts ===============================================================================
platform win32 -- Python 3.12.6, pytest-8.3.4, pluggy-1.5.0 -- C:\courses\autotests-api\venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\courses\autotests-api
configfile: pytest.ini
collected 31 items / 28 deselected / 3 selected

tests/test_usefixtures.py::test_read_all_books_in_library [FIXTURE] Создаем новые данные в базе данных
PASSED
tests/test_usefixtures.py::TestLibrary::test_read_book_from_library [FIXTURE] Удаляем все данные из базы данных
[FIXTURE] Создаем новые данные в базе данных
PASSED
tests/test_usefixtures.py::TestLibrary::test_delete_book_from_library [FIXTURE] Удаляем все данные из базы данных
[FIXTURE] Создаем новые данные в базе данных
PASSED

======================================================================== 3 passed, 28 deselected in 0.04s =========================================================================
Разберем работу фикстур
Тест 1: test_read_all_books_in_library
[FIXTURE] Создаем новые данные в базе данных
PASSED
fill_books_database: Эта фикстура добавляет новые данные в базу перед выполнением теста. Поскольку она подключена с помощью @pytest.mark.usefixtures, тест автоматически использует её.
Итог: В базе создаются данные, которые затем проверяются тестом test_read_all_books_in_library. Тест успешно завершается.
Тест 2: TestLibrary::test_read_book_from_library
[FIXTURE] Удаляем все данные из базы данных
[FIXTURE] Создаем новые данные в базе данных
PASSED
clear_books_database: Эта фикстура удаляет все существующие данные из базы перед выполнением теста, обеспечивая чистое окружение.
fill_books_database: После очистки базы эта фикстура добавляет новые данные, которые используются тестом.
Итог: Благодаря работе фикстур, тест test_read_book_from_library выполняется в изолированной базе с актуальными данными. Тест завершается успешно.
Тест 3: TestLibrary::test_delete_book_from_library
[FIXTURE] Удаляем все данные из базы данных
[FIXTURE] Создаем новые данные в базе данных
PASSED
clear_books_database: Аналогично предыдущему тесту, база очищается перед запуском теста.
fill_books_database: После очистки в базу добавляются новые данные.
Итог: Тест test_delete_book_from_library получает чистое окружение с актуальными данными. Это позволяет проверить удаление книги из базы данных в изолированном контексте. Тест успешно завершается.
Фикстуры в данном примере помогают:

Обеспечить изоляцию данных: Каждое выполнение тестов начинается либо с добавления данных в базу (fill_books_database), либо с её очистки и последующего заполнения (clear_books_database и fill_books_database).
Упростить подключение действий: Использование @pytest.mark.usefixtures позволяет подключать фикстуры без изменения сигнатуры тестов.
Автоматизировать подготовку окружения: Тесты выполняются в предсказуемых условиях, что повышает надёжность результатов.
Заключение
pytest.mark.usefixtures позволяет подключать фикстуры к тестам или классам без необходимости указывать их в параметрах. Это упрощает тесты и делает код более читаемым.

Ключевые преимущества:

Подключение фикстур без изменения сигнатуры тестов.
Гибкость: фикстуры можно подключить к отдельным тестам или целым классам.
Улучшение читаемости кода, когда фикстуры используются только для выполнения вспомогательных действий.
Использование pytest.mark.usefixtures особенно полезно для выполнения действий, которые необходимы перед тестами, но не возвращают результат, например, отправка аналитики или настройка окружения