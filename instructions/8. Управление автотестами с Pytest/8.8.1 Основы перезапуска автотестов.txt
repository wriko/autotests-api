Основы перезапуска автотестов


В реальной практике часто встречаются нестабильные автотесты, которые могут падать не из-за багов, а по причине проблем с инфраструктурой или других внешних факторов.
Обычно компании не хотят тратить значительные средства на создание мощной тестовой инфраструктуры, поэтому тестовые контуры часто представляют собой слабые и загруженные ресурсы.
Это приводит к тому, что некоторые страницы приложения могут загружаться неопределённо долго — сегодня 5 секунд, завтра 30, а послезавтра 15.
В совокупности такие факторы делают автотесты, особенно UI-тесты, нестабильными и склонными к падению из-за задержек на стороне инфраструктуры.
Для повышения стабильности и преодоления временных сбоев существует такая практика, как перезапуски автотестов.
Суть в том, что упавший тест запускается повторно, пока не пройдет успешно либо не исчерпает заданное количество попыток.

Главные правила перезапуска автотестов:

1. Разумное количество попыток. Перезапуск не должен превышать двух-трёх попыток. Перезапускать тест по 10 или 20 раз не имеет смысла — это только замедлит общее время выполнения автотестов.
Если тест не прошёл после 2–3 попыток, значит, скорее всего, причина падения связана с багом или другой серьёзной проблемой, а не временным сбоем.

2. Перезапуск только нестабильных тестов. Изначально перезапуски не нужны, если автотесты стабильны.
Перед добавлением перезапуска к конкретному тесту необходимо проанализировать причины падений.
Если причина в нестабильной инфраструктуре, тогда перезапуски могут помочь. Однако не стоит добавлять перезапуски ко всем тестам без разбора.

3. Предотвращение скрытия потенциальных проблем. Иногда перезапуски могут маскировать реальную проблему.
Например, когда в системе возникает гонка данных — ситуация, при которой данные не успевают синхронизироваться.
Это происходит, когда, например, пользователь нажал кнопку регистрации, но запись в базе данных ещё не появилась, а система уже пытается проверить эти данные и отправить письмо пользователю.
Такая ошибка может проявляться не всегда: в одном запуске гонка данных может возникнуть, а в другом — нет.
Если тест перезапускается и проблема не проявляется, то её можно пропустить, хотя на самом деле это баг.
Поэтому важно осторожно выбирать тесты для перезапуска, чтобы не скрывать потенциальные проблемы.


Перезапуск автотестов в pytest
Ссылки:

pytest-rerunfailures


Для перезапуска автотестов в pytest часто используется плагин pytest-rerunfailures https://github.com/pytest-dev/pytest-rerunfailures. Давайте разберём, как правильно настроить и использовать этот плагин для автоматических перезапусков нестабильных тестов

1. Установка pytest-rerunfailures
Выполните следующую команду в корне проекта autotests-api:

pip install pytest-rerunfailures


2. Создание файла test_reruns.py
Создайте тестовый файл test_reruns.py:

.
└── tests/
    └── test_reruns.py

3. Добавление теста с перезапусками
В файл test_reruns.py добавьте следующий тест:

    import random

    import pytest


    @pytest.mark.flaky(reruns=3, reruns_delay=2)  # Перезапуски реализуеются на уровне маркировки flaky
    def test_reruns():
        assert random.choice([True, False])  # Случайный выбор для демонстрации нестабильного теста

В этом примере параметры маркировки @pytest.mark.flaky означают следующее:

reruns=3 — количество перезапусков. Если тест упадёт, он будет перезапущен до 3 раз.
reruns_delay=2 — задержка между перезапусками в секундах.
Здесь конструкция assert random.choice([True, False]) случайным образом выбирает True или False, что создаёт нестабильное поведение теста. Это специально сделано для демонстрации работы перезапусков.

Важно! Маркировка flaky подчёркивает, что тест является нестабильным. В практике тесты, склонные к случайным падениям, называют "flaky" (флакающими).


4. Запуск теста с перезапусками
python -m pytest -k "test_reruns" -s -v
Пример вывода в консоль при успешном запуске команды будет выглядеть так:

(.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "test_reruns" -s -v
====================================================================== test session starts =======================================================================
platform darwin -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/username/Documents/autotests-api
configfile: pytest.ini
plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
collected 64 items / 63 deselected / 1 selected

tests/pytest/test_reruns.py::test_reruns RERUN
tests/pytest/test_reruns.py::test_reruns PASSED

=========================================================== 1 passed, 41 deselected, 1 rerun in 0.09s ============================================================
Результат выполнения с перезапуском:

tests/pytest/test_reruns.py::test_reruns RERUN
tests/pytest/test_reruns.py::test_reruns PASSED
RERUN — тест test_reruns изначально завершился неудачей (например, из-за нестабильности системы или временного сбоя) и был автоматически перезапущен благодаря плагину rerunfailures.
PASSED — после перезапуска тест успешно прошёл. Это демонстрирует, как перезапуск может помочь устранить временные или случайные сбои, не связанные с ошибками кода.
Итоговые результаты:

1 passed, 41 deselected, 1 rerun in 0.09s
1 passed — один тест успешно прошёл.
1 rerun — один тест потребовал перезапуска и успешно завершился при повторном выполнении.
Совет: Если тест успешно пройдёт с первого раза, перезапустите его несколько раз, чтобы проверить поведение при падениях.



Резюме
Таким образом, с помощью маркировки @pytest.mark.flaky можно добавлять перезапуски к автотестам. Как обсуждалось ранее, перезапуски следует добавлять точечно, только для тестов, которые нестабильны из-за внешних факторов, например, инфраструктурных ограничений, чтобы избежать скрытия реальных ошибок.



Продолжаем знакомиться с перезапусками
1. Использование @pytest.mark.flaky для классов
Маркировка @pytest.mark.flaky также может быть использована для тестовых классов. Например, добавим тестовый класс TestReruns в файл test_reruns.py:

import random

import pytest


@pytest.mark.flaky(reruns=3, reruns_delay=2)  # Перезапуски реализуеются на уровне маркировки flaky
def test_reruns():
    assert random.choice([True, False])


@pytest.mark.flaky(reruns=3, reruns_delay=2)  # Добавили тестовый класс
class TestReruns:
    def test_rerun_1(self):
        assert random.choice([True, False])

    def test_rerun_2(self):
        assert random.choice([True, False])
Запустим команду:

python -m pytest -k "TestReruns" -s -v
Пример вывода в консоль при успешном запуске команды будет выглядеть так:

(.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "TestReruns" -s -v
====================================================================== test session starts =======================================================================
platform darwin -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/username/Documents/autotests-api
configfile: pytest.ini
plugins: Faker-36.2.2, anyio-4.8.0, rerunfailures-15.0
collected 44 items / 42 deselected / 2 selected

tests/test_reruns.py::TestReruns::test_rerun_1 RERUN
tests/test_reruns.py::TestReruns::test_rerun_1 RERUN
tests/test_reruns.py::TestReruns::test_rerun_1 PASSED
tests/test_reruns.py::TestReruns::test_rerun_2 RERUN
tests/test_reruns.py::TestReruns::test_rerun_2 RERUN
tests/test_reruns.py::TestReruns::test_rerun_2 PASSED

=========================================================== 2 passed, 42 deselected, 4 rerun in 8.08s ============================================================
2. Использование @pytest.mark.flaky с условиями
В @pytest.mark.flaky можно задать условия для перезапуска, аналогично маркировке @pytest.mark.skipif. Добавим тест test_rerun_with_condition в файл test_reruns.py:

import random

import pytest

PLATFORM = "Linux"


@pytest.mark.flaky(reruns=3, reruns_delay=2)  # Перезапуски реализуеются на уровне маркировки flaky
def test_reruns():
    assert random.choice([True, False])


@pytest.mark.flaky(reruns=3, reruns_delay=2)
class TestReruns:
    def test_rerun_1(self):
        assert random.choice([True, False])

    def test_rerun_2(self):
        assert random.choice([True, False])


@pytest.mark.flaky(reruns=3, reruns_delay=2, condition=PLATFORM == "Windows")  # Перезапуск при выполнении условия
def test_rerun_with_condition():
    assert random.choice([True, False])
В этом примере автотест test_rerun_with_condition будет перезапущен только в случае выполнения условия PLATFORM == "Windows". Такое условие полезно для перезапуска автотестов только в определённой среде, например, на dev-окружении.

Запустим команду:

python -m pytest -k "test_rerun_with_condition" -s -v
сли условие PLATFORM == "Windows" не выполняется, тест не будет перезапущен:

============================================================================ FAILURES ============================================================================
___________________________________________________________________ test_rerun_with_condition ____________________________________________________________________

    @pytest.mark.flaky(condition=PLATFORM == "Windows")  # Можно завать определенное условие
    def test_rerun_with_condition():
>       assert random.choice([True, False])
E       assert False
E        +  where False = choice([True, False])
E        +    where choice = random.choice

tests/test_reruns.py:24: AssertionError
==================================================================== short test summary info =====================================================================
FAILED tests/test_reruns.py::test_rerun_with_condition - assert False
 +  where False = choice([True, False])
 +    where choice = random.choice
================================================================ 1 failed, 45 deselected in 0.12s ================================================================