В данном шаге напишем несколько простых автотестов и фикстур, чтобы лучше понять принцип их работы
------------------------------------------
1. Создадим файл test_fixtures.py
------------------------------------------
.
└── autotests-api/
    └── tests/
        └── test_fixtures.py

------------------------------------------
2. В файл test_fixtures.py поместим код с фикстурами
------------------------------------------
    import pytest


    # Фикстура, которая будет автоматически вызываться для каждого теста
    @pytest.fixture(autouse=True)
    def send_analytics_data():
        print("[AUTOUSE] Отправляем данные в сервис аналитики")


    # Фикстура для инициализации настроек автотестов на уровне сессии
    @pytest.fixture(scope='session')
    def settings():
        print("[SESSION] Инициализируем настройки автотестов")


    # Фикстура для создания данных пользователя, которая будет выполняться один раз на класс тестов
    @pytest.fixture(scope='class')
    def user():
        print("[CLASS] Создаем данные пользователя один раз на тестовый класс")


    # Фикстура для инициализации API клиента, выполняющаяся для каждого теста
    @pytest.fixture(scope='function')
    def users_client():
        print("[FUNCTION] Создаем API клиент на каждый автотест")


    class TestUserFlow:
        def test_user_can_login(self, settings, user, users_client):
            pass

        def test_user_can_create_course(self, settings, user, users_client):
            pass


    class TestAccountFlow:
        def test_user_account(self, settings, user, users_client):
            pass

Данный пример наглядно показывает:
 1. Какие скоупы фикстур могут быть
 2. Какие скоупы фикстур чаще всего используются
 3. В каких случаях, могут быть использованы те или иные скоупы
 4. Также показывает, как правильно объявлять и использовать фикстуры в автотестах

------------------------------------------
Запустим автотесты и разберем работу фикстур
------------------------------------------

Давайте запустим автотесты выше:
    python -m pytest -k "TestUserFlow or TestAccountFlow" -s -v

Пример вывода в консоль при успешном запуске команды будет выглядеть так:

    (.venv) username@ip-8-8-8-8 autotests-api % python -m pytest -k "TestUserFlow or TestAccountFlow" -s -v
    ====================================================================== test session starts =======================================================================
    platform darwin -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0 -- /Users/username/Documents/autotests-api/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /Users/username/Documents/autotests-api
    configfile: pytest.ini
    plugins: Faker-36.2.2, anyio-4.8.0
    collected 14 items / 11 deselected / 3 selected

    tests/test_fixtures.py::TestUserFlow::test_user_can_login [SESSION] Инициализируем настройки автотестов
    [CLASS] Создаем данные пользователя один раз на тестовый класс
    [AUTOUSE] Отправляем данные в сервис аналитики
    [FUNCTION] Создаем API клиент на каждый автотест
    PASSED
    tests/test_fixtures.py::TestUserFlow::test_user_can_create_course [AUTOUSE] Отправляем данные в сервис аналитики
    [FUNCTION] Создаем API клиент на каждый автотест
    PASSED
    tests/test_fixtures.py::TestAccountFlow::test_user_account [CLASS] Создаем данные пользователя один раз на тестовый класс
    [AUTOUSE] Отправляем данные в сервис аналитики
    [FUNCTION] Создаем API клиент на каждый автотест
    PASSED

    ================================================================ 3 passed, 11 deselected in 0.01s ================================================================


Разберем работу фикстур

Тест 1: test_user_can_login
tests/test_fixtures.py::TestAccountFlow::test_user_account [CLASS] Создаем данные пользователя один раз на тестовый класс
[AUTOUSE] Отправляем данные в сервис аналитики
[FUNCTION] Создаем API клиент на каждый автотест
PASSED
Инициализация настроек: Фикстура settings() (область видимости session) вызывается один раз перед выполнением всех тестов в сессии. Это важно для подготовки глобальных настроек, которые нужны для всех тестов.

Создание данных пользователя: Фикстура user() (область видимости class) вызывается один раз для всех тестов в классе TestUserFlow. Это обеспечивает, что данные пользователя создаются один раз и могут быть использованы всеми тестами в этом классе.

Отправка данных в сервис аналитики: Фикстура send_analytics_data() (область видимости autouse=True) автоматически вызывается перед каждым тестом. Это гарантирует, что данные всегда отправляются в сервис аналитики.

Инициализация API клиента: Фикстура users_client() (область видимости function) также вызывается перед каждым тестом, создавая новый экземпляр API клиента для изолированного выполнения каждого теста.

Тест 2: test_user_can_create_course
tests/test_fixtures.py::TestUserFlow::test_user_can_create_course [AUTOUSE] Отправляем данные в сервис аналитики
[FUNCTION] Создаем API клиент на каждый автотест
PASSED
Работа фикстур: В этом тесте снова вызываются фикстуры send_analytics_data() и users_client(). Однако фикстуры settings() и user() не вызываются повторно, так как они уже были вызваны в первом тесте. Это демонстрирует, как фикстуры с разной областью видимости могут быть переиспользованы.

Тест 3: test_user_account
tests/test_fixtures.py::TestAccountFlow::test_user_account [CLASS] Создаем данные пользователя один раз на тестовый класс
[AUTOUSE] Отправляем данные в сервис аналитики
[FUNCTION] Создаем API клиент на каждый автотест
PASSED
Создание данных пользователя: Поскольку фикстура user() была определена с областью видимости class, она вызывается для класса TestAccountFlow, обеспечивая создание тех же данных пользователя для этого класса. Это позволяет использовать единые данные в нескольких классах тестов, если они необходимы.

Работа фикстур: Фикстуры send_analytics_data() и users_client() также вызываются для этого теста, обеспечивая корректное выполнение необходимых шагов.

------------------------------------------
Заключение
------------------------------------------
Фикстуры в pytest обеспечивают:
 1. Оптимизацию повторного использования кода: Вы можете использовать фикстуры с разной областью видимости для различных сценариев тестирования, что сокращает дублирование кода.
 2. Упрощение управления состоянием: Разные области видимости фикстур (сессия, класс, функция) позволяют более гибко управлять состоянием между тестами.
 3. Чистоту и изоляцию тестов: Каждое тестирование получает необходимое окружение без взаимодействия с другими тестами, что повышает надежность и предсказуемость результатов.
 
Таким образом, использование фикстур позволяет структурировать тесты и управлять их окружением, что особенно важно при масштабировании тестового набора.