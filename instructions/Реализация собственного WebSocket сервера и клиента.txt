В данном уроке мы разберем создание WebSocket-сервера и клиента на Python, используя библиотеку websockets. Мы научимся:

 - Работать с асинхронным кодом в Python.
 - Создавать WebSocket-сервер для приема и обработки сообщений.
 - Подключаться к серверу через WebSocket-клиент и отправлять данные.

========================================================================================================================
                    Что такое async и await в Python?
========================================================================================================================
1. Асинхронное программирование в Python
async и await в Python — это ключевые слова, используемые для написания асинхронного кода, который позволяет выполнять несколько задач параллельно без блокировки основного потока выполнения.
До появления async/await в Python использовались многопоточность (threads) и многопроцессность (multiprocessing), но они не всегда удобны для задач, связанных с I/O (например, сетевые запросы, чтение файлов, работа с базами данных). Асинхронный код решает эту проблему, позволяя одной программе выполнять несколько операций ввода-вывода (I/O) одновременно.

2.  Основные понятия async и await
 - async перед объявлением функции превращает её в корутину (асинхронную функцию).
 - await приостанавливает выполнение корутины, пока не завершится асинхронная операция.
Простой пример:

    import asyncio

    async def fetch_data():
        print("Начинаем загрузку...")
        await asyncio.sleep(2)  # Имитация задержки I/O
        print("Данные загружены")
        return {"data": "Пример данных"}

    async def main():
        result = await fetch_data()
        print(result)

    asyncio.run(main())

3. Как работает async и await?

Python использует event loop (цикл событий), который управляет выполнением асинхронных задач. Когда код встречает await, выполнение приостанавливается, но другие задачи в event loop продолжают выполняться. Это позволяет эффективно обрабатывать большое количество запросов без блокировки.

========================================================================================================================
                    Почему websockets использует async и await?
========================================================================================================================

Библиотека websockets предназначена для работы с WebSocket-соединениями. WebSocket — это двусторонний (full-duplex) протокол, позволяющий серверу и клиенту обмениваться сообщениями в реальном времени без постоянных повторных HTTP-запросов.

1. WebSockets требуют постоянного соединения
В отличие от стандартных HTTP-запросов, которые завершаются после получения ответа, WebSocket-соединение остаётся открытым, пока клиент или сервер его не закроет. Это означает, что код должен:

Поддерживать непрерывное соединение.
Обрабатывать множественные события (входящие и исходящие сообщения).
Не блокировать выполнение других задач.
Асинхронный код на async/await идеально подходит для этой задачи.

2. Почему WebSockets без async/await — это плохо?
Если бы мы писали такой код без асинхронности, пришлось бы использовать потоки (threading) или процессы (multiprocessing), что гораздо менее эффективно, особенно при большом количестве подключений.

С помощью async/await:

Нет блокировки — сервер может принимать и обрабатывать тысячи соединений одновременно.
Высокая производительность — asyncio позволяет экономно использовать ресурсы.
Простота кода — без необходимости писать сложную многопоточную логику.
Итог
Библиотека websockets использует async/await, потому что WebSocket требует постоянного двустороннего соединения, а асинхронное программирование позволяет обрабатывать тысячи клиентов одновременно без потерь производительности.

========================================================================================================================
                    Установка библиотеки
========================================================================================================================
Перед началом установим библиотеку websockets:

pip install websockets

========================================================================================================================
                    Реализация WebSocket-сервера
========================================================================================================================

Сервер будет принимать сообщения от клиентов и отправлять обратно ответ.

В корне проекта autotests-api создадим файл websocket_server.py, который будет содержать реализацию сервера:

.
└── autotests-api/
    └── websocket_server.py
Открываем websocket_server.py и добавляем следующий код:

    import asyncio

    import websockets
    from websockets import ServerConnection


    # Обработчик входящих сообщений
    async def echo(websocket: ServerConnection):
        async for message in websocket:
            print(f"Получено сообщение: {message}")
            response = f"Сервер получил: {message}"
            await websocket.send(response)  # Отправляем ответ


    # Запуск WebSocket-сервера на порту 8765
    async def main():
        server = await websockets.serve(echo, "localhost", 8765)
        print("WebSocket сервер запущен на ws://localhost:8765")
        await server.wait_closed()


    asyncio.run(main())

------------------------------------------
1. Импорт необходимых модулей
------------------------------------------
    import asyncio  # Импортируем asyncio для работы с асинхронными операциями

    import websockets  # Импортируем библиотеку для работы с WebSockets

asyncio — встроенная в Python библиотека для асинхронного программирования, позволяет управлять задачами и event loop.
websockets — библиотека для работы с WebSocket-протоколом, поддерживает асинхронный обмен сообщениями.

------------------------------------------
2. Функция обработчика WebSocket-соединения
------------------------------------------
    # Обработчик входящих сообщений
    async def echo(websocket: websockets.ServerConnection):
        async for message in websocket:  # Асинхронно обрабатываем входящие сообщения
            print(f"Получено сообщение: {message}")  # Логируем полученное сообщение

            response = f"Сервер получил: {message}"  # Формируем ответное сообщение
            await websocket.send(response)  # Отправляем ответ клиенту


websocket: ServerConnection — это объект соединения с клиентом.
async for message in websocket — обрабатывает поток входящих сообщений в асинхронном режиме.
await websocket.send(response) — отправляет ответное сообщение клиенту.

Что здесь важно?

 - Функция echo бесконечно читает сообщения от клиента.
 - Если клиент присылает новое сообщение, оно сразу обрабатывается.
 - Сервер отвечает клиенту на каждое сообщение.

 ------------------------------------------
3. Запуск WebSocket-сервера
------------------------------------------

    # Запуск WebSocket-сервера на порту 8765
    async def main():
        server = await websockets.serve(echo, "localhost", 8765)  # Запускаем сервер
        print("WebSocket сервер запущен на ws://localhost:8765")  # Выводим сообщение о запуске

        await server.wait_closed()  # Ожидаем закрытия сервера (обычно он работает вечно)
    websockets.serve(echo, "localhost", 8765) Создаёт WebSocket-сервер, который слушает соединения на localhost:8765 и использует echo в качестве обработчика сообщений.
    await server.wait_closed() Этот вызов ждёт завершения работы сервера. Но сервер WebSocket обычно работает вечно, поэтому он просто ожидает новых соединений.

------------------------------------------
4. Запуск основного async кода
------------------------------------------
    asyncio.run(main())  # Запускаем асинхронный код

- asyncio.run(main()) — это точка входа в асинхронное приложение. Она запускает main(), которое создаёт сервер и удерживает его в рабочем состоянии.

------------------------------------------
Итоговый процесс работы сервера
------------------------------------------
Этот код создаёт WebSocket-сервер, который:

1. Слушает порт 8765.
2. Принимает входящие соединения от клиентов.
3. Читает входящие сообщения и логирует их.
4. Отправляет ответ клиенту.
5. Работает бесконечно, пока не будет остановлен вручную.
6. Теперь сервер можно запустить командой:
    python -m websocket_server

Вывод в консоли:
    WebSocket сервер запущен на ws://localhost:8765

WebSocket сервер готов к приему сообщений!


========================================================================================================================
                    Реализация WebSocket-клиента
========================================================================================================================
Теперь создадим клиента, который подключится к серверу и отправит сообщение.

В корне проекта autotests-api создадим файл websocket_client.py, который будет содержать реализацию клиента:

.
└── autotests-api/
    ├── websocket_server.py
    └── websocket_client.py
 Открываем websocket_client.py и добавляем следующий код:

    import asyncio

    import websockets


    async def client():
        uri = "ws://localhost:8765"  # Адрес сервера
        async with websockets.connect(uri) as websocket:
            message = "Привет, сервер!"  # Сообщение, которое отправит клиент
            print(f"Отправка: {message}")
            await websocket.send(message)  # Отправляем сообщение

            response = await websocket.recv()  # Получаем ответ от сервера
            print(f"Ответ от сервера: {response}")


    asyncio.run(client())

------------------------------------------
1. Функция клиента
------------------------------------------
    async def client():
        uri = "ws://localhost:8765"  # Адрес WebSocket-сервера
        async with websockets.connect(uri) as websocket:  # Устанавливаем соединение с сервером

 - uri = "ws://localhost:8765" — указываем адрес WebSocket-сервера, к которому клиент будет подключаться.
 - async with websockets.connect(uri) as websocket:
    - Открывает WebSocket-соединение.
    - Используем async with, чтобы соединение автоматически закрылось после завершения работы клиента.
    - Переменная websocket представляет соединение с сервером.

------------------------------------------
2. Отправка сообщения серверу
------------------------------------------
        message = "Привет, сервер!"  # Сообщение, которое отправит клиент
        print(f"Отправка: {message}")
        await websocket.send(message)  # Асинхронно отправляем сообщение серверу

 - message = "Привет, сервер!" — задаём текст сообщения.
 - await websocket.send(message) — отправляем это сообщение серверу.
 - print(f"Отправка: {message}") — логируем отправленное сообщение в консоль.

------------------------------------------
3. Получение ответа от сервера
------------------------------------------
        response = await websocket.recv()  # Асинхронно получаем ответ от сервера
        print(f"Ответ от сервера: {response}")  # Логируем полученный ответ

 - await websocket.recv() — клиент ожидает получения данных от сервера.
 - print(f"Ответ от сервера: {response}") — выводим ответ сервера в консоль.

Как это работает?

 - После отправки сообщения клиент ждёт ответ от сервера.
 - Сервер в это время обрабатывает сообщение и отправляет ответ обратно.
 - Клиент получает ответ и выводит его.

------------------------------------------
4. Запуск WebSocket-клиента
------------------------------------------
    asyncio.run(client())  # Запускаем асинхронную функцию клиента

 - asyncio.run(client()) — запускает клиентскую функцию client(), которая:

     - Устанавливает соединение с сервером.
     - Отправляет сообщение.
     - Получает ответ.
     - Закрывает соединение.


Итоговый процесс работы клиента:

Этот код создаёт WebSocket-клиента, который:

-Подключается к серверу на ws://localhost:8765.
-Отправляет сообщение "Привет, сервер!".
-Ждёт ответ от сервера.
-Выводит ответ в консоль.
-Автоматически закрывает соединение после завершения работы.
-Теперь клиент можно запустить командой:

    python -m websocket_client
Вывод в консоли:

    Отправка: Привет, сервер!
    Ответ от сервера: Сервер получил: Привет, сервер!

Важно! Перед запуском клиента убедитесь, что WebSocket-сервер запущен, иначе клиент не сможет установить соединение.


----------------------------------------
Реализация WebSocket-клиента через браузер
-----------------------------------------
Мы также можем подключиться к WebSocket-серверу напрямую через браузер.
Для этого откройте любой браузер, например Google Chrome, и выполните следующие шаги:

1. Откройте DevTools (Инструменты разработчика) с помощью сочетания клавиш:
    Windows/Linux: F12 или Ctrl + Shift + I
    Mac: Cmd + Option + I
2. Перейдите во вкладку Console (Консоль).
3. Вставьте следующий JavaScript-код и нажмите Enter:
    // Создаём подключение к WebSocket-серверу по адресу ws://localhost:8765
    const websocket = new WebSocket("ws://localhost:8765")

    // Добавляем обработчик входящих сообщений от сервера
    websocket.onmessage = (message) => console.log(`Получили сообщение от сервера: "${message.data}"`)

Разбор кода:
    const websocket = new WebSocket("ws://localhost:8765");

         - Создаёт новое WebSocket-соединение с сервером, работающим на ws://localhost:8765.
         - Если сервер доступен, соединение будет установлено.

    websocket.onmessage = (message) => console.log(...)

        - Устанавливает обработчик событий для входящих сообщений.
        - Когда сервер отправит сообщение, оно будет автоматически выведено в консоль.
        - message.data содержит текст полученного сообщения.

Проверка соединения:
После выполнения кода WebSocket-соединение будет установлено.
Вы можете проверить это во вкладке Network → WS (WebSocket):

Откройте DevTools (F12 → вкладка Network).
Перейдите в подраздел WS (WebSockets).
Найдите подключение к ws://localhost:8765 и откройте его.
Вы увидите историю обмена сообщениями с сервером.
Скриншот ниже демонстрирует, как это выглядит в браузере (см. вкладку Network → WS).


Отправка сообщения на сервер:
Теперь мы можем отправить сообщение на сервер напрямую из браузера, выполнив следующий код в консоли:

websocket.send("Привет из браузера!")
Что происходит?

Этот код отправляет строку "Привет из браузера!" на WebSocket-сервер.
Сервер получает сообщение, обрабатывает его и отправляет ответ обратно.
При успешном выполнении запроса в консоли появится ответ от сервера:

Получили сообщение от сервера: "Сервер получил: Привет из браузера!"


Просмотр обмена данными в браузере:
Если снова открыть вкладку Network → WS, можно увидеть:

Отправленное сообщение "Привет из браузера!".
Ответ от сервера "Сервер получил: Привет из браузера!".
Визуальный пример на скриншоте ниже показывает процесс отправки и получения сообщений.


Итоговый процесс работы клиента через браузер
Теперь мы знаем, как:

Подключиться к WebSocket-серверу через браузер.
Прослушивать входящие сообщения с помощью onmessage.
Отправлять сообщения серверу с помощью send().
Анализировать WebSocket-трафик во вкладке Network → WS.
Такой способ удобен для тестирования WebSocket-серверов без необходимости писать Python-код.

Итог
В этом уроке мы разобрали основы работы с WebSocket в Python, используя библиотеку websockets. Мы:

Изучили принципы асинхронного программирования с async и await, а также их преимущества перед многопоточностью и многопроцессностью.
Реализовали WebSocket-сервер, который принимает сообщения от клиентов и отвечает на них.
Написали WebSocket-клиента, который подключается к серверу, отправляет сообщения и получает ответы.
Разобрали работу asyncio и его роль в управлении асинхронными задачами.
В результате мы получили рабочий пример взаимодействия сервера и клиента по WebSocket, что позволяет организовывать двусторонний обмен данными в реальном времени без постоянных HTTP-запросов.