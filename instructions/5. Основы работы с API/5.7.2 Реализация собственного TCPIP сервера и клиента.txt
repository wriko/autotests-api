Ссылки:

Официальная документация python по работе с библиотекой socket - https://docs.python.org/3/library/socket.html
В данном уроке мы разберем создание TCP/IP-сервера и клиента на Python, используя библиотеку socket.

========================================================================================================================
                    Реализация TCP-сервера
========================================================================================================================
Сервер будет принимать сообщения от клиентов и отправлять обратно ответ.

В корне проекта autotests-api создадим файл tcp_server.py, который будет содержать реализацию сервера:

.
└── autotests-api/
    └── tcp_server.py

Открываем tcp_server.py и добавляем следующий код:

        import socket  # Импортируем модуль socket для работы с сетевыми соединениями


        def server():
            # Создаем TCP-сокет
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            # Привязываем его к адресу и порту
            server_address = ('localhost', 12345)
            server_socket.bind(server_address)

            # Начинаем слушать входящие подключения (максимум 5 в очереди)
            server_socket.listen(5)
            print("Сервер запущен и ждет подключений...")

            while True:
                # Принимаем соединение от клиента
                client_socket, client_address = server_socket.accept()
                print(f"Подключение от {client_address}")

                # Получаем данные от клиента
                data = client_socket.recv(1024).decode()
                print(f"Получено сообщение: {data}")

                # Отправляем ответ клиенту
                response = f"Сервер получил: {data}"
                client_socket.send(response.encode())

                # Закрываем соединение с клиентом
                client_socket.close()


        if __name__ == '__main__':
            server()

Этот код реализует TCP-сервер, который:

1. Ожидает подключения клиентов.
2. Принимает входящие сообщения.
3. Отправляет клиенту ответ.
4. Закрывает соединение.

------------------------------------------
1. Импорт необходимых модулей
------------------------------------------
        import socket  # Импортируем модуль socket для работы с сетевыми соединениями

- socket — стандартная библиотека Python, позволяющая работать с TCP и UDP-сокетами.

------------------------------------------
2. Создание соединения с сервером
------------------------------------------
        # Создаем TCP-сокет
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

Создаем клиентский TCP-сокет:
 - AF_INET — используем IPv4.
 - SOCK_STREAM — используем TCP (потоковый протокол).

        # Подключаемся к серверу
        server_address = ('localhost', 12345)
        client_socket.connect(server_address)

Подключаемся к серверу:
 - server_address = ('localhost', 12345) — указываем IP-адрес и порт сервера.
 - connect(server_address) — устанавливаем TCP-соединение с сервером.
 - Если сервер не запущен, клиент получит ошибку.

------------------------------------------
3. Отправка сообщения на сервер и получение ответа
------------------------------------------
        # Отправляем сообщение серверу
        message = "Привет, сервер!"
        client_socket.send(message.encode())

Отправляем сообщение серверу:
 - message = "Привет, сервер!" — задаем текст сообщения.
 - .encode() — преобразует строку в байты, так как send() принимает только байты.
 - client_socket.send() — отправляет данные по TCP-соединению.

        # Получаем ответ от сервера
        response = client_socket.recv(1024).decode()

Ожидаем и получаем ответ от сервера:
 - recv(1024) — получает максимум 1024 байта данных от сервера.
 - .decode() — преобразует байты в строку (обычно UTF-8).

        print(f"Ответ от сервера: {response}")

 Выводим полученный ответ в консоль.

        # Закрываем соединение
        client_socket.close()

Закрываем соединение, так как оно больше не нужно.

------------------------------------------
Итоговый процесс работы клиента
------------------------------------------
1. Клиент создает TCP-сокет.
2. Подключается к серверу на localhost:12345.
3. Отправляет сообщение "Привет, сервер!".
4. Ждет ответ от сервера и выводит его.
5. Закрывает соединение.

Теперь клиент можно запустить командой:

python -m tcp_client
Вывод в консоли:

Ответ от сервера: Сервер получил: Привет, сервер!
Важно! Перед запуском клиента убедитесь, что TCP-сервер запущен, иначе клиент не сможет установить соединение.

Итог
В этом уроке мы научились создавать собственный TCP/IP-сервер и клиента на Python с использованием библиотеки socket. Мы разобрали, как настроить сервер для обработки входящих подключений и как клиент может взаимодействовать с ним.

Создание TCP-сервера:
 - Используем socket.AF_INET (IPv4) и socket.SOCK_STREAM (TCP).
 - Привязываем сервер к адресу (localhost) и порту (12345).
 - Запускаем режим прослушивания (listen()).
 - Принимаем подключения (accept()), получаем данные и отправляем ответ.
 - После обработки каждого клиента закрываем соединение (close()).

Создание TCP-клиента:
 - Подключаемся к серверу через connect().
 - Отправляем сообщение (send()).
 - Получаем ответ от сервера (recv()).
 - Закрываем соединение (close()).

Принцип работы TCP-соединения:
 - Сервер ждет подключения клиентов.
 - Клиент устанавливает соединение, отправляет данные.
 - Сервер принимает данные, обрабатывает их и отправляет ответ.
 - Клиент получает ответ и завершает соединение.

Практическое применение:
Такие принципы используются в реальных сетевых приложениях: от чатов и игровых серверов до API-интерфейсов и микросервисов.