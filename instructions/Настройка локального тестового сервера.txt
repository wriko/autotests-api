Настройка локального тестового сервера
Ссылки: Репозиторий с сервером Course API
https://github.com/Nikita-Filonov/qa-automation-engineer-api-course

В этом уроке мы настроим локальный сервер, который понадобится для изучения работы с API. На этот сервер мы будем писать автотесты и использовать его для обучения. Поэтому крайне важно выполнить все шаги по установке и настройке локального сервера. Без выполнения этих шагов дальнейшая работа с курсом будет невозможна.

Этот сервер написан на Python и специально содержит тестовый API для обучения. При запуске сервера автоматически будет создана локальная база данных, в которой будут храниться все данные.

1. Создание папки для локального сервера
Перед тем как клонировать и запускать код сервера, создайте папку на вашем компьютере для хранения кода. Это может быть любая папка, главное, чтобы вы её запомнили. Например, я буду использовать папку C:/courses.

Откройте командную строку и перейдите в выбранную папку:

cd C:/courses
2. Склонируем репозиторий
Теперь используйте команду для клонирования репозитория с кодом сервера:

git clone https://github.com/Nikita-Filonov/qa-automation-engineer-api-course
После завершения клонирования, перейдите в папку с проектом:

cd qa-automation-engineer-api-course
3. Настраиваем виртуальное окружение
Теперь настроим виртуальное окружение для работы с проектом. В зависимости от операционной системы используйте соответствующие команды:

Для Windows:

Выполните команду для создания виртуального окружения:

python -m venv venv
Активируйте виртуальное окружение:

.\venv\Scripts\activate
Для macOS/Linux:

Создайте виртуальное окружение:
python3 -m venv venv
Активируйте виртуальное окружение:
source venv/bin/activate
4. Устанавливаем зависимости
После активации виртуального окружения установим все необходимые зависимости:

pip install -r requirements.txt
5. Создаем файл .env
Теперь нужно создать файл .env в папке проекта qa-automation-engineer-api-course. Этот файл будет содержать настройки для корректной работы сервера. Создать файл можно любым удобным для вас способом, например, через проводник на Windows или Finder на macOS.

Внутри файла .env добавьте следующий контент:

APP_HOST="http://localhost:8000"

DATABASE_URL="sqlite+aiosqlite:///./local.db"

JWT_ALGORITHM="HS256"
JWT_SECRET_KEY="qa-automation-engineer-api-course-secret-key"
JWT_ACCESS_TOKEN_EXPIRE=1800
JWT_REFRESH_TOKEN_EXPIRE=5184000
Описание содержимого файла .env:

DATABASE_URL — строка подключения к базе данных. В данном случае это SQLite база данных, которая будет храниться в текущей папке с именем local.db.
JWT_ALGORITHM — алгоритм для подписи JWT. Мы используем алгоритм HS256.
JWT_SECRET_KEY — секретный ключ для подписания JWT токенов.
JWT_ACCESS_TOKEN_EXPIRE — время в секундах, через которое истечет срок действия access token (например, 1800 секунд — это 30 минут).
JWT_REFRESH_TOKEN_EXPIRE — время в секундах, через которое истечет срок действия refresh token (например, 5184000 секунд — это 60 дней).
После того как файл .env будет создан и отредактирован, не забудьте его сохранить.

6. Запускаем локальный сервер
Теперь мы можем запустить локальный сервер командой:

uvicorn main:app --reload
Команду необходимо выполнить внутри папки qa-automation-engineer-api-course

Чтобы остановить сервер, нажмите комбинацию клавиш CTRL + C.

7. Открываем проект в PyCharm
Чтобы облегчить работу с сервером и автотестами, откройте код локального сервера в IDE (например, PyCharm). Это позволит вам быстро переключаться между проектами и не нужно будет каждый раз активировать виртуальное окружение и переходить в папку сервера вручную.

Инструкции по открытию проекта в PyCharm:

Откройте PyCharm и выберите Open (Открыть).
Найдите и выберите папку qa-automation-engineer-api-course, затем нажмите OK.
После открытия проекта в PyCharm, вы можете запустить сервер внутри IDE, используя встроенный терминал. В нем выполните команду:

uvicorn main:app --reload
Теперь сервер будет запущен локально на вашем компьютере и доступен по адресу http://localhost:8000. Чтобы открыть документацию к доступным эндпоинтам, перейдите по адресу http://localhost:8000/docs. Здесь вы найдете Swagger документацию, где будут перечислены все доступные методы взаимодействия с сервером.

Заключение
Теперь ваш локальный сервер настроен и работает! В следующих уроках мы будем использовать его для обучения работе с API и написанию автотестов.