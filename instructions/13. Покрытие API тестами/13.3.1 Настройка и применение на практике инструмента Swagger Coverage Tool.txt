Настройка и применение на практике инструмента Swagger Coverage Tool
Ссылки:

Декоратор - https://refactoring.guru/design-patterns/decorator
Установка библиотеки swagger-coverage-tool c PyPI - https://pypi.org/project/swagger-coverage-tool/
Официальная документация swagger-coverage-tool - https://github.com/Nikita-Filonov/swagger-coverage-tool


Перед тем как приступить к анализу покрытия, давайте установим и настроим инструмент swagger-coverage-tool для наших API автотестов.

-----------------
1. Установка
-----------------
Для начала установим саму библиотеку с помощью pip:
    pip install swagger-coverage-tool

После установки:
 - В систему добавляется команда swagger-coverage-tool, которую можно запускать напрямую из терминала (по аналогии с pytest или allure)
 - Подтягиваются все необходимые зависимости
 - Инструмент готов к использованию как локально, так и в CI/CD
Важно! Всегда устанавливайте последнюю версию библиотеки. В видео и материалах урока указана актуальная версия на момент записи, но swagger-coverage-tool активно развивается и регулярно обновляется. Пожалуйста, перед началом работы убедитесь, что у вас установлена последняя доступная версия — это поможет избежать ошибок, связанных с устаревшим функционалом.

------------------
2. Настройка
------------------
Инструмент поддерживает конфигурацию через три источника:
 - .env файл — удобно для локальной разработки и тестов. Пример .env - https://github.com/Nikita-Filonov/swagger-coverage-tool/blob/main/docs/configs/.env.example
 - swagger_coverage_config.json — JSON-формат для хранения в репозитории. Пример YAML - https://github.com/Nikita-Filonov/swagger-coverage-tool/blob/main/docs/configs/swagger_coverage_config.yaml
 - swagger_coverage_config.yaml — YAML-альтернатива, удобная для CI/CD пайплайнов. Пример JSON - https://github.com/Nikita-Filonov/swagger-coverage-tool/blob/main/docs/configs/swagger_coverage_config.json


Мы рассмотрим настройку через .env файл, так как уже используем его для настройки API тестов, и это позволяет централизованно управлять конфигурацией.

Пример .env файла с настройками:

    # Указываем список сервисов, для которых будет измеряться покрытие
    SWAGGER_COVERAGE_SERVICES='[
        {
            "key": "api-course",
            "name": "API Course",
            "tags": ["API", "COURSES"],
            "repository": "https://github.com/Nikita-Filonov/qa-automation-engineer-api-course",
            "swagger_url": "http://localhost:8000/openapi.json"
        }
    ]'

    # Папка, в которую будут сохраняться промежуточные JSON-файлы покрытия
    SWAGGER_COVERAGE_RESULTS_DIR="./coverage-results"

    # Файл с историей покрытия по запускам
    SWAGGER_COVERAGE_HISTORY_FILE="./coverage-history.json"

    # Ограничение на количество хранимых исторических записей (для отчёта в динамике)
    SWAGGER_COVERAGE_HISTORY_RETENTION_LIMIT=30

    # Путь к итоговому HTML-отчёту (визуальный, открывается в браузере)
    SWAGGER_COVERAGE_HTML_REPORT_FILE="./index.html"

    # Путь к итоговому JSON-отчёту (для интеграций и CI)
    SWAGGER_COVERAGE_JSON_REPORT_FILE="./coverage-report.json"


  Переменная	  Назначение
SWAGGER_COVERAGE_SERVICES	Обязательная переменная. Содержит список сервисов, по которым измеряется покрытие. Указывается URL Swagger JSON-файла
SWAGGER_COVERAGE_RESULTS_DIR	Путь до директории, где будут сохраняться промежуточные JSON-файлы покрытия (по каждому запуску тестов)
SWAGGER_COVERAGE_HISTORY_FILE	Путь до файла, где агрегируется история покрытий
SWAGGER_COVERAGE_HISTORY_RETENTION_LIMIT	Максимальное число записей истории покрытия (старые удаляются)
SWAGGER_COVERAGE_HTML_REPORT_FILE	Финальный HTML-отчёт, отображается в браузере
SWAGGER_COVERAGE_JSON_REPORT_FILE	Финальный JSON-отчёт, удобен для машинной обработки или CI


Важно! Все переменные опциональны, кроме SWAGGER_COVERAGE_SERVICES. Остальные уже имеют значения по умолчанию (как в примере выше), и менять их стоит только при необходимости.

Подробнее про переменную SWAGGER_COVERAGE_SERVICES
Это главная и обязательная настройка инструмента. Именно она указывает, какие сервисы вы хотите анализировать, и откуда брать их Swagger/OpenAPI спецификацию.
Формат — JSON-список объектов, каждый из которых описывает отдельный API-сервис.

Пример значения:

    [
      {
        "key": "api-course",
        "name": "API Course",
        "tags": ["API", "COURSES"],
        "repository": "https://github.com/Nikita-Filonov/qa-automation-engineer-api-course",
        "swagger_url": "http://localhost:8000/openapi.json"
      }
    ]

Поля внутри каждого сервиса:

  Поле	  Обязательно	  Описание
key	✅	Уникальный идентификатор сервиса (используется как ключ в отчетах)
name	✅	Человекочитаемое название сервиса
tags	❌	Список тегов, по которым можно фильтровать или группировать сервисы
repository	❌	Ссылка на репозиторий с кодом сервиса (для навигации и отображения в UI)
swagger_url	✅*	Ссылка на Swagger/OpenAPI спецификацию (в формате JSON)
swagger_file	✅*	Локальный путь до swagger-файла (если нет swagger_url)

Важно! Указывается либо swagger_url, либо swagger_file. Один из них обязателен. Если указаны оба — будет использован swagger_url.
 - key должен быть уникальным — он используется для идентификации сервиса в истории, в UI и в отчетах.
 - tags — необязательны, но полезны для визуального восприятия.
 - swagger_url — это должен быть именно JSON-файл спецификации, не путать с Swagger UI (/docs).


Добавление в .env проекта
У нас уже есть .env файл в корне проекта autotests-api. Мы можем просто добавить переменную SWAGGER_COVERAGE_SERVICES в конец файла:

    TEST_DATA.IMAGE_PNG_FILE="./testdata/files/image.png"

    HTTP_CLIENT.URL="http://localhost:8000"
    HTTP_CLIENT.TIMEOUT=100

    # Добавляем переменную со списком сервисов для измерения покрытия
    SWAGGER_COVERAGE_SERVICES='[
        {
            "key": "api-course",
            "name": "API Course",
            "tags": ["API", "COURSES"],
            "repository": "https://github.com/Nikita-Filonov/qa-automation-engineer-api-course",
            "swagger_url": "http://localhost:8000/openapi.json"
        }
    ]'

Важно!  Обратите внимание: URL в параметре swagger_url должен вести именно на JSON спецификацию Swagger, а не на Swagger UI.

Пример правильного URL: http://localhost:8000/openapi.json
Пример неправильного URL: http://localhost:8000/docs (это Swagger UI, а не контракт)

-----------------------------------
3. Инициализация трекера покрытия
-----------------------------------
После установки библиотеки swagger-coverage-tool нам понадобится только один ключевой класс — SwaggerCoverageTracker. Именно он занимается сбором покрытия, привязкой реальных вызовов к Swagger-документации и сохранением результатов.

Базовый пример использования:

    import httpx
    from swagger_coverage_tool import SwaggerCoverageTracker

    # Инициализируем трекер для сервиса с ключом "api-service"
    tracker = SwaggerCoverageTracker(service="api-service")

    # Оборачиваем функцию вызова GET-запроса в декоратор трекера
    @tracker.track_coverage_httpx("/api/v1/users/{user_id}")
    def get_user(user_id: str):
        return httpx.get(f"http://localhost:8000/api/v1/users/{user_id}")

    # Аналогично оборачиваем POST-запрос
    @tracker.track_coverage_httpx("/api/v1/users")
    def create_user():
        return httpx.post("http://localhost:8000/api/v1/users")

    # Вызываем функции, чтобы они попали в отчет покрытия
    get_user("123")
    create_user()

 - SwaggerCoverageTracker(service="api-service") — создаёт трекер для сервиса с ключом api-service. Значение service должно совпадать с key из переменной SWAGGER_COVERAGE_SERVICES (см. предыдущий шаг).
 - @tracker.track_coverage_httpx(...) — оборачивает функцию вызова, чтобы автоматически собирать данные о том, какой эндпоинт вызывался, с каким методом и каким телом/ответом.
 - Аргумент в декораторе ("/api/v1/users/{user_id}") — путь к эндпоинту так, как он указан в Swagger.
 - Тело запроса, параметры и ответ трекер анализирует автоматически при вызове.


Что делать, если микросервисов несколько?
Если у вас используется микросервисная архитектура, и вы хотите измерять покрытие по каждому сервису отдельно, то для каждого сервиса нужно создать свой экземпляр SwaggerCoverageTracker.

Пример:

    tracker_users = SwaggerCoverageTracker(service="users-service")
    tracker_payments = SwaggerCoverageTracker(service="payments-service")

    @tracker_users.track_coverage_httpx("/api/v1/users")
    def create_user():
        return httpx.post("http://localhost:8001/api/v1/users")

    @tracker_payments.track_coverage_httpx("/api/v1/payments")
    def make_payment():
        return httpx.post("http://localhost:8002/api/v1/payments")


------------------------------
Создаём файл api_coverage.py
------------------------------
Теперь создадим отдельный модуль для инициализации трекера, чтобы использовать его во всех клиентах и тестах:

.
└── autotests-api/
    └── clients/
        └── api_coverage.py
Внутри api_coverage.py пишем:

from swagger_coverage_tool import SwaggerCoverageTracker

# Инициализируем трекер для нашего сервиса "api-course"
# ВАЖНО: 'api-course' должен точно совпадать с ключом `key` в SWAGGER_COVERAGE_SERVICES
tracker = SwaggerCoverageTracker(service="api-course")
Теперь мы можем импортировать этот tracker в любых API клиентах или тестах и оборачивать вызовы, например:

from clients.api_coverage import tracker

@tracker.track_coverage_httpx("/api/v1/courses")
def list_courses():
    ...

------------------------------
4. Добавление трекера к API эндпоинтам
------------------------------
Библиотека swagger-coverage-tool предоставляет два основных метода для оборачивания вызовов и отслеживания покрытия:

track_coverage_httpx — используется для обёртки функций, выполняющих HTTP-запросы через библиотеку HTTPX.
track_coverage_requests — аналогичный метод, но для requests.
Оба метода выполняют одинаковую задачу — отслеживают фактические вызовы API и сопоставляют их с Swagger-документацией. Единственное различие между ними — поддерживаемая HTTP-библиотека.

Несмотря на то, что в этом курсе мы используем HTTPX, важно понимать, что на будущих проектах может применяться и requests. В этом случае вам достаточно будет заменить track_coverage_httpx на track_coverage_requests.

Подключение трекера к API-клиенту
Давайте подключим декораторы swagger-coverage-tool к реальным API-вызовам. Начнём с клиента аутентификации, расположенного в clients/authentication/authentication_client.py.

import allure
from httpx import Response

from clients.api_client import APIClient
from clients.api_coverage import tracker  # Импортируем трекер из api_coverage.py
from clients.authentication.authentication_schema import LoginRequestSchema, RefreshRequestSchema, LoginResponseSchema
from clients.public_http_builder import get_public_http_client
from tools.routes import APIRoutes


class AuthenticationClient(APIClient):
    """
    Клиент для работы с /api/v1/authentication
    """

    @allure.step("Authenticate user")
    # Добавили сбор покрытия для эндпоинта POST /api/v1/authentication/login
    @tracker.track_coverage_httpx(f"{APIRoutes.AUTHENTICATION}/login")
    def login_api(self, request: LoginRequestSchema) -> Response:
        # Остальной код без изменений

    @allure.step("Refresh authentication token")
    # Добавили сбор покрытия для эндпоинта POST /api/v1/authentication/refresh
    @tracker.track_coverage_httpx(f"{APIRoutes.AUTHENTICATION}/refresh")
    def refresh_api(self, request: RefreshRequestSchema) -> Response:
        # Остальной код без изменений
Никаких дополнительных изменений не нужно. После добавления декоратора @tracker.track_coverage_httpx(...) покрытие начнёт автоматически собираться при вызове соответствующего метода.
Метод обязательно должен возвращать Response. Метод, над которым установлен декоратор, обязан возвращать объект ответа:
httpx.Response — если вы используете httpx
requests.Response — если используете requests
Путь к эндпоинту должен соответствовать Swagger. В аргументах декоратора необходимо указать путь к эндпоинту в точности таким, как он указан в Swagger-документации.

Правильно:
@tracker.track_coverage_httpx("/api/v1/users/{userId}")
Неправильно:
@tracker.track_coverage_httpx("/api/v1/users/123") # Это конкретный путь, а не шаблон из Swagger
Используем APIRoutes для маршрутов. Вместо ручного ввода путей, мы используем enum APIRoutes, что:
Упрощает поддержку кода
Снижает вероятность ошибок
Увеличивает масштабируемость
Итого:
Подключение трекера происходит через декоратор.
Путь в декораторе должен быть идентичен Swagger.
Возвращаемый тип — это объект ответа от HTTP-библиотеки.
Использование enum'ов для роутов — это лучшая практика, упрощающая разработку.

----------------------------------------------
5. Запуск тестов и генерация отчёта покрытия
----------------------------------------------
Теперь, когда мы добавили трекеры к нужным API-эндпоинтам, можно запустить тесты и собрать данные покрытия. Для этого не требуется никаких дополнительных плагинов, конфигураций или параметров. Всё работает "из коробки".

Пример команды запуска тестов:

python -m pytest -m "regression"
После успешного прохождения тестов, в корне проекта autotests-api появится новая директория coverage-results, внутри которой будут автоматически сгенерированы JSON-файлы с результатами покрытия.

Пример содержимого одного такого JSON-файла:

{
  "name": "/api/v1/authentication/login",
  "method": "POST",
  "service": "api-course",
  "status_code": 200,
  "query_parameters": [],
  "is_request_covered": true,
  "is_response_covered": true
}
Поле	Описание
name	Путь к эндпоинту, как он указан в Swagger (/api/v1/authentication/login)
method	HTTP-метод, с которым был вызван эндпоинт (GET, POST, PUT и другие)
service	Название сервиса, как указано в конфиге SWAGGER_COVERAGE_SERVICES, в поле key
status_code	Фактический статус-код ответа (например, 200, 404, 500)
query_parameters	Список query-параметров, переданных в запросе. Если их не было, будет пустой список
is_request_covered	Покрыто ли тело запроса
is_response_covered
Покрыто ли тело ответа
Генерация итогового отчёта
Когда все тесты пройдены и результаты покрытия сохранены, можно сгенерировать полноценный отчёт. Для этого из корня проекта нужно выполнить команду:

swagger-coverage-tool save-report
Пример лога после выполнения команды:

(.venv) username@ip-8-8-8-8 autotests-api % swagger-coverage-tool save-report
2025-04-11 19:36:13,957 | SAVE_REPORT | INFO | Starting to save the report
2025-04-11 19:36:13,959 | SWAGGER_COVERAGE_HISTORY_STORAGE | DEBUG | History file not found, returning empty history state
2025-04-11 19:36:13,959 | SWAGGER_COVERAGE_TRACKER_STORAGE | INFO | Loading coverage results from directory: /Users/nikitafilonov/Documents/GitHub/autotests-api/coverage-results
2025-04-11 19:36:13,962 | SWAGGER_COVERAGE_TRACKER_STORAGE | INFO | Loaded 16 coverage files from directory: /Users/nikitafilonov/Documents/GitHub/autotests-api/coverage-results
2025-04-11 19:36:13,962 | SWAGGER_LOADER | INFO | Starting to load Swagger schema
2025-04-11 19:36:13,963 | SWAGGER_LOADER | INFO | Fetching Swagger schema from URL: http://localhost:8000/openapi.json
2025-04-11 19:36:14,016 | SWAGGER_LOADER | INFO | Swagger schema successfully fetched from URL: http://localhost:8000/openapi.json
2025-04-11 19:36:14,018 | SWAGGER_COVERAGE_HISTORY_STORAGE | INFO | History state saved to file: /Users/username/Documents/autotests-api/coverage-history.json
2025-04-11 19:36:14,018 | SWAGGER_REPORTS_STORAGE | INFO | JSON report saved to /Users/username/Documents/autotests-api/coverage-report.json
2025-04-11 19:36:14,022 | SWAGGER_REPORTS_STORAGE | INFO | HTML report saved to /Users/username/Documents/autotests-api/index.html
2025-04-11 19:36:14,022 | SAVE_REPORT | INFO | Report saving process completed


Что происходит в логе:

Starting to save the report	 - Начало процесса генерации отчёта
History file not found...	 - История покрытия пока не найдена (создаётся впервые)
Loading coverage results from directory...	Загрузка всех JSON-файлов из папки coverage-results
Loaded X coverage files...	Успешно загружено X файлов с результатами
Fetching Swagger schema from URL	Загрузка Swagger-документации по указанному swagger_url
Swagger schema successfully fetched	Схема успешно загружена и проанализирована
History state saved to file	Сохранена история покрытия в файл coverage-history.json
JSON report saved to ...coverage-report.json	Сохранён машиночитаемый JSON-отчёт
HTML report saved to ...index.html	Сформирован визуальный HTML-отчёт
Report saving process completed	Завершение процесса
После генерации отчёта в корне проекта появятся:

  Файл	  Назначение
index.html	Основной HTML-отчёт. Откройте его в браузере, чтобы визуально проанализировать покрытие. Ничего менять в нём не нужно
coverage-report.json	Машиночитаемый JSON-отчёт, дублирующий информацию из HTML. Полезен, если вы хотите использовать данные покрытия в CI/CD или логах
coverage-history.json	Файл с историей покрытия. Хранит состояние прошлых запусков и используется для отображения трендов в HTML/JSON отчёте. Автоматически обновляется
Важно про coverage-history.json
Если вы хотите сохранять историю покрытия, то файл coverage-history.json должен находиться в той же директории, откуда вы запускаете swagger-coverage-tool save-report.

Флоу следующий:

Первый запуск — файла истории нет → он создаётся.
При последующих запусках — история будет дополняться и использоваться для отчёта.


--------------------
6. Отчет о покрытии
--------------------
Теперь давайте откроем файл index.html и посмотрим на финальный отчет о покрытии. При первом запуске отчета сразу же будут видны виджеты с конфигурацией и общими показателями покрытия, которые включают информацию о покрытых и непокрытых эндпоинтах, общем проценте покрытия и других метриках.



Если прокрутить страницу ниже, мы увидим список всех эндпоинтов, которые присутствуют в Swagger-документации нашего тестового сервиса API Course, доступной по адресу: http://localhost:8000/docs. На данный момент мы видим, что покрыт только один эндпоинт — /api/v1/authentication/login.

Однако, это не совсем так. На самом деле наши тесты покрывают больше эндпоинтов, но данный эндпоинт является единственным, для которого мы добавили трекер и включили сбор покрытия. В дальнейшем мы добавим трекеры для всех эндпоинтов, чтобы видеть полное покрытие всех тестируемых методов.



Детали покрытия эндпоинта
Мы также можем перейти в подробности покрытого эндпоинта /api/v1/authentication/login, чтобы увидеть более детализированную информацию о том, какие именно части запроса и ответа были покрыты. Это поможет нам проанализировать, насколько хорошо наш тест покрывает все параметры API.



Настройка для нескольких сервисов
Если в проекте используется несколько сервисов, можно просматривать покрытие для каждого из них отдельно. Для этого нужно нажать на лейбл с названием сервиса в правом верхнем углу тулбара на самом начале отчета. Это откроет меню выбора сервисов, из которых можно выбрать тот, данные о котором вы хотите просмотреть.



В нашем примере используется только один сервис, поэтому возможности выбора нет. Тем не менее, важно знать об этой функции, так как она полезна, если вам нужно работать с несколькими сервисами одновременно.

--------------------
7. Вывод
--------------------
Итак, настройка и интеграция инструмента swagger-coverage-tool на самом деле не представляет собой сложной задачи.
Она не требует значительных изменений в проекте или сложных модификаций. Все, что нам нужно сделать, это:

1. Установить библиотеку swagger-coverage-tool.
2. Настроить инструмент, указав настройки в файле .env, JSON или YAML.
3. Создать объект трекера с помощью класса SwaggerCoverageTracker.
4. Использовать трекер для API-эндпоинтов в API-клиентах.
5. Запустить тесты и сгенерировать отчет.

С помощью этого простого набора шагов мы получаем подробный отчет о покрытии API, который помогает нам контролировать качество тестов и убедиться, что все важные части нашего API покрыты тестами.