Ссылки:

Context manager - https://www.geeksforgeeks.org/context-manager-in-python/

Как вы могли заметить, в предыдущих отчетах по тестам отсутствовали шаги в деталях тест-кейсов. Сейчас детали автотестов выглядят довольно базово:



А вот как может выглядеть отчет с шагами, что добавляет значительную информативность:



Также пример можно посмотреть по ссылке https://nikita-filonov.github.io/sample_api_testing/#suites/d652af757e84baaa4d2f3faab5ba6d2f/ba3702610d842626/

Добавление шагов — это одна из самых сложных задач при работе с Allure отчетами. Если раньше мы добавляли аннотации к тестам, которые применялись ко всем тестовым методам в классе автоматически, то шаги требуют явного указания в каждой функции или методе.

Вложенные шаги
____________________________
В Allure также поддерживаются вложенные шаги. Это полезно для детального отображения выполнения автотестов, как на примере ниже:



Способы добавления шагов:
_______________________________
1. Использование контекстного менеджера with allure.step(...)
Это наиболее распространенный способ. Пример кода:

    import allure


    def test_feature():
        with allure.step("Building API client"):
            ...  # Тут код инициализации API клиента

        with allure.step("Creating course"):
            ...  # Тут код создания курса

        with allure.step("Deleting course"):
            ...  # Тут код удаления курса

Что такое контекстный менеджер в python можно почитать тут https://www.geeksforgeeks.org/context-manager-in-python/

Таким образом, в отчете будет отображено три шага:



2. Использование декоратора @allure.step
___________________________________
Этот способ также популярен, но менее гибок. Пример кода:

    import allure


    @allure.step("Building API client")
    def build_api_client():
        ...


    @allure.step("Creating course")
    def create_course():
        ...


    @allure.step("Deleting course")
    def delete_course():
        ...


    def test_feature():
        build_api_client()
        create_course()
        delete_course()


Различия между этими способами
____________________________
С точки зрения Allure отчета разницы нет, но с точки зрения Python — есть. У метода с контекстным менеджером нет ограничений по количеству шагов внутри одной функции. С декоратором @allure.step, один шаг = одна функция, что ограничивает его гибкость. Однако это не делает декоратор бесполезным. Он очень полезен для создания агрегированных или вложенных шагов

Пример использования вложенных шагов:

    @allure.step("Building API client")
    def build_api_client():
        with allure.step("Get user authentication tokens"):
            ...

        with allure.step("Create new API client"):
            ...


    def test_feature():
        build_api_client()

В отчете это будет выглядеть так:



Использование шаблонов в шагах
______________________________________________
В @allure.step можно использовать шаблоны для передачи параметров, которые будут видны в отчете:

    @allure.step("Creating course with title '{title}'")
    def create_course(title: str):
        pass


    def test_feature():
        create_course(title="Locust")
        create_course(title="Pytest")
        create_course(title="Python")
        create_course(title="Playwright")

В отчете шаги будут отображаться с параметрами:



Это делает декоратор @allure.step удобным и мощным инструментом для работы с шагами в отчетах.