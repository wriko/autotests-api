Allure аннотации: @allure.title

В этом уроке мы разберем, как добавлять аннотации Allure к автотестам, какие аннотации стоит использовать, и добавим шаги в Allure отчёт.

Изменение заголовка автотеста в Allure
__________________________________________

По умолчанию, Allure использует название тестовой функции в качестве заголовка для автотеста в отчёте.
Например, если функция называется test_create_user, то и в отчёте тест будет иметь это же название.
Однако, это название может быть неинформативным для других участников команды, например, для ручных тестировщиков или менеджеров.

Для того чтобы сделать заголовок автотеста более понятным, можно использовать аннотацию @allure.title. Рассмотрим это на примере автотестов /tests/users/test_users.py:

    from http import HTTPStatus

    import allure  # Импортируем библиотеку allure
    import pytest

    from clients.users.private_users_client import PrivateUsersClient
    from clients.users.public_users_client import PublicUsersClient
    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema, GetUserResponseSchema
    from fixtures.users import UserFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema
    from tools.assertions.users import assert_create_user_response, assert_get_user_response
    from tools.fakers import fake


    @pytest.mark.users
    @pytest.mark.regression
    class TestUsers:
        @pytest.mark.parametrize("email", ["mail.ru", "gmail.com", "example.com"])
        @allure.title("Create user")  # Добавляем человекочитаемый заголовок
        def test_create_user(self, email: str, public_users_client: PublicUsersClient):
            request = CreateUserRequestSchema(email=fake.email(domain=email))
            response = public_users_client.create_user_api(request)
            response_data = CreateUserResponseSchema.model_validate_json(response.text)

            assert_status_code(response.status_code, HTTPStatus.OK)
            assert_create_user_response(request, response_data)

            validate_json_schema(response.json(), response_data.model_json_schema())

        @allure.title("Get user me")  # Добавляем человекочитаемый заголовок
        def test_ger_user_me(
                self,
                function_user: UserFixture,
                private_users_client: PrivateUsersClient
            ):
            response = private_users_client.get_user_me_api()
            response_data = GetUserResponseSchema.model_validate_json(response.text)

            assert_status_code(response.status_code, HTTPStatus.OK)
            assert_get_user_response(response_data, function_user.response)

            validate_json_schema(response.json(), response_data.model_json_schema())

Что изменилось:
1. Импортировали библиотеку Allure: Чтобы использовать аннотации Allure, необходимо импортировать её модуль.
2. Добавили аннотацию @allure.title: Теперь, вместо названия тестовой функции, в отчёте будет отображаться понятный заголовок — "Create user", "Get user me".


Проверка заголовка в отчёте
___________________________________

Запустим автотесты и посмотрим на результат. Перед запуском необходимо удалить старые результаты allure-results, чтобы убедиться, что отчёт обновлён с новыми данными:
    python -m pytest -m "regression" --alluredir=./allure-results

После завершения тестов запустим сервер для отображения отчёта:
    allure serve ./allure-results

Теперь, если вы посмотрите на отчёт, вместо названия тестовой функции test_create_user, test_get_user_me, будет отображаться заголовок "Create user", "Get user me".



Динамическое изменение заголовка
____________________________________________

Если вам нужно изменить заголовок в процессе выполнения теста (например, в зависимости от параметров), можно использовать метод allure.dynamic.title. Однако рекомендуется использовать этот подход только тогда, когда это действительно необходимо.

Пример использования:

    @allure.title("Create user")  # Заголовок через декоратор — рекомендуется
    def test_create_user(self, email: str, public_users_client: PublicUsersClient):
        allure.dynamic.title(f"Attempt to create user with email: {email}")  # Заголовок через allure.dynamic.title



Как правильно писать заголовки для автотестов
_________________________________________________________

 - Краткость и ясность. Заголовок должен быть коротким, но при этом чётко описывать суть автотеста.
 - Человекочитаемость. Заголовок должен быть понятен не только разработчику, но и любому члену команды, например, ручному тестировщику или менеджеру.
 - Фокус на суть теста. Заголовок должен отвечать на вопрос: "Что проверяет данный автотест?".

Примеры хороших заголовков:
"User login with wrong email or password"
"User login with correct email and password"
"Create course"
"Get user"
"Delete course"
"Get files by user id"


Примеры плохих заголовков:
"Wrong email or password"
"Login"
"Registration"
"Create"
"Create user. Make POST request to /api/v1/users. Check response status code. Check response body"


Добавление @allure.title ко всем автотестам
____________________________________________


Теперь добавим аннотацию @allure.title заголовки ко всем остальным автотестам:

    /tests/authentication/test_authentication.py

    from http import HTTPStatus

    import allure  # Импортируем allure
    import pytest

    from clients.authentication.authentication_client import AuthenticationClient
    from clients.authentication.authentication_schema import LoginRequestSchema, LoginResponseSchema
    from clients.users.public_users_client import PublicUsersClient
    from fixtures.users import UserFixture
    from tools.assertions.authentication import assert_login_response
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.regression
    @pytest.mark.authentication
    class TestAuthentication:
        @allure.title("Login with correct email and password")  # Добавили заголовок
        def test_login(
                self,
                function_user: UserFixture,
                public_users_client: PublicUsersClient,
                authentication_client: AuthenticationClient
        ):
            # Остальной код без изменений
    /tests/files/test_files.py

    from http import HTTPStatus

    import allure  # Импортируем allure
    import pytest

    from clients.errors_schema import ValidationErrorResponseSchema, InternalErrorResponseSchema
    from clients.files.files_client import FilesClient
    from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema, GetFileResponseSchema
    from fixtures.files import FileFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.files import assert_create_file_response, assert_create_file_with_empty_filename_response, \
        assert_create_file_with_empty_directory_response, assert_file_not_found_response, \
        assert_get_file_with_incorrect_file_id_response, assert_get_file_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.files
    @pytest.mark.regression
    class TestFiles:
        @allure.title("Create file")  # Добавили заголовок
        def test_create_file(self, files_client: FilesClient):
            # Остальной код без изменений

        @allure.title("Get file")  # Добавили заголовок
        def test_get_file(self, files_client: FilesClient, function_file: FileFixture):
            # Остальной код без изменений

        @allure.title("Delete file")  # Добавили заголовок
        def test_delete_file(self, files_client: FilesClient, function_file: FileFixture):
            # Остальной код без изменений

        @allure.title("Create file with empty filename")  # Добавили заголовок
        def test_create_file_with_empty_filename(self, files_client: FilesClient):
            # Остальной код без изменений

        @allure.title("Create file with empty directory")  # Добавили заголовок
        def test_create_file_with_empty_directory(self, files_client: FilesClient):
            # Остальной код без изменений

        @allure.title("Get file with incorrect file id")  # Добавили заголовок
        def test_get_file_with_incorrect_file_id(self, files_client: FilesClient):
            # Остальной код без изменений
    /tests/courses/test_courses.py

    from http import HTTPStatus

    import allure  # Импортируем allure
    import pytest

    from clients.courses.courses_client import CoursesClient
    from clients.courses.courses_schema import UpdateCourseRequestSchema, UpdateCourseResponseSchema, GetCoursesQuerySchema, \
        GetCoursesResponseSchema, CreateCourseRequestSchema, CreateCourseResponseSchema
    from fixtures.courses import CourseFixture
    from fixtures.files import FileFixture
    from fixtures.users import UserFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.courses import assert_update_course_response, assert_get_courses_response, \
        assert_create_course_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.courses
    @pytest.mark.regression
    class TestCourses:
        @allure.title("Get courses")  # Добавили заголовок
        def test_get_courses(
                self,
                courses_client: CoursesClient,
                function_user: UserFixture,
                function_course: CourseFixture
        ):
            # Остальной код без изменений

        @allure.title("Update course")  # Добавили заголовок
        def test_update_course(self, courses_client: CoursesClient, function_course: CourseFixture):
            # Остальной код без изменений

        @allure.title("Create course")  # Добавили заголовок
        def test_create_course(
                self,
                courses_client: CoursesClient,
                function_user: UserFixture,
                function_file: FileFixture
        ):
            # Остальной код без изменений
    /tests/exercises/test_exercises.py

    from http import HTTPStatus

    import allure  # Импортируем allure
    import pytest

    from clients.errors_schema import InternalErrorResponseSchema
    from clients.exercises.exercises_client import ExercisesClient
    from clients.exercises.exercises_schema import CreateExerciseRequestSchema, CreateExerciseResponseSchema, \
        GetExerciseResponseSchema, UpdateExerciseRequestSchema, UpdateExerciseResponseSchema, GetExercisesQuerySchema, \
        GetExercisesResponseSchema
    from fixtures.courses import CourseFixture
    from fixtures.exercises import ExerciseFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.exercises import assert_create_exercise_response, assert_get_exercise_response, \
        assert_update_exercise_response, assert_exercise_not_found_response, assert_get_exercises_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.exercises
    @pytest.mark.regression
    class TestExercises:
        @allure.title("Create exercise")  # Добавили заголовок
        def test_create_exercise(self, exercises_client: ExercisesClient):
            # Остальной код без изменений

        @allure.title("Get exercise")  # Добавили заголовок
        def test_get_exercise(
                self,
                exercises_client: ExercisesClient,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

        @allure.title("Update exercise")  # Добавили заголовок
        def test_update_exercise(
                self,
                exercises_client: ExercisesClient,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

        @allure.title("Delete exercise")  # Добавили заголовок
        def test_delete_exercise(
                self,
                exercises_client: ExercisesClient,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

        @allure.title("Get exercises")  # Добавили заголовок
        def test_get_exercises(
                self,
                exercises_client: ExercisesClient,
                function_course: CourseFixture,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

Важно! Тесты, связанные с работой с заданиями, должны были быть реализованы в рамках урока "Практикуемся в написании API автотестов. Часть 3".
Если вы пропустили этот урок или у вас возникли трудности с его выполнением, настоятельно рекомендую вернуться к нему, внимательно изучить материал и убедиться, что все тесты написаны корректно.
Это важно для дальнейшего успешного освоения курса.