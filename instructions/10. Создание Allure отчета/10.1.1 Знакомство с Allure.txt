Знакомство с Allure

Ссылки:

Официальный сайт Allure - https://allurereport.org/
Официальная документация Allure report - https://allurereport.org/docs/
Интеграция Allure с Pytest - https://allurereport.org/docs/pytest/
Пример Allure отчета для API автотестов - https://nikita-filonov.github.io/sample_api_testing/


Allure — это популярная система для генерации и отображения отчетов по автоматическим тестам. Она помогает структурировать, визуализировать и анализировать результаты тестирования, что делает процесс анализа ошибок и прогресса тестов проще и нагляднее.


Зачем нужен Allure?

1. Визуализация результатов тестов: Allure превращает сухие логи и выводы в удобный HTML-отчет с красивым оформлением и наглядной структурой.
2. Структурирование данных: В Allure можно группировать тесты по различным параметрам: типу тестов (например, Smoke, Regression), функциональным областям, тегам и т.д.
3. Легкая интеграция с различными инструментами: Allure поддерживает интеграцию с различными фреймворками для тестирования, такими как Pytest, JUnit, TestNG и другими, а также с системами CI/CD, например, Jenkins или TeamCity.
4. Поддержка вложений: Allure позволяет добавлять к отчетам файлы (скриншоты, логи, данные о выполнении), что упрощает анализ ошибок.
5. История запусков тестов: Он сохраняет историю предыдущих запусков тестов, что помогает отслеживать прогресс, выявлять паттерны проблем и анализировать стабильность тестов.


Основные возможности Allure:

 - Генерация детализированных отчетов: Отображение результата тестов (успех, неудача, пропуск) с указанием причин и контекста.
 - Группировка и фильтрация: Разделение отчетов на группы по тегам, категориям или шагам.
 - Шаги тестов: В отчете можно увидеть пошаговое выполнение каждого теста.
 - Вложенные шаги и результаты: Можно подробно описывать шаги тестов и их результаты, что помогает при дебаге.
 - Анализ дефектов: Allure может показывать информацию о дефектах и причины падения тестов.



Знакомство с Allure отчетом

Теперь давайте детально рассмотрим, какую информацию отображает Allure отчет. В этом шаге наша цель — познакомиться с интерфейсом Allure и понять, где и какую информацию можно найти. В качестве примера используем Allure отчет по ссылке:
https://nikita-filonov.github.io/sample_api_testing/#

Overview — общая информация
Ссылка: https://nikita-filonov.github.io/sample_api_testing/#

На странице Overview отображается сводка по запуску автотестов: количество выполненных тестов, сколько из них прошло успешно, сколько завершилось с ошибками, и сколько было пропущено. Здесь же указаны дата и время начала тестирования, общее время выполнения тестов и другие базовые показатели, позволяющие быстро оценить состояние тестирования. Например, вы можете увидеть такие ключевые метрики как:

Количество пройденных, проваленных и сломанных тестов.
Процент успешности тестирования.
Общая продолжительность прогона тестов.
Это основной экран, который позволяет поверхностно оценить общие результаты.



Suites — информация о тест кейсах
Ссылка: https://nikita-filonov.github.io/sample_api_testing/#suites/d652af757e84baaa4d2f3faab5ba6d2f/ba3702610d842626/

На странице Suites предоставляется детальная информация по каждому автотесту. Все тесты группируются по "сьютам" (suites) — наборам тестов, которые обычно отражают иерархию файлов и классов тестов в вашем проекте. Например, структура может выглядеть так:

.
└── tests/                   # Папка с тестами
    └── courses/             # Папка с автотестами для курсов
        └── test_courses.py  # Файл с автотестами
            └── TestCourses  # Класс с тестами
                └── test_create_course  # Тестовая функция
Подробнее вы также можете видеть на скриншоте ниже:



На странице справа можно увидеть подробную информацию о каждом тесте:

Название теста.
Параметры, с которыми тест был запущен.
Шаги выполнения теста (steps).
Уровень важности (severity).
Время выполнения.
Скриншоты, если они были сделаны.


Таким образом, страница Suites является главным разделом для глубокого анализа конкретных тестов.

Graphs — статистика и аналитика
Ссылка: https://nikita-filonov.github.io/sample_api_testing/#graph

На странице Graphs представлены различные графики с аналитикой. Здесь можно увидеть визуальные данные, такие как:

Время выполнения тестов.
Распределение статусов тестов (успешные, проваленные, сломанные).
Анализ критичности тестов (severity).


Эта страница полезна для того, чтобы быстро оценить общие тренды и понять, где возникают проблемы.

Timeline — время выполнения
Ссылка: https://nikita-filonov.github.io/sample_api_testing/#timeline

Страница Timeline отображает временные диаграммы, показывающие выполнение тестов в реальном времени. Это особенно полезно для анализа, если тесты запускались параллельно, и вы хотите понять, сколько времени занимают отдельные тесты или целые группы тестов. Например, вы можете увидеть, что выполнение одного теста заняло 14 секунд.



Это помогает быстро идентифицировать тесты, которые занимают слишком много времени.

Другие разделы (Categories, Behaviors, Packages)
Кроме перечисленных разделов, в Allure также есть:

Categories — здесь отображается информация по категориям, например, можно разбить тесты по типам ошибок.
Behaviors — группировка тестов по поведению или функциональности.
Packages — группировка тестов по пакетам и модулям.
Хотя эти разделы дают дополнительные способы представления данных, они по сути повторяют информацию, которую можно найти на странице Suites, но с другой группировкой

Заключение
Мы рассмотрели основные разделы Allure отчета, такие как Overview, Suites, Graphs, и Timeline, которые позволяют быстро и удобно анализировать результаты тестирования. Эти разделы помогут вам находить ошибки, анализировать результаты и выявлять проблемные места в автотестах.