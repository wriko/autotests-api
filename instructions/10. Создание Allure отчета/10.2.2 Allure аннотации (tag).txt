Allure аннотации: @allure.tag

В этом шаге мы рассмотрим, как добавлять теги к автотестам. Теги нужны для фильтрации автотестов в Allure отчёте.
Например, вы можете добавить тег REGRESSION к автотестам, относящимся к регрессионному тестированию, чтобы потом фильтровать их по этому тегу в отчёте.
Теги Allure похожи на маркировки pytest, но используются исключительно для фильтрации отчётов, предоставляя метаинформацию о тесте.
В то время как pytest-маркировки применяются для запуска тестов, теги Allure помогают структурировать отчёт.

По умолчанию автотесты в Allure отчете содержат теги, которые берутся из pytest маркировок:

    @pytest.mark.users
    @pytest.mark.regression


Синтаксис тегов
_____________________________________

Важно соблюдать единый формат написания тегов, особенно в больших проектах, над которыми работает несколько автоматизаторов. В противном случае может возникнуть путаница: один разработчик может использовать тег в формате REGRESSION, другой — в формате regression, а третий — Regression. В результате станет сложнее искать и фильтровать автотесты. Чтобы избежать таких проблем, рекомендуется использовать следующий стиль:

1. Теги должны быть в формате UPPER_SNAKE_CASE.
 - Подробнее о snake_case можно прочитать здесь https://en.wikipedia.org/wiki/Snake_case.
 - Подробнее о UPPER_CASE можно узнать здесь https://en.wikipedia.org/wiki/Letter_case.
 - В двух словах: UPPER_SNAKE_CASE — это стиль, в котором слова разделяются подчеркиваниями и пишутся заглавными буквами, например, USER_LOGIN.

2. Теги должны быть константами или перечислениями (enum).
 - Это помогает минимизировать ошибки, такие как использование похожих символов (например, русская С вместо латинской C), что визуально выглядит одинаково, но приводит к некорректной фильтрации. Использование констант и enum также предотвращает дублирование тегов.

Пример использования enum:

    from enum import Enum

    # Пример enum
    class TestTags(str, Enum):
        SMOKE = "SMOKE"
        USERS = "USERS"
        REGRESSION = "REGRESSION"



Применение тегов в автотестах
_______________________________________
Теги можно добавлять как на уровне тестового класса, так и для отдельных тестов. Рассмотрим это на примере класса TestUsers:

    from http import HTTPStatus

    import allure  # Импортируем библиотеку allure
    import pytest

    from clients.users.private_users_client import PrivateUsersClient
    from clients.users.public_users_client import PublicUsersClient
    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema, GetUserResponseSchema
    from fixtures.users import UserFixture
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema
    from tools.assertions.users import assert_create_user_response, assert_get_user_response
    from tools.fakers import fake


    @pytest.mark.users
    @pytest.mark.regression
    @allure.tag("USERS", "REGRESSION")  # Теги для всего класса
    class TestUsers:
        @pytest.mark.parametrize("email", ["mail.ru", "gmail.com", "example.com"])
        @allure.tag("CREATE_ENTITY")  # Тег для конкретного теста
        @allure.title("Create user")
        def test_create_user(self, email: str, public_users_client: PublicUsersClient):
            # Остальной код без изменений

        @allure.tag("GET_ENTITY")  # Тег для конкретного теста
        @allure.title("Get user me")
        def test_ger_user_me(
                self,
                function_user: UserFixture,
                private_users_client: PrivateUsersClient
        ):
            # Остальной код без изменений


Преимущества использования enum для тегов
________________________________________________

Как было отмечено выше, использование enum уменьшает вероятность ошибок при работе с тегами. Например, один разработчик может случайно написать тег как COUЯSES (используя русскую букву Я вместо R), что не всегда легко заметить. Когда теги хранятся в виде констант или enum, такие ошибки исключаются.

Перед запуском автотестов давайте создадим файл с перечислением всех тегов. Добавим файл tags.py в папку tools/allure:

.
└── autotests-api/
    └── tools/
        ├── __init__.py
        └── allure/
            ├── __init__.py
            └── tags.py

Пример содержимого tags.py:

    from enum import Enum


    class AllureTag(str, Enum):
        USERS = "USERS"
        FILES = "FILES"
        COURSES = "COURSES"
        EXERCISES = "EXERCISES"
        REGRESSION = "REGRESSION"
        AUTHENTICATION = "AUTHENTICATION"

        GET_ENTITY = "GET_ENTITY"
        GET_ENTITIES = "GET_ENTITIES"
        CREATE_ENTITY = "CREATE_ENTITY"
        UPDATE_ENTITY = "UPDATE_ENTITY"
        DELETE_ENTITY = "DELETE_ENTITY"
        VALIDATE_ENTITY = "VALIDATE_ENTITY"

Обратите внимание, что мы наследуем от str и Enum, чтобы значения enum воспринимались как строки и могли использоваться напрямую в коде.

Используем enum-ы вместо строк:

    from http import HTTPStatus

    import allure
    import pytest

    from clients.users.private_users_client import PrivateUsersClient
    from clients.users.public_users_client import PublicUsersClient
    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema, GetUserResponseSchema
    from fixtures.users import UserFixture
    from tools.allure.tags import AllureTag  # Импортируем enum AllureTag
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema
    from tools.assertions.users import assert_create_user_response, assert_get_user_response
    from tools.fakers import fake


    @pytest.mark.users
    @pytest.mark.regression
    @allure.tag(AllureTag.USERS, AllureTag.REGRESSION)  # Используем enum
    class TestUsers:
        @pytest.mark.parametrize("email", ["mail.ru", "gmail.com", "example.com"])
        @allure.tag(AllureTag.CREATE_ENTITY)  # Используем enum
        @allure.title("Create user")
        def test_create_user(self, email: str, public_users_client: PublicUsersClient):
            # Остальной код без изменений

        @allure.tag(AllureTag.GET_ENTITY)  # Используем enum
        @allure.title("Get user me")
        def test_ger_user_me(
                self,
                function_user: UserFixture,
                private_users_client: PrivateUsersClient
        ):
            # Остальной код без изменений


Проверка тегов в отчёте
_________________________________

Для того чтобы теги отобразились корректно, необходимо удалить старую папку с результатами allure-results и запустить тесты заново:
    python -m pytest -m "regression" --alluredir=./allure-results

После завершения тестов откройте отчёт с помощью команды:
    allure serve ./allure-results

Теперь по мимо тегов добавленных от pytest маркировок мы также может видеть теги добавленные через @allure.tag:



Добавление @allure.tag ко всем автотестам
_________________________________________________

Теперь добавим аннотацию @allure.tag заголовки ко всем остальным автотестам:

    /tests/authentication/test_authentication.py

    from http import HTTPStatus

    import allure
    import pytest

    from clients.authentication.authentication_client import AuthenticationClient
    from clients.authentication.authentication_schema import LoginRequestSchema, LoginResponseSchema
    from clients.users.public_users_client import PublicUsersClient
    from fixtures.users import UserFixture
    from tools.allure.tags import AllureTag  # Импортируем enum с тегами
    from tools.assertions.authentication import assert_login_response
    from tools.assertions.base import assert_status_code
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.regression
    @pytest.mark.authentication
    @allure.tag(AllureTag.REGRESSION, AllureTag.AUTHENTICATION)  # Добавили теги
    class TestAuthentication:
        # Остальной код без изменений
    /tests/files/test_files.py

    from http import HTTPStatus

    import allure
    import pytest

    from clients.errors_schema import ValidationErrorResponseSchema, InternalErrorResponseSchema
    from clients.files.files_client import FilesClient
    from clients.files.files_schema import CreateFileRequestSchema, CreateFileResponseSchema, GetFileResponseSchema
    from fixtures.files import FileFixture
    from tools.allure.tags import AllureTag  # Импортируем enum с тегами
    from tools.assertions.base import assert_status_code
    from tools.assertions.files import assert_create_file_response, assert_create_file_with_empty_filename_response, \
        assert_create_file_with_empty_directory_response, assert_file_not_found_response, \
        assert_get_file_with_incorrect_file_id_response, assert_get_file_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.files
    @pytest.mark.regression
    @allure.tag(AllureTag.FILES, AllureTag.REGRESSION)  # Добавили теги
    class TestFiles:
        @allure.tag(AllureTag.CREATE_ENTITY)  # Добавили тег
        @allure.title("Create file")
        def test_create_file(self, files_client: FilesClient):
            # Остальной код без изменений

        @allure.tag(AllureTag.GET_ENTITY)  # Добавили тег
        @allure.title("Get file")
        def test_get_file(self, files_client: FilesClient, function_file: FileFixture):
            # Остальной код без изменений

        @allure.tag(AllureTag.DELETE_ENTITY)  # Добавили тег
        @allure.title("Delete file")
        def test_delete_file(self, files_client: FilesClient, function_file: FileFixture):
            # Остальной код без изменений

        @allure.tag(AllureTag.VALIDATE_ENTITY)  # Добавили тег
        @allure.title("Create file with empty filename")
        def test_create_file_with_empty_filename(self, files_client: FilesClient):
            # Остальной код без изменений

        @allure.tag(AllureTag.VALIDATE_ENTITY)  # Добавили тег
        @allure.title("Create file with empty directory")
        def test_create_file_with_empty_directory(self, files_client: FilesClient):
            # Остальной код без изменений

        @allure.tag(AllureTag.VALIDATE_ENTITY)  # Добавили тег
        @allure.title("Get file with incorrect file id")
        def test_get_file_with_incorrect_file_id(self, files_client: FilesClient):
            # Остальной код без изменений
    /tests/courses/test_courses.py

    from http import HTTPStatus

    import allure
    import pytest

    from clients.courses.courses_client import CoursesClient
    from clients.courses.courses_schema import UpdateCourseRequestSchema, UpdateCourseResponseSchema, GetCoursesQuerySchema, \
        GetCoursesResponseSchema, CreateCourseRequestSchema, CreateCourseResponseSchema
    from fixtures.courses import CourseFixture
    from fixtures.files import FileFixture
    from fixtures.users import UserFixture
    from tools.allure.tags import AllureTag  # Импортируем enum с тегами
    from tools.assertions.base import assert_status_code
    from tools.assertions.courses import assert_update_course_response, assert_get_courses_response, \
        assert_create_course_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.courses
    @pytest.mark.regression
    @allure.tag(AllureTag.COURSES, AllureTag.REGRESSION)  # Добавили теги
    class TestCourses:
        @allure.tag(AllureTag.GET_ENTITIES)  # Добавили тег
        @allure.title("Get courses")
        def test_get_courses(
                self,
                courses_client: CoursesClient,
                function_user: UserFixture,
                function_course: CourseFixture
        ):
            # Остальной код без изменений

        @allure.tag(AllureTag.UPDATE_ENTITY)  # Добавили тег
        @allure.title("Update course")
        def test_update_course(self, courses_client: CoursesClient, function_course: CourseFixture):
            # Остальной код без изменений

        @allure.tag(AllureTag.CREATE_ENTITY)  # Добавили тег
        @allure.title("Create course")
        def test_create_course(
                self,
                courses_client: CoursesClient,
                function_user: UserFixture,
                function_file: FileFixture
        ):
            # Остальной код без изменений
    /tests/exercises/test_exercises.py

    from http import HTTPStatus

    import allure
    import pytest

    from clients.errors_schema import InternalErrorResponseSchema
    from clients.exercises.exercises_client import ExercisesClient
    from clients.exercises.exercises_schema import CreateExerciseRequestSchema, CreateExerciseResponseSchema, \
        GetExerciseResponseSchema, UpdateExerciseRequestSchema, UpdateExerciseResponseSchema, GetExercisesQuerySchema, \
        GetExercisesResponseSchema
    from fixtures.courses import CourseFixture
    from fixtures.exercises import ExerciseFixture
    from tools.allure.tags import AllureTag  # Импортируем enum с тегами
    from tools.assertions.base import assert_status_code
    from tools.assertions.exercises import assert_create_exercise_response, assert_get_exercise_response, \
        assert_update_exercise_response, assert_exercise_not_found_response, assert_get_exercises_response
    from tools.assertions.schema import validate_json_schema


    @pytest.mark.exercises
    @pytest.mark.regression
    @allure.tag(AllureTag.EXERCISES, AllureTag.REGRESSION)  # Добавили теги
    class TestExercises:
        @allure.tag(AllureTag.CREATE_ENTITY)  # Добавили тег
        @allure.title("Create exercise")
        def test_create_exercise(self, exercises_client: ExercisesClient):
            # Остальной код без изменений

        @allure.tag(AllureTag.GET_ENTITY)  # Добавили тег
        @allure.title("Get exercise")
        def test_get_exercise(
                self,
                exercises_client: ExercisesClient,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

        @allure.tag(AllureTag.UPDATE_ENTITY)  # Добавили тег
        @allure.title("Update exercise")
        def test_update_exercise(
                self,
                exercises_client: ExercisesClient,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

        @allure.tag(AllureTag.DELETE_ENTITY)  # Добавили тег
        @allure.title("Delete exercise")
        def test_delete_exercise(
                self,
                exercises_client: ExercisesClient,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений

        @allure.tag(AllureTag.GET_ENTITIES)  # Добавили тег
        @allure.title("Get exercises")
        def test_get_exercises(
                self,
                exercises_client: ExercisesClient,
                function_course: CourseFixture,
                function_exercise: ExerciseFixture
        ):
            # Остальной код без изменений