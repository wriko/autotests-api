Пишем функцию для генерации cURL

В этом уроке мы разберём, как автоматически добавлять команду cURL к каждому HTTP-запросу в наших API автотестах.

------------------------
Зачем это нужно?
------------------------
Допустим, во время выполнения теста один из шагов упал из-за некорректного статуса ответа или неожиданного содержимого тела. Чтобы воспроизвести проблему, вам пришлось бы вручную собирать запрос:
- копировать URL,
- метод запроса,
- заголовки,
- тело запроса,
- а затем формировать cURL-команду или переносить всё в Postman.

Это долго и неудобно, к тому же всегда есть риск упустить важные детали, например, заголовки авторизации.

Но что, если этот процесс можно автоматизировать?

Если мы будем автоматически генерировать cURL-команду для каждого запроса, мы сможем:
- Быстро воспроизводить запросы — скопировали команду и выполнили её в терминале или командной строке.
- Импортировать запрос в Postman для удобного анализа (это делается буквально в пару кликов).
- Экономить время на разборе падений тестов.
- Облегчить общение с разработчиками — отправили cURL-команду, и разработчик сразу может её запустить, не тратя время на уточнение деталей.


------------------------------
Пример из реальной практики
------------------------------
Допустим, у вас падает тест с запросом к /api/v1/users, и вам нужно сообщить об этом разработчику. Если вы просто скажете:

"Запрос на /api/v1/users не работает."

разработчик потратит время на уточнения:
- Какие заголовки отправлялись?
- Какое было тело запроса?
- Какой метод использовался?
- Какие параметры передавались?

Но если сразу отправить ему готовую cURL-команду, он сможет быстро воспроизвести запрос и сразу увидеть проблему.

---------------------------------
Пример автоматической генерации cURL
---------------------------------
Этот механизм уже используется в популярных инструментах:
 - Swagger UI автоматически генерирует cURL для каждого запроса, чтобы упростить отладку.
 - DevTools в браузере позволяет копировать любой запрос на сервер в формате cURL.
Таким образом, добавление cURL-команды в Allure-отчёты значительно упростит разбор падений тестов и ускорит работу команды.

Важно! Подробно о том, что такое cURL, мы разбирали в уроке "Знакомство с HTTP-протоколом".

--------------
1. Создаем функцию для генерации cURL команды
--------------
Перед тем как прикреплять cURL команду к Allure отчету, нам нужно написать функцию, которая преобразует объект httpx.Request в строку c командой cURL.
По умолчанию библиотека HTTPX не предоставляет такой функциональности, поэтому нам нужно реализовать его самостоятельно.

Создадим файл curl.py в папке tools/http внутри проекта:

.
└── autotests-api/
    └── tools/
        ├── __init__.py
        └── http/
            ├── __init__.py
            └── curl.py

Добавим в файл /tools/http/curl.py следующую функцию:

    from httpx import Request, RequestNotRead


    def make_curl_from_request(request: Request) -> str:
        """
        Генерирует команду cURL из HTTP-запроса httpx.

        :param request: HTTP-запрос, из которого будет сформирована команда cURL.
        :return: Строка с командой cURL, содержащая метод запроса, URL, заголовки и тело (если есть).
        """
        # Создаем список с основной командой cURL, включая метод и URL
        result: list[str] = [f"curl -X '{request.method}'", f"'{request.url}'"]

        # Добавляем заголовки в формате -H "Header: Value"
        for header, value in request.headers.items():
            result.append(f"-H '{header}: {value}'")

        # Добавляем тело запроса, если оно есть (например, для POST, PUT)
        try:
            if body := request.content:
                result.append(f"-d '{body.decode('utf-8')}'")
        except RequestNotRead:
            pass

        # Объединяем части с переносами строк, исключая завершающий `\`
        return " \\\n  ".join(result)


Разбор кода функции^


Основная идея: Мы берем объект httpx.Request и на его основе формируем строку c командой cURL, которая будет содержать метод запроса, URL, заголовки и тело (если оно есть).

1. Формирование основной команды cURL
    result: list[str] = [f"curl -X '{request.method}'", f"'{request.url}'"]

- Создаем список, в котором первой строкой идет сам вызов curl.
- Указываем HTTP-метод (-X 'GET', -X 'POST', и т.д.).
- Добавляем URL в кавычках 'https://example.com/api'.

2. Добавление заголовков
    for header, value in request.headers.items():
        result.append(f"-H '{header}: {value}'")

- Проходимся по всем заголовкам запроса.
- Для каждого заголовка добавляем параметр -H, например:
    -H 'Authorization: Bearer token'
    -H 'Content-Type: application/json'

3. Добавление тела запроса (если есть)
    try:
        if body := request.content:
            result.append(f"-d '{body.decode('utf-8')}'")
    except RequestNotRead:
        pass

- Если у запроса есть тело (request.content), оно добавляется через -d.
- Используем decode('utf-8'), чтобы преобразовать байты в строку.
- Если тело не прочитано (RequestNotRead), пропускаем обработку.
- Пример тела в cURL:
    -d '{"name": "John", "age": 30}'

4. Форматирование финальной команды
    return " \\\n  ".join(result)

- Объединяем все части списка result в одну строку.
- Добавляем \ для многострочного представления команды, чтобы команда была читаемой:
    curl -X 'POST' 'https://example.com/api' \
      -H 'Content-Type: application/json' \
      -H 'Authorization: Bearer token' \
      -d '{"name": "John", "age": 30}'


----------------
Итог
----------------
Мы написали функцию, которая автоматически формирует cURL команду на основе объекта httpx.Request. Теперь мы можем использовать её в тестах и прикреплять команду к Allure отчету.



---------------------------
2. Пример использования функции make_curl_from_request
---------------------------
Рассмотрим практический пример: допустим, нам нужно выполнить POST-запрос для создания пользователя и получить соответствующую cURL команду. Сделать это можно следующим образом:

    body = {
        "email": "user@example.com",
        "password": "string",
        "lastName": "string",
        "firstName": "string",
        "middleName": "string"
    }
    response = httpx.post("http://localhost:8000/api/v1/users", json=body)
    print(make_curl_from_request(response.request))


Что здесь происходит?
1. Создаем тело запроса (body) в формате JSON.
2. Отправляем POST-запрос на локальный сервер http://localhost:8000/api/v1/users.
3. Вызываем make_curl_from_request(response.request), чтобы получить cURL команду.
4. Выводим результат в консоль.


Итоговая команда cURL
    curl -X 'POST' \
      'http://localhost:8000/api/v1/users' \
      -H 'host: localhost:8000' \
      -H 'accept: */*' \
      -H 'accept-encoding: gzip, deflate' \
      -H 'connection: keep-alive' \
      -H 'user-agent: python-httpx/0.28.1' \
      -H 'content-length: 111' \
      -H 'content-type: application/json' \
      -d '{"email":"user@example.com","password":"string","lastName":"string","firstName":"string","middleName":"string"}'


Разбор команды cURL
curl -X 'POST' — используем метод POST.
'http://localhost:8000/api/v1/users' — отправляем запрос на этот URL.
-H 'host: localhost:8000' — передаем заголовок Host (указывает серверу, к какому домену идет запрос).
-H 'accept: */*' — сервер может вернуть ответ в любом формате.
-H 'accept-encoding: gzip, deflate' — поддерживаем сжатый ответ.
-H 'connection: keep-alive' — используем keep-alive для соединения.
-H 'user-agent: python-httpx/0.28.1' — указываем, что запрос отправлен через httpx.
-H 'content-length: 111' — длина передаваемых данных.
-H 'content-type: application/json' — отправляем JSON-тело.
-d '{"email":"user@example.com","password":"string","lastName":"string","firstName":"string","middleName":"string"}' — передаем данные запроса.


Как это использовать?
Эту команду можно просто скопировать и вставить в терминал, чтобы выполнить тот же запрос вручную. Это удобно для:

- Отладки — можно легко проверить, корректно ли сформирован запрос.
- Документации — можно добавить cURL команду в документацию API.
- Повторного использования — легко протестировать запрос в командной строке


Что дальше?
Мы реализовали функцию make_curl_from_request, которая преобразует объект httpx.Request в строку c командой cURL.

Следующий шаг — автоматизировать генерацию и прикрепление cURL команды к Allure отчету для каждого запроса, отправленного в API.