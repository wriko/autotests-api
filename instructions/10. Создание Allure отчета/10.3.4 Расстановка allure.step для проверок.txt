Расстановка allure.step для проверок
Теперь добавим Allure-шаги для функций проверки.

Как вы помните, все базовые проверки были вынесены в отдельные функции в файл /tools/assertions/base.py. Это было осознанным решением для:
- Централизованного управления проверками
- Исключения дублирования кода в тестах
- Упрощения внесения изменений (например, добавления Allure-шагов)

Благодаря такой архитектуре, теперь мы можем добавить allure.step в одном месте и сразу получить улучшенный Allure-отчет во всех тестах.

Файлы с проверками, где добавим Allure-шаги:

/tools/assertions/base.py – базовые проверки
/tools/assertions/schema.py – валидация JSON schema
/tools/assertions/errors.py – проверки ошибок
/tools/assertions/users.py – проверки пользователей
/tools/assertions/authentication.py – проверки аутентификации
/tools/assertions/courses.py – проверки курсов
/tools/assertions/files.py – проверки файлов


1. Добавление Allure-шагов в базовые проверки
Начнем с самого низкого уровня – базовых проверок в /tools/assertions/base.py.

    from typing import Any, Sized

    import allure  # Импортируем allure


    @allure.step("Check that response status code equals to {expected}")  # Добавили allure шаг
    def assert_status_code(actual: int, expected: int):
        # Остальной код без изменений


    @allure.step("Check that {name} equals to {expected}")  # Добавили allure шаг
    def assert_equal(actual: Any, expected: Any, name: str):
        # Остальной код без изменений


    @allure.step("Check that {name} is true")  # Добавили allure шаг
    def assert_is_true(actual: Any, name: str):
        # Остальной код без изменений

    def assert_length(actual: Sized, expected: Sized, name: str):
        # Остальной код без изменений

        # Добавили allure шаг
        with allure.step(f"Check that length of {name} equals to {len(expected)}"):
            # Остальной код без изменений


Разбор кода^
- Добавлены @allure.step для основных проверок – теперь в отчете мы увидим, какая именно проверка выполняется.
- Для assert_length использован with allure.step(...) – так как мы передаем динамическое значение (длину списка).

Что дает этот подход?
- Чистый и удобный Allure-отчет. Теперь все проверки будут отображаться как шаги в отчете. Это упростит анализ ошибок и тестов.
- Отсутствие дублирования кода. Вместо того, чтобы расставлять Allure-шаги в каждом тесте, мы сделали это централизованно.
- Гибкость и масштабируемость. Если потребуется изменить текст шагов или добавить логику – это делается в одном месте.


2. Добавляем Allure-шаги для проверок JSON Schema
Проверка соответствия JSON-объекта схеме — важный этап валидации данных, который используется во многих автотестах. Открываем файл /tools/assertions/schema.py, добавляем allure.step к функциям проверок:

    from typing import Any

    import allure  # Импортируем allure
    from jsonschema import validate
    from jsonschema.validators import Draft202012Validator


    @allure.step("Validate JSON schema")  # Добавили allure шаг
    def validate_json_schema(instance: Any, schema: dict) -> None:
        # Остальной код без изменений


Разбор изменений^

- Добавлен @allure.step("Validate JSON schema")
- Явно передаются instance и schema – это поможет в Allure-отчете понять, какие данные проверяются.

Результат: теперь при выполнении тестов будет четко видно, на каком этапе проверяется схема JSON.



3. Добавляем Allure-шаги для проверок пользователей
Теперь улучшим проверки, связанные с пользователями, добавив Allure-шаги в файл /tools/assertions/users.py.

    import allure  # Импортируем allure

    from clients.users.users_schema import CreateUserRequestSchema, CreateUserResponseSchema, GetUserResponseSchema, \
        UserSchema
    from tools.assertions.base import assert_equal


    @allure.step("Check create user response")  # Добавили allure шаг
    def assert_create_user_response(request: CreateUserRequestSchema, response: CreateUserResponseSchema):
        # Остальной код без изменений


    @allure.step("Check user")  # Добавили allure шаг
    def assert_user(actual: UserSchema, expected: UserSchema):
        # Остальной код без изменений


    @allure.step("Check get user response")  # Добавили allure шаг
    def assert_get_user_response(
            get_user_response: GetUserResponseSchema,
            create_user_response: CreateUserResponseSchema
    ):
        # Остальной код без изменений


Разбор изменений^
Добавлены @allure.step на уровень проверки бизнес-логики. Теперь в отчете Allure появятся четкие шаги:

- "Check create user response"
- "Check user"
- "Check get user response"

Разные уровни детализации Allure-шагов
Как вы могли заметить, мы используем шаги на разных уровнях детализации.

Пример с API-клиентами:

На высоком уровне – шаги, описывающие бизнес-логику:
"Create user"
"Get user by ID"
На низком уровне – детализированные шаги:
"Make GET request to '/api/v1/users'"
Пример с проверками:

Высокий уровень – шаги, описывающие бизнес-логику:
"Check user"
"Check get user response"
Низкий уровень – детальные шаги:
"Check that 'email' equals to 'user@example.com'"
"Check that 'id' equals to '12345'"
Почему это важно?
Структурированность – четкое разделение шагов по уровням.
Читаемость – отчет понятен даже без просмотра кода тестов.
Упрощенная отладка – если тест падает, мы сразу видим, на каком уровне произошла ошибка.
3. Остальные проверки
Теперь по аналогии добавим allure.step к остальным функциям проверок

/tools/assertions/authentication.py

import allure  # Импортируем allure

from clients.authentication.authentication_schema import LoginResponseSchema
from tools.assertions.base import assert_equal, assert_is_true


@allure.step("Check login response")  # Добавили allure шаг
def assert_login_response(response: LoginResponseSchema):
    # Остальной код без изменений
/tools/assertions/files.py

import allure  # Импортируем allure

from clients.errors_schema import ValidationErrorResponseSchema, ValidationErrorSchema, InternalErrorResponseSchema
from clients.files.files_schema import CreateFileResponseSchema, CreateFileRequestSchema, FileSchema, \
    GetFileResponseSchema
from tools.assertions.base import assert_equal
from tools.assertions.errors import assert_validation_error_response, assert_internal_error_response


@allure.step("Check create file response")  # Добавили allure шаг
def assert_create_file_response(request: CreateFileRequestSchema, response: CreateFileResponseSchema):
    # Остальной код без изменений


@allure.step("Check file")  # Добавили allure шаг
def assert_file(actual: FileSchema, expected: FileSchema):
    # Остальной код без изменений


@allure.step("Check get file response")  # Добавили allure шаг
def assert_get_file_response(
        get_file_response: GetFileResponseSchema,
        create_file_response: CreateFileResponseSchema
):
    # Остальной код без изменений


@allure.step("Check create file with empty filename response")  # Добавили allure шаг
def assert_create_file_with_empty_filename_response(actual: ValidationErrorResponseSchema):
    # Остальной код без изменений


@allure.step("Check create file with empty directory response")  # Добавили allure шаг
def assert_create_file_with_empty_directory_response(actual: ValidationErrorResponseSchema):
    # Остальной код без изменений

@allure.step("Check file not found response")  # Добавили allure шаг
def assert_file_not_found_response(actual: InternalErrorResponseSchema):
    # Остальной код без изменений


@allure.step("Check get file with incorrect file id response")  # Добавили allure шаг
def assert_get_file_with_incorrect_file_id_response(actual: ValidationErrorResponseSchema):
    # Остальной код без изменений
/tools/assertions/courses.py

import allure  # Импортируем allure

from clients.courses.courses_schema import CourseSchema, UpdateCourseRequestSchema, UpdateCourseResponseSchema, \
    GetCoursesResponseSchema, CreateCourseResponseSchema, CreateCourseRequestSchema
from tools.assertions.base import assert_equal, assert_length
from tools.assertions.files import assert_file
from tools.assertions.users import assert_user


@allure.step("Check update course response")  # Добавили allure шаг
def assert_update_course_response(
        request: UpdateCourseRequestSchema,
        response: UpdateCourseResponseSchema
):
    # Остальной код без изменений


@allure.step("Check course")  # Добавили allure шаг
def assert_course(actual: CourseSchema, expected: CourseSchema):
    # Остальной код без изменений


@allure.step("Check get courses response")  # Добавили allure шаг
def assert_get_courses_response(
        get_courses_response: GetCoursesResponseSchema,
        create_course_responses: list[CreateCourseResponseSchema]
):
    # Остальной код без изменений


@allure.step("Check create course response")  # Добавили allure шаг
def assert_create_course_response(
        request: CreateCourseRequestSchema,
        response: CreateCourseResponseSchema
):
    # Остальной код без изменений
/tools/assertions/errors.py

import allure  # Импортируем allure

from clients.errors_schema import ValidationErrorSchema, ValidationErrorResponseSchema, InternalErrorResponseSchema
from tools.assertions.base import assert_equal, assert_length


@allure.step("Check validation error")  # Добавили allure шаг
def assert_validation_error(actual: ValidationErrorSchema, expected: ValidationErrorSchema):
    # Остальной код без изменений


@allure.step("Check validation error response")  # Добавили allure шаг
def assert_validation_error_response(
        actual: ValidationErrorResponseSchema,
        expected: ValidationErrorResponseSchema
):
    # Остальной код без изменений


@allure.step("Check internal error response")  # Добавили allure шаг
def assert_internal_error_response(
        actual: InternalErrorResponseSchema,
        expected: InternalErrorResponseSchema
):
    # Остальной код без изменений
Запускаем тесты
Теперь давайте запустим тесты и посмотрим, как Allure-отчет отражает добавленные шаги.

python -m pytest -m "regression" --alluredir=./allure-results
После выполнения тестов отчет будет выглядеть следующим образом:



Как вы можете видеть на скриншоте выше, мы получили очень детализированный отчет, который позволяет точно понять, что именно выполнял тест. Мы можем увидеть, какие запросы были отправлены, куда, как проверялись поля, какие проверки были выполнены и как происходила валидация JSON-схемы.

Особое внимание стоит уделить тому, что в отчете отображаются фикстуры, которые выполнялись до и после теста. Эти шаги отображаются в блоках Set up и Tear down. Это крайне полезно, когда нужно понять, какие данные подготавливались до теста. В этих шагах также отображаются все выполняемые запросы и проверки, что дает полное представление о том, как настраивалась тестовая среда.

Итог
В итоге мы получаем подробный и информативный отчет, который, благодаря вложенным шагам, выглядит лаконично и не перегружено. Шаги теста остаются компактными, а если требуется более подробная информация, мы всегда можем получить ее, развернув вложенные шаги. Это обеспечивает как краткость, так и возможность углубленной диагностики.

Также стоит отметить, что процесс добавления Allure-шагов завершен. Как вы видите, благодаря продуманной архитектуре тестового фреймворка, добавление Allure-шагов, логирование и прочие действия выполняются быстро и без усилий. Буквально за один урок мы добавили все необходимые шаги, и теперь наш тестовый фреймворк стал гораздо более удобным и информативным.

