1. Создаем файл api_client.py
Для начала создадим папку clients, внутри которой разместим файл api_client.py.

.
└── autotests-api/
    └── clients/
        ├── __init__.py
        └── api_client.py
Этот файл будет содержать базовый API клиент с основными методами, который послужит основой для всех последующих клиентов API, используемых в автотестах. В дальнейшем именно на этом уровне мы будем добавлять дополнительные возможности, такие как авторизация, логирование запросов, обработка ошибок и т. д.

2. Реализуем базовый API клиент
from httpx import Client


class APIClient:
    def __init__(self, client: Client):
        """
        Базовый API клиент, принимающий объект httpx.Client.

        :param client: экземпляр httpx.Client для выполнения HTTP-запросов
        """
        self.client = client
В данном случае класс APIClient представляет собой базовый API клиент, который задает интерфейс для инициализации всех последующих клиентов API. Он принимает объект httpx.Client, который используется для выполнения запросов.

Все базовые методы работы с API мы будем добавлять на уровне данного клиента. На текущем этапе нам нужно реализовать четыре метода:

get — выполнение GET-запросов.

post — выполнение POST-запросов.

patch — выполнение PATCH-запросов.

delete — выполнение DELETE-запросов.

3. Реализуем метод GET
from httpx import Client, URL, Response, QueryParams


class APIClient:
    def __init__(self, client: Client):
        self.client = client

    def get(self, url: URL | str, params: QueryParams | None = None) -> Response:
        """
        Выполняет GET-запрос.

        :param url: URL-адрес эндпоинта.
        :param params: GET-параметры запроса (например, ?key=value).
        :return: Объект Response с данными ответа.
        """
        return self.client.get(url, params=params)
Разбор кода:
Метод get принимает URL и параметры запроса (params).

params — это словарь или кортежи ключ-значение, передаваемые в строке запроса (query string), например: ?name=John&age=30.

Метод возвращает объект Response, содержащий ответ от сервера.

4. Реализуем метод POST
from typing import Any

from httpx import Client, URL, Response, QueryParams
from httpx._types import RequestData, RequestFiles


class APIClient:
    def __init__(self, client: Client):
        self.client = client

    def get(self, url: URL | str, params: QueryParams | None = None) -> Response:
        """
        Выполняет GET-запрос.

        :param url: URL-адрес эндпоинта.
        :param params: GET-параметры запроса (например, ?key=value).
        :return: Объект Response с данными ответа.
        """
        return self.client.get(url, params=params)

    def post(
            self,
            url: URL | str,
            json: Any | None = None,
            data: RequestData | None = None,
            files: RequestFiles | None = None
    ) -> Response:
        """
        Выполняет POST-запрос.

        :param url: URL-адрес эндпоинта.
        :param json: Данные в формате JSON.
        :param data: Форматированные данные формы (например, application/x-www-form-urlencoded).
        :param files: Файлы для загрузки на сервер.
        :return: Объект Response с данными ответа.
        """
        return self.client.post(url, json=json, data=data, files=files)
Разбор кода:

Добавлены параметры data и files, которые понадобятся в будущем, например, для загрузки файлов через эндпоинт /api/v1/files.

json используется для передачи данных в формате JSON.

data передает параметры в x-www-form-urlencoded формате.

files позволяет загружать файлы на сервер.

5. Реализуем метод patch, delete
from typing import Any

from httpx import Client, URL, Response, QueryParams
from httpx._types import RequestData, RequestFiles


class APIClient:
    def __init__(self, client: Client):
        self.client = client

    def get(self, url: URL | str, params: QueryParams | None = None) -> Response:
        """
        Выполняет GET-запрос.

        :param url: URL-адрес эндпоинта.
        :param params: GET-параметры запроса (например, ?key=value).
        :return: Объект Response с данными ответа.
        """
        return self.client.get(url, params=params)

    def post(
            self,
            url: URL | str,
            json: Any | None = None,
            data: RequestData | None = None,
            files: RequestFiles | None = None
    ) -> Response:
        """
        Выполняет POST-запрос.

        :param url: URL-адрес эндпоинта.
        :param json: Данные в формате JSON.
        :param data: Форматированные данные формы (например, application/x-www-form-urlencoded).
        :param files: Файлы для загрузки на сервер.
        :return: Объект Response с данными ответа.
        """
        return self.client.post(url, json=json, data=data, files=files)

    def patch(self, url: URL | str, json: Any | None = None) -> Response:
        """
        Выполняет PATCH-запрос (частичное обновление данных).

        :param url: URL-адрес эндпоинта.
        :param json: Данные для обновления в формате JSON.
        :return: Объект Response с данными ответа.
        """
        return self.client.patch(url, json=json)

    def delete(self, url: URL | str) -> Response:
        """
        Выполняет DELETE-запрос (удаление данных).

        :param url: URL-адрес эндпоинта.
        :return: Объект Response с данными ответа.
        """
        return self.client.delete(url)
Разбор кода:
patch используется для частичного обновления ресурса, передавая измененные данные.

delete удаляет ресурс по указанному URL.

В обоих методах в Response возвращается объект ответа сервера.

Итог
На данном этапе базовый API клиент полностью реализован. В дальнейшем все специфические API клиенты могут наследоваться от APIClient, используя его методы для работы с запросами. Это позволит избежать дублирования кода и улучшить читаемость тестов.