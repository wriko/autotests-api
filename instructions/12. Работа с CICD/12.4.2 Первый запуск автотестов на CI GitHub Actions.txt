Первый запуск автотестов на CI: GitHub Actions
Теперь, когда мы создали файл с workflow, можем запустить автотесты на GitHub Actions. Однако перед этим важно выполнить некоторые настройки, чтобы избежать проблем в будущем.

--------------------------
1. Включение доступа на запись для запуска workflow
--------------------------
Для публикации файлов в ветку GitHub Pages workflow использует токен аутентификации, генерируемый GitHub. По умолчанию этот токен не имеет прав на запись, и в логах запуска workflow может появиться ошибка:

    remote: Permission to ⟨USER⟩/⟨REPOSITORY⟩.git denied to github-actions[bot].
    fatal: unable to access 'https://github.com/⟨USER⟩/⟨REPOSITORY⟩.git/':
    The requested URL returned error: 403

Чтобы устранить эту ошибку, нужно предоставить токену права на запись:
1. Перейдите на страницу проекта на GitHub и откройте раздел Settings → Actions → General.
2. В секции Workflow permissions выберите Read and write permissions.
3. Нажмите Save.


--------------------------
2. Создание ветки gh-pages
--------------------------
Чтобы корректно опубликовать Allure отчет на GitHub Pages необходимо в репозитории api-autotests создать ветку gh-pages




--------------------------
3. Запуск автотестов
--------------------------
Теперь давайте зафиксируем изменения и отправим их в удаленный репозиторий:

    git add .
    git status
    git commit -m "Added run autotests on CI"
    git push origin main

После отправки коммита в репозиторий, на главной странице репозитория отобразится статус запуска workflow:



Нажав на значок статуса, можно открыть окно с текущим запуском и перейти к его деталям.



Для просмотра всех запусков перейдите на вкладку Actions.



Во вкладке Actions вы увидите список всех запусков workflow для текущего проекта, с информацией о статусе, ветке, времени запуска и коммите, из которого был запущен workflow.

Чтобы посмотреть подробности конкретного запуска, нажмите на название коммита:



Вы попадете на страницу деталей запуска, где отображены статус каждого шага, название коммита, инициатор коммита, статус и время выполнения каждой задачи, а также правила триггера и файл workflow (в данном случае test.yaml), использованный для запуска.



Теперь нажмем на задачу run-tests для более детального анализа:



На странице run-tests отображены конкретные шаги, которые выполнялись во время её запуска. Здесь можно просмотреть логи и время выполнения каждого шага, которые указаны в test.yml. Также отображаются некоторые системные шаги, добавленные GitHub Actions автоматически.



Для более детального просмотра шага, например, Run API tests with pytest and generate Allure results, можно нажать на его название:



Таким образом, мы впервые запустили автотесты на GitHub Actions. Этот процесс настройки и запуска автотестов через GitHub Actions — это CI (Continuous Integration). Теперь при каждом изменении автотестов, создании коммита или pull request в ветку main, автотесты будут запускаться автоматически, предоставляя актуальный статус тестируемого приложения.


--------------------------
4. Решение проблем с запуском
--------------------------
Если в процессе запуска возникают ошибки, они будут отображены в соответствующем статусе:





Чтобы найти источник проблемы, откройте задачу с ошибкой и найдите шаг, на котором произошел сбой.



Пример ошибки:

 remote: Write access to repository not granted.
  fatal: unable to access 'https://github.com/Nikita-Filonov/autotests-api.git/': The requested URL returned error: 403
  Error: Action failed with "The process '/usr/bin/git' failed with exit code 128"
Эта ошибка указывает, что у runner'а GitHub Actions нет прав на запись в репозиторий. Мы рассмотрели её решение в начале этого шага, добавив права на запись в настройках Actions.

Не забудьте, что в задаче run-tests мы настроили публикацию Allure отчета на GitHub Pages. Как посмотреть сам отчет, рассмотрим в следующем шаге.