Фиксируем зависимости Python проекта
В данном уроке мы подготовим проект autotests-api для запуска на CI. В этом шаге зафиксируем все Python-зависимости проекта в файл requirements.txt.

Зачем фиксировать зависимости Python?
Фиксация зависимостей Python необходима по нескольким причинам:

Это хорошая практика, которая позволяет любому разработчику быстро установить и запустить ваш проект, обеспечивая идентичную версию зависимостей.
Это необходимо при командной работе, чтобы ваши коллеги могли запускать проект локально и легко устанавливать те же зависимости.
Для CI/CD: фиксированные зависимости позволяют сократить команды установки. Вместо того чтобы писать каждую команду для установки (например, pip install pytest, pip install httpx и т.д.), вы можете использовать одну команду, чтобы установить все зависимости разом.
Где фиксируются зависимости Python?
Зависимости Python, как правило, фиксируются в текстовом файле под названием requirements.txt. Хотя название файла может быть произвольным, стандартное имя requirements.txt позволяет разработчикам сразу понять, что именно в этом файле указаны зависимости проекта.

Как фиксировать зависимости проекта?
Существует несколько способов фиксации зависимостей в Python:

Ручное добавление в requirements.txt: После установки новой библиотеки командой pip install some-library добавьте строку some-library=={version} в requirements.txt. Это наиболее надежный способ, поскольку он позволяет поддерживать файл актуальным и избегать избыточных зависимостей.

Автоматическая генерация requirements.txt с помощью pip freeze: Команда pip freeze > requirements.txt создает файл requirements.txt и записывает в него все библиотеки, установленные в текущем виртуальном окружении. Однако такой подход может добавить вложенные зависимости (то есть библиотеки, требуемые установленными пакетами), что увеличивает файл и приводит к возможным конфликтам. Пример:

allure-pytest==2.13.5
allure-python-commons==2.13.5
annotated-types==0.7.0
anyio==4.8.0
attrs==25.1.0
certifi==2025.1.31
dnspython==2.7.0
email_validator==2.2.0
execnet==2.1.1
Faker==36.2.2
h11==0.14.0
httpcore==1.0.7
httpx==0.28.1
idna==3.10
iniconfig==2.0.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
packaging==24.2
pluggy==1.5.0
pydantic==2.10.6
pydantic-settings==2.8.1
pydantic_core==2.27.2
pytest==8.3.5
pytest-rerunfailures==15.0
pytest-xdist==3.6.1
python-dotenv==1.0.1
referencing==0.36.2
rpds-py==0.23.1
sniffio==1.3.1
typing_extensions==4.12.2
tzdata==2025.1
Эти библиотеки могут не требоваться непосредственно вашему проекту, поэтому данный метод менее предпочтителен.

Добавление библиотек из вывода команды pip list: Вы можете использовать команду pip list для просмотра установленных библиотек и вручную добавлять нужные зависимости в requirements.txt. Это рабочий способ, но требует внимательности, чтобы избежать включения ненужных библиотек.

Мы будем использовать первый способ и добавим в requirements.txt только действительно необходимые зависимости.

Создадим файл requirements.txt в корне проекта:

.
└── autotests-api/
    └── requirements.txt
Пример содержимого файла requirements.txt для нашего проекта:

allure-pytest==2.13.5
email_validator==2.2.0
Faker==36.2.2
httpx==0.28.1
jsonschema==4.23.0
pydantic==2.10.6
pydantic-settings==2.8.1
pytest==8.3.5
pytest-rerunfailures==15.0
pytest-xdist==3.6.1
Эти зависимости обеспечат корректную работу проекта autotests-api.

Как установить Python-зависимости?
Чтобы установить зависимости из файла requirements.txt, выполните команду:

pip install -r requirements.txt
Эта команда указывает пакетному менеджеру pip установить все зависимости, указанные в requirements.txt.

Работа с версиями зависимостей в requirements.txt
При фиксации версий в requirements.txt можно использовать различные операторы для управления диапазонами версий:

==: зафиксировать точную версию. Например, pytest==8.3.3 гарантирует использование версии 8.3.3.
>=: минимальная версия, например, pytest>=8.0.0, устанавливает минимально допустимую версию 8.0.0, но допускает обновления.
<=: максимальная версия, например, pytest<=8.3.3.
~= (тильда): фиксирует совместимые версии. Например, pytest~=8.3 означает, что могут быть установлены версии от 8.3.0 до 8.4 (не включая 8.4), что полезно для предотвращения крупных изменений.
Такой подход помогает избежать потенциальных проблем при установке зависимостей и их обновлении.