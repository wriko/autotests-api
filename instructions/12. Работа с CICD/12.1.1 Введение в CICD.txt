Основные концепции CI/CD
Ссылки:

CI/CD - https://ru.wikipedia.org/wiki/CI/CD
Continuous Integration - https://en.wikipedia.org/wiki/Continuous_integration
Continuous Delivery - https://en.wikipedia.org/wiki/Continuous_delivery
Continuous Deployment - https://en.wikipedia.org/wiki/Continuous_deployment
Что такое CI/CD от GitLab - https://about.gitlab.com/topics/ci-cd/

Концепция CI/CD (Continuous Integration/Continuous Delivery или Continuous Deployment) — это один из ключевых подходов в разработке программного обеспечения, который помогает командам автоматически проверять, интегрировать и выпускать обновления приложений. Для начинающих тестировщиков, особенно в контексте автоматизации, понимание CI/CD — это шаг к тому, чтобы понимать, как их автотесты встроены в более широкий процесс разработки.


1. Continuous Integration (CI) — Непрерывная интеграция
Непрерывная интеграция — это практика, при которой разработчики регулярно вносят изменения в код и объединяют их в основную ветку проекта. Как только новый код добавлен, запускаются автоматические проверки, включая автотесты. Этот процесс помогает убедиться, что каждая новая часть кода корректна и не ломает работу остальной системы.

Пример CI для автотестов:
- Представьте, что команда добавляет новую функцию в приложение.
- После добавления кода, CI запускает автотесты, чтобы проверить, работает ли эта функция корректно и не мешает ли она другим частям системы.
- Если тесты проходят, изменения могут быть приняты и добавлены в основную ветку кода.
- Если тесты не прошли, система отправит сообщение, чтобы разработчик или тестировщик мог разобраться с ошибкой.
Суть: CI уменьшает риски ошибок, так как выявляет их на ранних этапах.


2. Continuous Delivery (CD) — Непрерывная поставка
Непрерывная поставка добавляет к CI возможность автоматической подготовки кода к выпуску в рабочую среду.
Это значит, что код, который прошел тесты, может быть выпущен на сервер, где пользователи смогут его использовать.

В контексте тестирования, CD позволяет проверять, как код будет вести себя в реальных условиях до выпуска в производство.
Перед каждым релизом, CD также может проводить автоматические тесты на стабильность и работоспособность приложения.

Суть: CD обеспечивает высокое качество кода при его подготовке к реальному использованию, что особенно полезно для тестирования, так как позволяет проводить релизы чаще и быстрее.



3. Continuous Deployment — Непрерывное развертывание
Непрерывное развертывание — это следующий уровень после Continuous Delivery, когда после успешного прохождения тестов код сразу разворачивается в рабочей среде, без необходимости ручного подтверждения. Эта практика используется, если приложение готово к очень частым релизам и доверие к автотестам высокое.

Различия между Continuous Delivery и Continuous Deployment:
- Continuous Delivery требует ручного подтверждения перед релизом.
- Continuous Deployment выполняет релиз автоматически после успешного тестирования.



4. CI/CD в контексте автоматизации тестирования
Для QA-инженера понимание CI/CD помогает:
- Интегрировать автотесты в процесс разработки, что позволяет вовремя находить и исправлять ошибки.
- Понимать, когда и как запускать тесты автоматически — например, при каждом новом изменении в коде.
- Оптимизировать процесс тестирования: если тесты проходят CI и CD, это свидетельствует о хорошем качестве продукта.

Как CI/CD работает на практике?
Представьте, что вы добавили новый тест для проверки функции входа в систему.
Этот тест добавлен в CI/CD, и каждый раз, когда кто-то меняет код для страницы входа, CI/CD автоматически проверит, работает ли функция входа корректно.

Заключение
CI/CD помогает быстрее выпускать качественное ПО, уменьшает количество ошибок и увеличивает автоматизацию. Это критически важно для тестировщиков, так как позволяет быстрее находить ошибки, улучшать тестовое покрытие и управлять стабильностью кода.