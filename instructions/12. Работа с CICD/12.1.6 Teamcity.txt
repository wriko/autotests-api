TeamCity


TeamCity — это CI/CD-платформа от компании JetBrains, которая позволяет автоматизировать сборку, тестирование и развертывание приложений. TeamCity ориентирован на разработчиков, предоставляя широкий функционал для настройки процессов CI/CD, высокую степень кастомизации и поддержку большого числа технологий, включая Docker, Kubernetes, Git, и другие.

Особенности TeamCity
Поддержка различных технологий и языков: TeamCity поддерживает множество языков программирования и инструментов (например, Java, .NET, Python, Docker), что делает его универсальным решением для разных типов проектов.
Гибкость и кастомизация: Благодаря мощным настройкам и удобному интерфейсу, TeamCity позволяет создавать сложные и кастомизированные конвейеры для CI/CD.
Параллельные сборки: TeamCity позволяет запускать параллельные сборки и распределять задачи между агентами, что ускоряет выполнение CI/CD процессов.
Встроенные плагины: TeamCity включает множество встроенных плагинов и также поддерживает внешние, что позволяет расширять его функциональность для работы с различными системами, такими как Jira, Slack, GitHub, Docker, и другие.
Как работает TeamCity?
TeamCity использует серверно-агентную архитектуру:

Сервер управляет и отслеживает статус задач CI/CD, предоставляет интерфейс и распределяет задачи.
Агенты выполняют сборки, тестирование и другие задачи, такие как развертывание. Агенты могут быть локальными или облачными, что позволяет распределять нагрузку.
Основные элементы TeamCity:
Build Configuration: Определяет конкретные настройки для выполнения сборки. Можно настроить разные этапы, включая компиляцию, тестирование и публикацию артефактов.
Build Step: Шаги, которые выполняются в процессе сборки (например, запуск тестов, сборка артефактов).
Templates: Позволяют создать шаблоны для конфигураций сборок, что упрощает настройку однотипных процессов для нескольких проектов.
Triggers: Настройки, которые автоматически запускают сборки, например, при каждом коммите в репозиторий.
Artifacts: Результаты сборки, которые сохраняются и могут быть использованы в других сборках (например, пакеты или файлы отчётов).
Пример настройки TeamCity для Python автотестов
Чтобы настроить TeamCity для автоматизации запуска тестов на Python, можно создать Build Configuration с шагами для установки зависимостей и запуска тестов. Например:

Создайте проект и добавьте Build Configuration.
Добавьте шаги сборки:
Step 1: Установите зависимости:
Runner Type: Command Line
Script: pip install -r requirements.txt
Step 2: Запустите тесты:
Runner Type: Command Line
Script: pytest --junitxml=test-results/results.xml
Настройте Triggers для автоматического запуска сборки при каждом коммите в репозиторий.
Публикация артефактов и отчётов
Чтобы сохранить результаты тестов, можно добавить шаг для публикации артефактов:

В настройках General Settings добавьте правило сохранения артефактов:
test-results/results.xml => test_results
Это позволит хранить и просматривать отчёты о тестах и использовать их в других конфигурациях.
Преимущества и недостатки
Преимущества:

TeamCity поддерживает расширенные настройки CI/CD процессов и хорошо интегрируется с различными инструментами.
Множество плагинов и шаблонов, которые упрощают настройку и поддержание сборок.
Высокая гибкость и поддержка параллельных сборок.
Недостатки:

TeamCity может быть сложным для начальной настройки, особенно для небольших команд.
Ограничения в бесплатной версии могут потребовать покупки лицензии для масштабирования.
TeamCity отлично подходит для крупных проектов и команд, нуждающихся в мощной и гибкой системе CI/CD. Интеграция с различными технологиями, богатый функционал и возможности кастомизации делают его одним из лидеров среди CI/CD решений.