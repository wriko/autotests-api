Настраиваем GitHub Pages
Ссылки:

Официальный сайт GitHub Pages
В предыдущем шаге мы запустили автотесты на CI через GitHub Actions. В нашем workflow есть шаг для публикации Allure-отчета на GitHub Pages:

      # 8. Шаг для получения истории отчётов Allure, если она существует
      - name: Get Allure history
        uses: actions/checkout@v4  # Опять клонируем репозиторий, чтобы получить историю отчётов
        if: always()  # Всегда выполняем, независимо от успеха или неудачи предыдущих шагов
        continue-on-error: true  # Если здесь возникнет ошибка, workflow всё равно продолжит выполнение
        with:
          ref: gh-pages  # Указываем ветку gh-pages для получения отчётов
          path: gh-pages  # Указываем путь для сохранения отчётов

      # 9. Шаг для генерации и отображения отчёта Allure
      - name: Generates Allure Report with history
        uses: simple-elf/allure-report-action@v1.12  # Используем готовое решение из GitHub Marketplace для генерации Allure отчёта
        if: always()  # Этот шаг тоже всегда выполняется
        with:
          allure_results: allure-results  # Указываем каталог с результатами тестов
          allure_history: allure-history  # Указываем каталог для истории отчётов Allure

      # 10. Шаг для деплоя отчёта Allure на GitHub Pages, чтобы его можно было просматривать в браузере
      - name: Deploy report to Github Pages
        if: always()  # Выполняется всегда, независимо от успеха других шагов
        uses: peaceiris/actions-gh-pages@v4  # Используем GitHub Action для публикации отчёта на GitHub Pages
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для аутентификации на GitHub
          publish_branch: gh-pages  # Указываем, что отчёт будет опубликован в ветке gh-pages
          publish_dir: allure-history  # Указываем папку, которая будет опубликована на GitHub Pages
После успешного запуска CI в репозитории autotests-api автоматически создается ветка gh-pages. Именно из этой ветки GitHub Pages будет публиковать Allure-отчеты.



Если переключиться на ветку gh-pages, там будут папки с Allure-отчетами для каждого запуска, где название папки — это идентификатор запуска.



Если мы перейдем в какую-либо из папок, то увидим, что внутри находятся файлы, которые раньше локально находились у нас в папке allure-report и представляли собой сгенерированный allure отчет



Но сейчас если вы перейдете по ссылке https://{ваш username на GtiHub}.github.io/autotests-api то не увидите ничего. Дело все в том, что необходимо включить определенные настройки для работы с GitHub Pages. Для этого выполним инструкции ниже

Включаем публикацию на GitHub Pages
После первого запуска workflow на GitHub Actions отчёт будет отправлен в ветку gh-pages, но для его публикации на GitHub Pages нужно выполнить несколько настроек.

Перейдите в Settings → Pages.
В разделе Build and deployment выберите:
Source: “Deploy from a branch”.
Branch: gh-pages, а в следующем поле выберите “/ (root)”.
Нажмите Save.


На вкладке Actions убедитесь, что был автоматически создан запуск workflow pages build and deployment. Подождите его завершения.



После этого в Settings → Pages появится ссылка на GitHub Pages вашего проекта.



Перейдите по ссылке, и вы увидите Allure-отчет с историей запусков.



Благодаря шагам Get Allure history и Allure Report action в отчете будет сохраняться история выполнений, что позволяет отслеживать изменения в результатах тестов со временем.

В отчете теперь отображается блок Executors с информацией о CI, на котором запускались тесты, а также ссылка на соответствующий запуск в GitHub Actions.

Во вкладке History каждого теста можно увидеть его историю запусков, что позволяет анализировать стабильность и изменения в работе теста.



Что делать если отчет не появился?
Если отчет не появился после выполнения всех настроек, выполните еще один коммит, чтобы триггерить новый запуск. Например, измените файл и выполните:

git add .
git commit -m "..."
git push origin main
На этом настройка завершена! Теперь автотесты будут запускаться на CI, а Allure-отчет будет автоматически публиковаться на GitHub Pages для удобного просмотра и анализа.