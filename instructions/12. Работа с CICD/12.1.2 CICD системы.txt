 этом уроке мы разберем системы, которые предоставляют платформы для CI/CD процессов. Давайте перечислим основные из них:

GitLab CI
GitHub Actions
Jenkins
CircleCI
TeamCity
Существуют и другие системы, но эти — самые распространенные и часто встречающиеся в вакансиях. В целом, интерфейсы и концепции всех CI/CD систем схожи: стоит лишь разобраться в основной сути, и вы сможете легко ориентироваться в любой из них. На этом шаге мы подробнее поговорим о GitLab CI.

GitLab CI (Continuous Integration) — это инструмент для автоматизации процессов разработки, тестирования и деплоя, встроенный в платформу GitLab. Он позволяет разработчикам настраивать автоматизированные процессы, которые запускаются при каждом изменении в коде. В контексте автоматизации тестирования GitLab CI помогает автоматически запускать автотесты, получать результаты и делиться ими с командой.

Как работает GitLab CI
Файл .gitlab-ci.yml — основной конфигурационный файл для GitLab CI. Этот файл хранится в корне репозитория и содержит все инструкции по запуску CI-процессов. Файл описывает, какие действия необходимо выполнить при разных событиях, таких как создание коммита или Pull Request.

Stages (Этапы) — этапы, на которые делится CI-процесс. Этапы выполняются последовательно, например, сначала сборка (build), затем тестирование (test), а затем деплой (deploy).

Jobs (Задачи) — конкретные задания в каждом этапе, такие как запуск тестов или сборка артефактов. Задачи в одном этапе могут выполняться параллельно, если позволяет инфраструктура.

Runners (Исполнители) — серверы или машины, которые выполняют задачи из .gitlab-ci.yml. GitLab предлагает свои Shared Runners, а также позволяет настраивать свои, если необходима кастомизация.

Пример файла .gitlab-ci.yml для автотестов
Вот пример файла .gitlab-ci.yml, который запускает автотесты на Python с использованием Pytest и формирует отчет в формате HTML:

stages:
  - test

test-job:
  stage: test
  image: python:3.11
  script:
    - pip install -r requirements.txt
    - pytest --html=report.html
  artifacts:
    paths:
      - report.html
Объяснение файла
stages — описывает этапы, в данном случае только этап test.
test-job — определение задачи, которая принадлежит этапу test.
image — Docker-образ, который используется для выполнения задачи. В данном примере используется образ Python.
script — команды, которые выполняются в рамках задачи.
artifacts — артефакты, такие как HTML-отчет, которые будут сохранены после выполнения задачи.
Визуализация CI/CD Pipeline
После добавления файла .gitlab-ci.yml при каждом коммите GitLab автоматически создает pipeline, который можно наблюдать на вкладке CI/CD > Pipelines. На этой странице будут отображаться все стадии и статус выполнения задач.

Пример отображения CI/CD Pipeline в GitLab



Преимущества использования GitLab CI для тестирования
Автоматизация тестов: Все тесты запускаются автоматически при каждом коммите или Pull Request, что позволяет избежать ручного запуска.
Централизация отчетов: Результаты тестов хранятся в GitLab и доступны всей команде.
Легкость настройки: Достаточно создать и настроить .gitlab-ci.yml файл.
Интеграция с Git: GitLab CI тесно интегрирован с Git, что упрощает управление версиями и отслеживание изменений.
Для более детального изучения можно посетить официальную документацию GitLab CI.