Работаем с API клиентом из HTTPX
В HTTPX уже встроен базовый API-клиент с удобным функционалом, на основе которого мы можем строить свои API-клиенты уже для конкретных API. Но давайте для начала познакомимся с основами.

1. Создадим файл httpx_client.py
В корне проекта autotests-api создадим файл httpx_client.py:

.
└── autotests-api/
    └── httpx_client.py
2. Добавим скрипт для работы с API, используя клиент
import httpx

# Инициализируем клиент
client = httpx.Client()

# Выполняем GET-запрос, используя клиент
response = client.get("http://localhost:8000/api/v1/users/me")

# Выводим ответ в консоль
print(response.text)

Разбор кода:
client = httpx.Client() – создаёт экземпляр клиента httpx.Client, который позволяет управлять HTTP-соединениями и повторно использовать TCP-соединение между запросами.
client.get("http://localhost:8000/api/v1/users/me") – выполняет GET-запрос к API.
print(response.text) – выводит в консоль ответ сервера.
Теперь давайте вспомним, как мы ранее делали запросы к API. Это выглядело так:

import httpx

httpx.get("http://localhost:8000/api/v1/users/me")
Как видите, при использовании клиента изменилось не так много. Главное отличие – теперь мы вызываем метод GET не у httpx напрямую, а через клиент.

3. Используем base_url для упрощения кода
Ранее при работе с API нам приходилось передавать полный URL в каждом запросе. В httpx.Client можно задать base_url, чтобы использовать относительные пути:

import httpx

# Инициализируем клиент с base_url
client = httpx.Client(base_url="http://localhost:8000")

# Выполняем GET-запрос, используя относительный путь
response = client.get("/api/v1/users/me")

# Выводим ответ в консоль
print(response.text)
Разбор кода:
base_url="http://localhost:8000" – теперь все запросы будут автоматически дополняться этим базовым URL.
client.get("/api/v1/users/me") – вместо полного URL передаём только путь.
4. Добавляем timeout для всех запросов
Теперь рассмотрим ещё одно преимущество использования клиентов в HTTPX. Мы можем задать timeout для всех запросов, чтобы не указывать его каждый раз:

import httpx

# Инициализируем клиент с base_url и timeout
client = httpx.Client(
    base_url="http://localhost:8000",
    timeout=100  # Таймаут в секундах
)

# Выполняем GET-запрос
response = client.get("/api/v1/users/me")
print(response.text)
Разбор кода:
timeout=100 – теперь все запросы автоматически используют этот таймаут.
5. Добавляем авторизационные заголовки на уровне клиента
Допустим, API требует аутентификацию. Мы можем добавить заголовок Authorization, чтобы не передавать его вручную в каждом запросе:

import httpx

# Проходим аутентификацию
login_payload = {
    "email": "user@example.com",
    "password": "string"
}
login_response = httpx.post("http://localhost:8000/api/v1/authentication/login", json=login_payload)
login_response_data = login_response.json()
print('Login data:', login_response_data)

# Инициализируем клиент с авторизацией
client = httpx.Client(
    base_url="http://localhost:8000",
    timeout=100,
    headers={"Authorization": f"Bearer {login_response_data['token']['accessToken']}"}
)

# Выполняем запрос с авторизацией
get_user_me_response = client.get("/api/v1/users/me")
get_user_me_response_data = get_user_me_response.json()
print('Get user me data:', get_user_me_response_data)
Разбор кода:
Мы выполняем POST-запрос для получения accessToken.
Используем headers={"Authorization": f"Bearer {token}"} при создании клиента.
Теперь все запросы автоматически включают этот заголовок.
6. Запускаем скрипт
Теперь проверим, что всё работает корректно. Выполним команду:

python -m httpx_client
При успешном выполнении скрипта в консоль выведется:

Login data: {'token': {'tokenType': 'bearer', 'accessToken': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHBpcmUiOiIyMDI1LTAyLTI4VDE2OjAwOjQyLjMyMDk2OSIsInVzZXJfaWQiOiJlOWY0N2I2Yy1kZGNmLTQyMDktODczMC02ZmU0OGE3YWIxNzYifQ.dcAHtTadjuHclICDw4KhwiRtwGungBImebYDLRylt-c', 'refreshToken': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHBpcmUiOiIyMDI1LTA0LTI5VDE1OjMwOjQyLjMyMTI3NSIsInVzZXJfaWQiOiJlOWY0N2I2Yy1kZGNmLTQyMDktODczMC02ZmU0OGE3YWIxNzYifQ.xOlfZQSeTmVOFoFDh90yPpU2LDqxshHt8qtHbiGd_Ss'}}
Get user me data: {'user': {'id': 'e9f47b6c-ddcf-4209-8730-6fe48a7ab176', 'email': 'user@example.com', 'lastName': 'string', 'firstName': 'string', 'middleName': 'string'}}