Теперь давайте напишем скрипт для удаления пользователя. Задача будет следующая:

Необходимо выполнить POST запрос на эндпоинт /api/v1/users и создать нового пользователя.
Далее нужно выполнить POST запрос на эндпоинт /api/v1/authentication/login, чтобы авторизоваться с данными только что созданного пользователя.
Далее с user_id нового пользователя и токеном необходимо выполнить запрос на удаление пользователя DELETE /api/v1/users/{user_id}, где user_id — это идентификатор пользователя, полученный в пункте 1.


1. Создаем файл httpx_delete_user.py
В корне проекта autotests-api создадим файл httpx_delete_user.py:

.
└── autotests-api/
    └── httpx_delete_user.py


2. Добавляем скрипт для удаления пользователя
В первую очередь добавим код для создания пользователя и прохождения аутентификации. Добавим его в файл httpx_delete_user.py:

    import httpx

    from tools.fakers import fake

    # Создаем пользователя
    create_user_payload = {
        "email": fake.email(),
        "password": "string",
        "lastName": "string",
        "firstName": "string",
        "middleName": "string"
    }
    create_user_response = httpx.post("http://localhost:8000/api/v1/users", json=create_user_payload)
    create_user_response_data = create_user_response.json()
    print('Create user data:', create_user_response_data)

# Проходим аутентификацию
    login_payload = {
        "email": create_user_payload['email'],
        "password": create_user_payload['password']
    }
    login_response = httpx.post("http://localhost:8000/api/v1/authentication/login", json=login_payload)
    login_response_data = login_response.json()
    print('Login data:', login_response_data)

Теперь давайте добавим код для удаления ранее созданного пользователя с использованием эндпоинта DELETE /api/v1/users/{user_id}. Важно отметить, что на удаление пользователя также требуется авторизация, именно поэтому мы запрашивали токен авторизации. Итоговый скрипт будет выглядеть следующим образом:

    import httpx

    from tools.fakers import fake

    # Создаем пользователя
    create_user_payload = {
        "email": fake.email(),
        "password": "string",
        "lastName": "string",
        "firstName": "string",
        "middleName": "string"
    }
    create_user_response = httpx.post("http://localhost:8000/api/v1/users", json=create_user_payload)
    create_user_response_data = create_user_response.json()
    print('Create user data:', create_user_response_data)

    # Проходим аутентификацию
    login_payload = {
        "email": create_user_payload['email'],
        "password": create_user_payload['password']
    }
    login_response = httpx.post("http://localhost:8000/api/v1/authentication/login", json=login_payload)
    login_response_data = login_response.json()
    print('Login data:', login_response_data)

    # Удаляем ранее созданного пользователя
    delete_user_headers = {
        "Authorization": f"Bearer {login_response_data['token']['accessToken']}"
    }
    delete_user_response = httpx.delete(
        f"http://localhost:8000/api/v1/users/{create_user_response_data['user']['id']}",
        headers=delete_user_headers
    )
    delete_user_response_data = delete_user_response.json()
    print('Delete user data:', delete_user_response_data)

3. Запускаем скрипт
Запустим скрипт httpx_delete_user.py следующей командой:

    python -m httpx_delete_user
После запуска скрипта, при успешном выполнении, мы получим следующий вывод в консоль:

    Create user data: {'user': {'id': 'd084320d-2767-4488-97b2-cd8962d96f46', 'email': 'test.1740743300.2233322@example.com', 'lastName': 'string', 'firstName': 'string', 'middleName': 'string'}}
    Login data: {'token': {'tokenType': 'bearer', 'accessToken': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHBpcmUiOiIyMDI1LTAyLTI4VDEyOjE4OjIwLjc5Njc2NyIsInVzZXJfaWQiOiJkMDg0MzIwZC0yNzY3LTQ0ODgtOTdiMi1jZDg5NjJkOTZmNDYifQ.CXfQG_VUGTvkSrAFXvl4c1KHIzsssEVEixqY_3rMI2A', 'refreshToken': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHBpcmUiOiIyMDI1LTA0LTI5VDExOjQ4OjIwLjc5NzExMyIsInVzZXJfaWQiOiJkMDg0MzIwZC0yNzY3LTQ0ODgtOTdiMi1jZDg5NjJkOTZmNDYifQ.kxEiBVE4uTdhI6Ygou8bWz1xAQM_AZf2bPLnAKItcKQ'}}
    Delete user data: None
Важно! Обратите внимание, что в консоль выведено Delete user data: None. Это означает, что в ответе на запрос удаления нам пришел null, который метод delete_user_response.json() преобразовал в Python-овский None. Это нормальная ситуация, так как запросы на удаление сущностей обычно не возвращают данных — как правило, они просто подтверждают успешное выполнение операции через статус-код или отсутствие ответа.