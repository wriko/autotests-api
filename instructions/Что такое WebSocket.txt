WebSocket — это полудуплексный или полноценный двусторонний протокол передачи данных, работающий поверх TCP.
В отличие от HTTP, WebSocket позволяет серверу и клиенту отправлять данные друг другу в любое время, без необходимости устанавливать новое соединение для каждого запроса.

========================================================================================================================
                            Принцип работы WebSocket
========================================================================================================================
1. Клиент отправляет WebSocket-запрос на сервер с помощью специального заголовка Upgrade.
2. Если сервер поддерживает WebSocket, он подтверждает установление соединения.
3. После установления соединения обе стороны могут отправлять и получать сообщения без дополнительных запросов.

========================================================================================================================
                            Основные особенности WebSocket
========================================================================================================================
1. Постоянное соединение — WebSocket сохраняет соединение между клиентом и сервером до его закрытия.
2. Двусторонняя (full-duplex) передача данных — клиент и сервер могут отправлять сообщения асинхронно.
3. Меньшая нагрузка на сеть — нет необходимости в постоянных HTTP-запросах, как в AJAX-поллинге.
4. Маленький overhead — WebSocket заголовки значительно меньше, чем у HTTP, что снижает трафик.
5. Работает через порты 80 и 443 — можно использовать WebSocket даже за файрволами, так как эти порты редко блокируются.

========================================================================================================================
                            Где используется WebSocket?
========================================================================================================================
WebSocket популярен в приложениях, где важно реальное время и низкие задержки:

 - Чаты и мессенджеры (Telegram Web, Slack, WhatsApp Web)
 - Онлайн-игры (для передачи событий между игроками)
 - Финансовые рынки (трансляция биржевых данных)
 - Дашборды и мониторинг (автоматическое обновление данных)
 - Видеоконференции (для передачи сигналов WebRTC)
 - IoT (Интернет вещей) (передача данных с датчиков)

========================================================================================================================
                            Архитектура WebSocket
========================================================================================================================
Архитектура WebSocket включает клиент, сервер и посредников (прокси, балансировщики).

-----------------------------------
Клиент
-----------------------------------
Это браузер (JavaScript API WebSocket) или нативное приложение, которое устанавливает соединение с сервером.
Пример создания WebSocket-клиента в браузере:

        const socket = new WebSocket("wss://example.com/socket");

        socket.onopen = () => {
             console.log("Соединение установлено");
             socket.send("Привет, сервер!");
        };

        socket.onmessage = (event) => {
             console.log("Сообщение от сервера:", event.data);
        };

        socket.onclose = () => {
             console.log("Соединение закрыто");
        };

-----------------------------------
Сервер
-----------------------------------
Сервер должен поддерживать WebSocket-протокол и уметь принимать и отправлять сообщения.

На Python с использованием websockets:

    import asyncio
    import websockets

    async def echo(websocket, path):
        async for message in websocket:
            await websocket.send(f"Ответ: {message}")

    start_server = websockets.serve(echo, "localhost", 8765)

    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()

=======================================================================================================================
                    Плюсы и минусы WebSocket
=======================================================================================================================
Плюсы:
 - Реальное время — мгновенная передача данных.
 - Меньше нагрузки на сервер — нет постоянных HTTP-запросов.
 - Эффективное использование трафика — нет избыточных заголовков.
 - Поддержка во всех современных браузерах.

Минусы:
 - Поддержка прокси и балансировщиков — не все прокси корректно работают с WebSocket.
 - Требуется больше ресурсов на сервере — каждое соединение занимает память и потоки.
 - Нет встроенной автоматической повторной попытки подключения — клиенту нужно самому обрабатывать разрывы связи.

========================================================================================================================
                    WebSocket vs HTTP: Различия
========================================================================================================================
 - HTTP работает по принципу запрос-ответ, а WebSocket — постоянное соединение.
 - В HTTP каждое новое соединение требует рукопожатия (handshake), а WebSocket остается открытым.
 - HTTP хорош для одноразовых запросов, WebSocket — для реального времени.

========================================================================================================================
                    WebSocket и безопасность
========================================================================================================================
1. Используйте wss:// вместо ws:// для защищенного соединения.
2. Реализуйте авторизацию (например, JWT-токены в заголовках WebSocket-запроса).
3. Ограничивайте количество подключений с одного IP.

========================================================================================================================
                    WebSocket Keep-Alive и Pings
========================================================================================================================
 - WebSocket-соединение может разрываться из-за тайм-аутов.
 - Клиент и сервер должны периодически отправлять ping/pong пакеты, чтобы поддерживать соединение.
 - В websockets (Python) можно использовать ping() для поддержания соединения.
        websocket.ping()

========================================================================================================================
                    Вывод
========================================================================================================================
WebSocket — мощный инструмент для реального времени, но его стоит использовать только там, где он действительно нужен. Для простых задач (например, обычного API) лучше подойдут HTTP или SSE.

Когда стоит использовать WebSocket?

Когда данные должны обновляться мгновенно.
Когда важно экономить трафик (вместо постоянных AJAX-запросов).
В приложениях, требующих интерактивности (чаты, игры, биржи).
Когда WebSocket НЕ нужен?

Когда обновления редкие — лучше использовать обычный HTTP.
Когда данные строго структурированы — REST API или GraphQL проще.
Когда нужно кэшировать ответы — HTTP-кэширование эффективнее.